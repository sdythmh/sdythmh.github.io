<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>元气骑士ios版修改存档教程</title>
      <link href="/2025/02/24/%E5%85%83%E6%B0%94%E9%AA%91%E5%A3%ABios%E7%89%88%E4%BF%AE%E6%94%B9%E5%AD%98%E6%A1%A3%E6%95%99%E7%A8%8B/"/>
      <url>/2025/02/24/%E5%85%83%E6%B0%94%E9%AA%91%E5%A3%ABios%E7%89%88%E4%BF%AE%E6%94%B9%E5%AD%98%E6%A1%A3%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>请注意，此方法适用于无法安装巨魔商店的ios版本，如ios17.6以上。其他可以安装巨魔商店的版本可以用巨魔或者轻松签安装一个filza文件管理器，在这个软件中修改包中的内容，但是修改的思路大致相同，由于我的手机版本是ios18.0，所以这里给出非巨魔商店的版本。</p><p>目前这个方法仅适用于修改角色、皮肤、技能、宠物和蓝币，其他的比如武器锻造、赛季币、小鱼干、成就等等均无法修改（但是可以通过imemscan读取内存的变化进行修改，可参考网上其他教程）</p><h2 id="一前期准备">一、前期准备</h2><ol type="1"><li>IOS设备（最好是没怎么用过的，或者存储空间只用了一点点的）</li><li>windows电脑（mac应该也可以）</li><li>Imazing（网上自行下载）</li></ol><p><img src="./image-20250224131716204.png" alt="image-20250224131716204" style="zoom:50%;" /></p><ol start="3" type="1"><li>plist Editor Pro for Windows</li></ol><p><img src="./image-20250224131838642.png" alt="image-20250224131838642" style="zoom:50%;" /></p><h2 id="二操作步骤">二、操作步骤</h2><h3 id="备份设备数据并提取应用">1.备份设备数据并提取应用</h3><p>打开imazing，点击继续试用。</p><p>在<code>设备</code>处，找到自己的设备，如下图</p><p><img src="./image-20250224132040975.png" alt="image-20250224132040975" style="zoom:50%;" /></p><p>点击进入，在右侧的<code>快捷操作</code>中找到<code>管理应用程序</code>，点击进入，如下图</p><p><img src="./image-20250224132244669.png" alt="image-20250224132244669" style="zoom:67%;" /></p><p>找到元气骑士，右键，选择<code>备份应用程序数据</code></p><p><font color = "red">补充：注意imazing的备份逻辑是，先备份设备中的所有文件，然后从备份中提取应用的数据，为了保证能够顺利的备份设备中的所有文件，在左侧栏的设置中，备份位置要选择一个空间足够的磁盘，如下图，这也是为什么要选择一个没怎么存储东西的设备进行操作的原因</font></p><p><img src="./image-20250224132605493.png" alt="image-20250224132605493" style="zoom:67%;" /></p><p>在选择元气骑士的<code>备份应用程序数据</code>后，目标文件夹选择桌面即可，提取选项选择<code>备份并提取应用程序数据</code>，点击<code>下一步</code>，再点击<code>好</code>，然后再输入ipad密码进行备份。</p><p><img src="./image-20250224132928221.png" alt="image-20250224132928221" style="zoom:50%;" /></p><p>首次备份的时间较长，取决于要备份的大小。备份完成后会自动提取应用程序的数据，并在目标文件夹中生成一个imazing文件。</p><p>如果没有自动提取，只需要再次重复相同的操作，只不过这次选择<code>从最近备份提取（如有）</code>，即可提取完成</p><p>然后把桌面中的文件<code>元气骑士.imazingapp</code>的名字改成<code>元气骑士1.zip</code>，也就是修改一下扩展名，用bandzip解压缩。</p><p>之后用plist Editor打开<code>\Container\Library\Preferences\com.ChillyRoom.DungeonShooter.plist</code>这个文件</p><h3 id="修改存档内容">2.修改存档内容</h3><p>打开文件可以看到存档信息 <img src="./image-20250224141637352.png" alt="image-20250224141637352" style="zoom:80%;" /></p><p>（1)修改角色</p><p>crtl+f，搜索c0_unlock，部分设备文件可能前面会含有pid，要找到自己账号所对应的pid</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>166927596_c0_unlock<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>true<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  #将此处改为True或者true即解锁对应角色</span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>166927596_c1_unlock<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>true<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  #将此处改为True或者true即解锁对应角色</span><br><span class="line"></span><br><span class="line"># ID所对应的角色</span><br><span class="line">c0 骑士</span><br><span class="line">c1 游侠</span><br><span class="line">c2 法师</span><br><span class="line">c3 刺客</span><br><span class="line">c4 炼金</span><br><span class="line">c5 工程师</span><br><span class="line">c6 吸血鬼</span><br><span class="line">c7 圣骑士</span><br><span class="line">c8 精灵</span><br><span class="line">c9 狼人</span><br><span class="line">c10 牧师</span><br><span class="line">c11 德鲁伊</span><br><span class="line">c12 机器人</span><br><span class="line">c13 狂战士</span><br><span class="line">c14 死灵法师</span><br><span class="line">c15 警官</span><br><span class="line">c16 道士</span><br><span class="line">c17 超界者</span><br><span class="line">c18 古代元素使</span><br><span class="line">c19-c21 枭首者、超时空忍者、特种起始部队（顺序可能不对）</span><br><span class="line">22 气宗 </span><br><span class="line">23 恶魔术士(warlock) </span><br><span class="line">24 矿工 </span><br><span class="line">25 陷阱大师 </span><br><span class="line">c26 皮套王子 </span><br><span class="line">c27 博士 </span><br><span class="line">c28 剑宗 </span><br><span class="line">c29 枪客 </span><br><span class="line">c30 领主 </span><br><span class="line">c31 咒法骑士</span><br><span class="line">c32 占星师</span><br><span class="line">c33 武斗家</span><br><span class="line">c34 戏法师</span><br><span class="line">c35 游吟诗人</span><br><span class="line">c36 枪手</span><br></pre></td></tr></table></figure><p>（2）解锁皮肤</p><p>搜索 <strong>skin</strong> 将其值改为 <strong>1</strong> 即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># c0即对应角色</span><br><span class="line"># skin1则为角色默认皮肤向左数第一个皮肤 skin2则为角色默认皮肤向左数第二个皮肤 以此类推</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>166927596_c0_skin1<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">integer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">integer</span>&gt;</span># 将此处的值改为1即可解锁对应皮肤</span><br><span class="line"></span><br><span class="line">#稀有皮肤如下</span><br><span class="line">圣骑士360皮肤c7_skin5</span><br><span class="line">狼人豆娃皮肤c9_skin11</span><br><span class="line">骑士爆米花c0_skin4</span><br><span class="line">精灵嗒啦啦c8_skin4</span><br><span class="line">刺客银藏c3_skin11</span><br></pre></td></tr></table></figure><p>（3）修改角色等级</p><p>搜索 <strong>level</strong> 修改值即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>166927596_c0_level<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">integer</span>&gt;</span>8<span class="tag">&lt;/<span class="name">integer</span>&gt;</span># 不同角色的最高等级不同 请避免此处值大于对应角色最高等级</span><br></pre></td></tr></table></figure><p>（4）解锁技能</p><p>搜索 <strong>skill</strong> 修改值为 <strong>1</strong> 即可</p><p>若<strong>没有</strong>找到下面字段则<strong>手动添加</strong>即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Vampire为角色所对应英文名（首字母一般大写） 将游戏语言切换到英文即可看到</span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>166927596_c_Vampire_skill_1_unlock<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">integer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（5）修改宝石</p><p>搜索 <strong>gems</strong> 修改即可，注意gems和last_gems都要修改，改成一样或者相近的数就可以</p><p>别修改的太多，几十万就可以，怕被封号</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>166927596_last_gems<span class="tag">&lt;/<span class="name">key</span>&gt;</span># 上一次变化的金币数量</span><br><span class="line"><span class="tag">&lt;<span class="name">integer</span>&gt;</span>402786<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>166927596_gems<span class="tag">&lt;/<span class="name">key</span>&gt;</span># 当前金币数量</span><br><span class="line"><span class="tag">&lt;<span class="name">integer</span>&gt;</span>394786<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（6）修改宠物</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>p0_unlock<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>true<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"># 数字排列为阿凉往左数，p0为阿凉</span><br><span class="line"></span><br><span class="line">#稀有宠物：黑猪  p17</span><br></pre></td></tr></table></figure><p>（7）修改家具</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>166927596_furniture_book_level<span class="tag">&lt;/<span class="name">key</span>&gt;</span># 书籍等级</span><br><span class="line"><span class="tag">&lt;<span class="name">integer</span>&gt;</span>5<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>166927596_furniture_pet_food_level<span class="tag">&lt;/<span class="name">key</span>&gt;</span># 宠物食物等级</span><br><span class="line"><span class="tag">&lt;<span class="name">integer</span>&gt;</span>5<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="保存并恢复">3.保存并恢复</h3><p>将刚刚的文件在plist editor中保存。把下图中的四个文件用bandzip压缩。</p><p><font color = "red">注意，压缩的目录下面直接就是这4个文件，不要存储在元气骑士文件夹中再压缩这个文件夹，要点进去选中4个文件压缩</font></p><p>压缩的时候最好把压缩级别选择为<code>0-仅存储</code></p><p><img src="./image-20250224144654514.png" alt="image-20250224144654514" style="zoom:80%;" /></p><p>压缩结束后把扩展名改回<code>imazing</code></p><p>进入到imzaing，还是进入到刚刚的<code>管理应用程序</code>，右键选择<code>恢复应用程序数据</code>，上传刚刚修改完的imazing文件，一直继续下去</p><p><font color = "red">注意：imazing的恢复逻辑也是先备份设备中的数据，再进行恢复应用程序的数据，在恢复的时候要先在ipad-&gt;apple账户-&gt;查找-&gt;关闭“查找我的ipad”</font></p><p><font color = "red">同时，还要在imazing中打开备份加密，密码设置为一个自己能永远记住的密码，如下图</font></p><p><img src="./image-20250224153007333.png" alt="image-20250224153007333" style="zoom:50%;" /></p><p>安装完元气骑士后，ipad要再次输入一次密码，并进入到恢复状态，也就是刚拿到新机时的hello动画状态，安装步骤一步一步进行即可</p><p><font color = "red">注意：在apple id登录的时候，不要登录，点击“跳过此步骤”，否则可能会出现ipad自己恢复到修改之前的状态（白修改存档了），我们只是修改了一个游戏的数据，并没有改动其他的文件，所以apple id也不会退出，也不会有任何的丢失</font></p><p>最后等待元气骑士应用在ipad安装完成即可进入游戏查看自己的本地存档。</p><h2 id="三最后声明disclaimer">三、最后声明（Disclaimer）</h2><p>关于是否支持游戏破解也是众说纷纭，这里我想表达一下我的观点。大多数人不支持破解的原因无非是因为自己氪得比较多，看到了这篇帖子和通过这篇帖子成功破解的玩家后内心产生了不平衡的想法。其实，我想说明的一点是，在2025年的今天，众多游戏已经采用了从云服务器的数据库中读取数据来加载游戏进度，而凉屋却搞成了本地存档和云存档且没有进行任何的加密，这也就给了破解爱好者可乘之机。不过，这也和游戏初始是单机游戏有关，很多玩家在更换手机后，发现原来的进度不再匹配，于是凉屋便搞出来了一个云存档绑定一个账号。但是，这也出现了一系列如克隆存档，低价代刷数据等不良交易的问题。我相信一个好的游戏公司，一定会找到解决该问题的相关方法，而不是口头上喊着“抵制破解存档”，实际上却无动于衷。</p><p>总之，<strong>本文章中内容为个人学习过程记录，仅供个人学习参考，请勿用于其他用途。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅学Latex</title>
      <link href="/2025/01/31/%E6%B5%85%E5%AD%A6Latex/"/>
      <url>/2025/01/31/%E6%B5%85%E5%AD%A6Latex/</url>
      
        <content type="html"><![CDATA[<h1 id="latex模板">Latex模板</h1><p><strong>注释</strong></p><p>Latex文件注释使用“%”，在一行中“%”后面的内容均会被注释掉</p><p><strong>命令或特殊符号</strong></p><p>““符号，表示这是一个命令或者特殊符号（转译字符）</p><p><strong>普通文本</strong></p><p>标题、摘要、正文、图标标题等</p><p><strong>特殊符号</strong></p><p>&amp; 用于表哥或数学公式中的位置对齐符号</p><p>$ 用作数学公式的标记符：被框在两个该符号中间的内容将会翻译为数学公式</p><p>～ 强制保留空格，非常古老的用法</p><p>^和_ 上三角和下划线用作上下标标记</p><p>{和} 左右花括号表示将其中的内容作为一个整体对待</p><h1 id="latex数学公式">Latex数学公式</h1><h2 id="希腊字母">希腊字母</h2><p><span class="math display">\[\delta,\lambda\\\Delta,\Lambda\\\Alpha,\Beta\\\phi,\varphi\\\epsilon,\varepsilon\\\]</span></p><p><img src="./截屏2025-01-31 23.05.56.png" alt="截屏2025-01-31 23.05.56" style="zoom:50%;" /> <span class="math display">\[a^2,a_1\\x^{y+z},p_{ij}\\x_i,x_{\text i},x_{\rm i}\\\text{A B},\rm{A B}\\\text A B,\rm A B\\{\rm A} B\\\rm e\]</span> <strong>常量为直立体，变量为斜体</strong></p><p>text中可以显示空格，但是没有大括号时只管后面第一个字符</p><p>rm中空格忽略，但是没有大括号时可以使后面所有的空格变为直立体</p><h2 id="分式与根式">分式与根式</h2><p><span class="math display">\[\frac12,\frac{1}{2}\\\frac1{x+y}\\\frac{\dfrac1x+1}{y+1}\]</span></p><hr /><p><span class="math display">\[\sqrt x\\\sqrt {x+y}\\\sqrt[3] x\]</span></p><h2 id="普通运算符">普通运算符</h2><p><span class="math display">\[+-\\\times,\cdot,\div\\\pm,\mp\\&gt;,&lt;,\ge,\le,\ll,\gg,\ne,\approx,\equiv\\\cap,\cup,\in,\notin,\subseteq,\subsetneqq,\varnothing,\complement\\\forall,\exists,\nexists\\\because,\therefore\\\R,\Q,\N,\Z_+\\\mathcal F,\mathscr F\]</span></p><hr /><p><span class="math display">\[\cdots,\vdots,\ddots\]</span></p><hr /><p><span class="math display">\[\infty,\partial,∂,\nabla,\propto,\degree\]</span></p><p>mac电脑<code>option+d</code>直接输入偏微分符号</p><p>正比于proportional to</p><hr /><p><span class="math display">\[\sin x,\cos x,\cosh x\\\log_2 x,\ln x, \lg x\\\lim_{x \to 0} \frac {\sin x} x\lim\limits_{x \to 0} \frac {\sin x} x\\\max\limits_x,\min_x\]</span></p><p>lim后面加limits把趋于符号强制放在lim下方</p><h2 id="大型运算符">大型运算符</h2><p><span class="math display">\[\sum,\prod\\\sum_i,\sum_{i=0}^k\\\frac{\sum\limits_{i=1}^n x_i}{\prod\limits_{i=1}^n x_i}\]</span></p><hr /><p><span class="math display">\[\int,\iint,\iiint,\oint,\oiint\\\int_{-\infty}^0 f(x)\,\text dx\]</span></p><p>积分integral</p><p>反斜杠加逗号表示一个比较小的间隔</p><p>dx中的d为直立体 <span class="math display">\[a\,a\\a\ a\\a\quad a\\a\qquad a\]</span></p><h2 id="标注符号">标注符号</h2><p><span class="math display">\[\vec x,\overrightarrow {AB}\\\bar x,\overline{AB}\]</span></p><p><img src="./截屏2025-02-07 17.07.31.png" alt="截屏2025-02-07 17.07.31" style="zoom: 50%;" /></p><h2 id="箭头">箭头</h2><p><span class="math display">\[\leftarrow,\Rightarrow,\Leftrightarrow,\longleftarrow\]</span></p><p><img src="./截屏2025-02-07 17.09.31.png" alt="截屏2025-02-07 17.09.31" style="zoom:50%;" /></p><h2 id="括号与定界符">括号与定界符</h2><p>最后一个式子加上“点”，表示虚拟的括号 <span class="math display">\[\{\}\\\lceil,\rceil,\lfloor,\rfloor,|\\\left(0,\frac 1 a\right]\\\left.\frac{∂f}{∂x}\right|_{x=0}\]</span></p><h2 id="多行公式">多行公式</h2><p>在等号前面加上"&amp;"使得等号左对齐 $$ <span class="math display">\[\begin{align}a&amp;=b+c+d\\&amp;=e+f\end{align}\]</span> $$</p><h2 id="大括号">大括号</h2><p><span class="math display">\[f(x)=\begin{cases}\sin x, &amp; -π\le x \le π\\0,&amp; \text{其他}\end{cases}\]</span></p><h2 id="矩阵">矩阵</h2><p>矩阵分为matrix, bmatrix(bracket方括号), pmatrix(parenthesis圆括号), vmatrix(vertical bar竖向短线) <span class="math display">\[\begin{bmatrix}a &amp; b &amp; \cdots &amp; d\\\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\e &amp; f &amp; \cdots &amp; g\end{bmatrix}\]</span> 加粗（bold face） <span class="math display">\[\bf A, \bf B^{\text T}\]</span></p><h2 id="实战演练">实战演练</h2><p><span class="math display">\[f(x)=\frac{1}{\sqrt {2π}\sigma}e^{-\frac{(x-\mu)^2}{2\sigma^2}}\]</span></p><p><span class="math display">\[\lim\limits_{N\rightarrow\infty}p\left\{\left|\frac{I(\alpha_i)}{N}-H(s)\right|&lt;\varepsilon\right\}=1\]</span></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>charoneo的2025新年献词</title>
      <link href="/2024/12/31/charoneo%E7%9A%842025%E6%96%B0%E5%B9%B4%E7%8C%AE%E8%AF%8D/"/>
      <url>/2024/12/31/charoneo%E7%9A%842025%E6%96%B0%E5%B9%B4%E7%8C%AE%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<p>人类总是回顾着过去、盼望着未来，这也是习的新年贺词和南方周末的新年献词存在的意义，但是前者更加偏向政治色彩，而后者个人认为是文采与哲理并存。基于此，我打算从今年开始，每一年终都写一篇charoneo的新年献词，来记录我这一年的精神状态以及对未来的看法，读书太少，文采有限，多多见谅。</p><p>这一年可谓是我人生中目前最“疯狂”的一年，在我看来，我经历了我人生中最重大的转折点，去年的这个时候我还在为期末考试而苦苦焦虑疯狂复习，而今年虽然只剩下一门难啃的习概，却也感觉无所谓了。毕竟，我的目标已经改变，大二时还想着拼劲全力保研，经历了一个难忘的暑假后，现在已经和保研失之交臂了。</p><p>其实，一个人的转变如此之大，和他所处的环境有极大的关系。上了大学，没有了高中老师和家长的束缚，学习上也没有了高中的紧张，很难说不开摆。既然没了缰绳的束缚，对于自制力差的人，会逐渐脱离正轨越来越远。这也是我这一年来，做出了许多疯狂的事的重要原因。</p><p>遥想大一刚来时，我还兴致勃勃地竞选团支部书记、参加社团、带领同学们参加各种团日活动和积极参加比赛，而现在对于班级活动，已经到了视而不见的程度，原因很简单——<strong><em>一切都是以个人利益为主，而个人利益又是与当前的目标紧密相连</em></strong>。其实说的直白一点，这也没有问题，竞选团支书你可能说是为了锻炼自己，而谁又不是因为获得更多的资源呢（比如入党、评优方便），以后步入社会后当官也是同理。<strong><em>不是为了个人利益而活那不是人，是入</em></strong>，当然对外宣称总是要展现正能量的一面，经过简单的包装就可以把个人利益转换为集体利益。比如，我竞选团支书的目的是为了更好地完成班级管理的工作、更好的为同学服务。目前来讲，对于这些活动，已经无法提升我的个人利益，因此也失去了大一时的激情。</p><p>没有了激情，各个方面都会受到影响，首先是作息，大一时每天都想着7点起床，早早的去图书馆学习，当时每天7点的闹钟可谓是舍友的噩梦。现在已然不复存在，手机的闹钟时不时都会定在10点，周末甚至直接取消闹钟。其次是对待各个学科的热情，大一时还在认认真真的做每一门作业，虽然有时也会用小猿搜题等软件，但大部分作业都是自己认真思考并独立完成的。而现在，对于每一门课程的作业，第一步就是上tju课程共享计划上搜，如果没有答案，直接ChatGPT，几秒之内就能出结果不说，准确度也提升了不少。还有好多问题，由于是公开的博客，我就不放在明面上说了。</p><p>其实说了这么多，你可能认为我堕落了，其实不然。<strong><em>一个人失去一些事物的同时，必然会获得一些事物（运气同理）。</em></strong>这一年我还是取得了不少的成就的，比如克服了游戏上瘾的问题、每天都能坚持跑步、数学竞赛获奖、成绩稳步提升等等好消息。只是对于我的性格而言，我总是会更多的关注我的缺点与不足，并加以改正，这些好消息只是磨难道路上短暂的心灵慰藉罢了，此外我也不想炫耀，因此这一部分省略。。。</p><hr /><p>刚刚说完了个人的情况，现在来聊聊这一年社会上的变化以及我对这些变化的看法。这一年，最大的变化无非是人工智能的极速发展，其实人工智能一直以来是我想讨论的一个话题，只不过软工专业对这个领域学的不深，我自己也没有额外去深层次地了解，目前只是简单谈谈相关社会问题的看法。在大一转专业的时候，有同学就建议我，转到人工智能专业吧，当前人工智能很火热🔥，未来发展很不错，而当时我的想法还处于对传统coding的喜爱，以及对传统写软件写程序的向往，并没有过多的考虑这方面。现在，人工智能已经渗透到每个人生活的各个方面，首先便是各大公司陆续推出各自的AI系统，比如MicroSoft的Copilot，OpenAI的ChatGPT，国内有百度的文心一言、科大讯飞的星火大模型等等。直到有一天我发现wps也有了WPS AI，之前做设计的蓝湖也有了AI的功能，我才明白几乎所有行业都在疯狂的卷AI，无论是调用其他公司的模型接口还是自己训练模型，都是为了尽快了融入当前社会，跟上时代潮流。我已经想象到了画面，某小规模企业的产品经理疯狂的push自己的程序员：“你们必须在一个周之内完成AI的功能！！不然扣工资”，于是乎，一个周之后，他们调用了ChatGPT的API接口，完成的自己的任务。我想表达的是，<strong><em>在当今这个追逐社会潮流的浮躁的社会中，你真的能找到你为这个社会奔波的意义吗？究竟是人来控制着社会，还是社会控制着人。</em></strong>这和打王者荣耀很像，我想大多数人打王者的目的很明确——放松，那又有多少人能够真的放松了呢？每一局都会因为队友强势碾压对面而高兴不已，也会因为队友像入机被对面碾压而气愤不已，而操控你胜率的是匹配机制，本来想着放松的你，被匹配机制搞红温了，简单来说，就是被游戏所控制了。或许你感受不到当今社会上的这种追逐潮流风气，就如同你还天真地认为实力才是王者上分的唯一真理一样。其实这也无所谓，如果能找到一个使得自己心满意足（或者说是麻痹自己）的理由，无脑的跟风也不错，毕竟人生有限，没有精力去浪费，在风华正茂的年纪，如果没有把握住时代潮流，一意孤行，风险和代价太大。而这个理由对大多数人都很简单——搞钱，在他们看来，工作的目的是为了挣钱，而追逐社会潮流是为了提高竞争力，提高了竞争力又能挣更多的钱，说了半天，又回到了个人利益这个话题。目前来讲，我认为，<strong><em>一切都以个人利益为主，独善其身，应是每个人内心深处不可磨灭的印记。</em></strong>也就是说，如果一个人追逐社会潮流，可以获得更多的个人利益，那这就可以成为这个人被社会所控制的完美理由。</p><p>其次我还想聊聊关于AI写完成作业的事，其实不光是完成作业，如果工作以后，可以是AI帮你完成工作的年终总结；如果是入党，可以是AI帮你完成入党申请书。很喜欢《南方周末》中的一句话——<strong><em>算力和数据提速着认知与决策，也拨动着心灵中公平正义的天平。若将一切抉择都交给算法，人的精神与觉醒是否面临荒芜？</em></strong>诚哉斯言，但<ins>内在知识的匮乏以致难以完成作业</ins>和<ins>AI完成的作业换来的高分</ins>相比，哪个更能让你动心呢？<ins>工作的求真务实却一直不得重用</ins>和<ins>AI完成的年终总结而得到领导的表彰</ins>相比，哪个更能打动你呢？这些例子还有很多很多，或许你会觉得这些都是个例，这便如同你还天真地认为实力才是王者上分的唯一真理一样。这个社会，内在的学识已经成为过去式，在AI迅速发展的当今，学会用AI武装自己才是走向成功的捷径。可是，究竟哪些方面可以用AI来武装自己呢？哪些方面可以不需要丰富的学识呢？很简单，就拿保研考研来说，可以简单列个表</p><table><thead><tr class="header"><th>方面</th><th>保研</th><th>考研</th></tr></thead><tbody><tr class="odd"><td>是否需要AI武装</td><td>是</td><td>否</td></tr><tr class="even"><td>基础知识的扎实程度（内在学识）</td><td>不扎实</td><td>扎实</td></tr><tr class="odd"><td>受追捧程度</td><td>高</td><td>低</td></tr><tr class="even"><td>能否获得好资源（选导师）</td><td>能</td><td>不能</td></tr><tr class="odd"><td>难易程度</td><td>简单</td><td>困难</td></tr></tbody></table><p>请注意，上面的AI武装涵盖许多方面，比如说，通过AI完成作业获取高分成绩，通过AI完成各种比赛等等。通过上面的对比，可以看出越是需要包装自己的，越是容易获得更好的资源，越是受到人们的追捧，这也是为什么25考研人数骤减几十万的原因。但是如果你问保研er高数相关的问题，他们甚至有可能比不过大一学弟，不过这一现象也很正常，就如同你随便问一个公务员让他背一下公务员的八项规定是什么，多数人可能早已忘记；甚至你随便问一个入党2年以上的党员，问他入党誓词是什么，能一个词不差的背下来的也是寥寥无几。这倒无妨，因为，保研er已经有了丰富的科研经历了，对于这些底层的概念只配考研er来学；公务员已经有了稳定的饭碗了，那些规定只要不过度违反又有何人在意呢？我想表达的是：<strong><em>高层次的人物往往不用有丰富的学识而生活的很好，低层次的人物为了追求所谓丰富的学识而撞的头破血流。</em></strong>或许你会觉得，可怜之人必有可恨之处，保研er之所以能保研，是因为他们努力了3年，而考研er是摆烂了3年。但真的是这样吗？</p><p>先不说天津某所985作弊现象严重的问题（学校论坛一到期末周几乎每天都有人发帖吐槽），就单单博主大一一年加权86，刚转到智算后，排名大概在50%左右，经过了两年的“AI武装”后，加权已近乎90，排名也是来到了10%，<font color = "blue">如果你问我，我这两年努力了吗？</font>我可以明确的告诉你，大一努力程度10%，大二大三努力程度30%，<font color = "blue">这么低的努力程度，如何取得这么大的进步？</font>，那一定是学会了用AI来武装自己（即答），之前我可能还会回答要会一点点手法（比如说面向考试而复习），而大三的每一门课程几乎都以大作业的形式结课，ChatGPT已经成为了每一个人救命稻草，他能让你把一个你从未去听过课的课程轻松地考到90+。</p><p>其实我有的时候在想，985的学生究竟比那些双非的强在了哪里？我们之间的竞争真的公平吗？社会的竞争真的公平吗？双非靠自己的实力奋战至专业第一保研都可能去不了清北，而985利用ChatGPT排名前五就可以保去清北，双非学子还在为了考研而奋战，而985学子已经出去周游世界了。大学是这样，步入社会的工作亦是如此。这真的公平吗？请记住：<strong><em>公平永远是相对的，没有绝对的。</em></strong>这和运动与静止很像：运动是绝对的，静止是相对的。只不过物理方面比较客观，已经被科学家们证实并被人们认为是公理。但是”公平“这个词就比较抽象，带有主观色彩，所以，每个人都有自己的看法，<strong><em>永远不要评价一件事情的公平性，因为当你评判一件事情是否公平的时候，你内心的天平已经倾斜</em></strong>，所以现在社会上不少人士振臂高呼”实现教育公平“，在我看来，这只是心智不成熟、与社会实际脱节的婴儿行为罢了。</p><p>说了这么多，你可能会觉得我是一个负面情绪很浓烈的人，其实不然，上面这些想法只是平时emo时偶然蹦出来的，这里只汇总了一部分。上面的所有言论只适用于大部分人，我也只是描述了普遍的现象，但如果你是绝对实力拥有者，请忽略我的叙述。<font color = "red">此篇文章上面的部分（尤其是黑斜体部分）并不体现和代表任何个人价值观，如果你是我的朋友，请不要改变你对我的看法😁</font>，下面来说一些积极的部分和对新的一年的展望。</p><p>首先一句话——<strong><em>乾坤未定，你我都是黑马</em></strong>。这一年，我面对另外一种不同的、全新的道路，如果能够完美的渡劫，那么会比之前设想的道路强太多太多。正如上帝给一个人关闭了一扇门的时候，必然打开了一扇窗一样。在过去的几年，尤其是刚上大学以来，我一直希望当你足够掌握的某一知识的时候再去付诸实践，比如，只有你完完整整的学了一遍java后，才能自己写一个java小程序；只有你完全掌握了机器学习，才能参加人工智能相关的比赛。其实面对快节奏的大学生活和繁多的课业任务，很多时候，简单的了解便可以“上战场”了，边实践边学习，遇到不会的问题现学也不是一种下策。有句话希望你我共勉：<strong><em>树欲静而风不止、子欲养而亲不待，机遇总是垂青有准备的人，不要当失去了才后悔没有珍惜</em></strong>（谈恋爱亦如此）。愿你我都有自己明确的目标，并不断为之奋斗！</p><p>第二点便是多关注时政，不仅仅是国内的各大新闻，还要关注国际上的风云变幻；不仅仅要了解每个国家光彩进步的一面，还要了解每个国家的阴暗与不足。在我看来只有掌握了每个事件的实际真相和背后的原因，才能让你思想得到提升，才能让你说出的话语更成熟、更有分量。前几天我在抖音上突然刷到几集《恶搞之家》，我便迅速喜欢上了这部短动画片。里面反应了大部分美国的社会现象，比如种族歧视、迫害犹太人、发动战争、武器滥用等方面。我不禁感慨，只有“自由的国度”才敢这么拍的这么讽刺啊。当然评论区也有许多人直呼看不懂，其实想看懂也容易，每天多看看相关的时政博主，墙内的大多数我其实并不建议看，毕竟媒体的过度包装已毫无真相可言。多看看墙外的世界，多了解真相，不要做井底之蛙。</p><p>最后我引用《南方周末》的一段作为结尾：</p><p>新年的阳光会如约而至，它照耀着每个与众不同的人。这个世界不会因为技术变得简单，复杂才是它的本质，我们也终将在这复杂中找到存在的意义。因为你无法计算，所以无可估量；因为你并不完美，反而独一无二——这是我们对人与AI关系的反思，更是对人类价值的再次确认。我们之所以在这颗星球上行走，不是为了成为最快最好的机器，而是要在这浩瀚的星辰大海中找到自己、确认自己、喜欢自己。</p><p>祝你新的一年，新气象！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法拓展教学</title>
      <link href="/2024/12/30/markdown%E8%AF%AD%E6%B3%95%E6%8B%93%E5%B1%95%E6%95%99%E5%AD%A6/"/>
      <url>/2024/12/30/markdown%E8%AF%AD%E6%B3%95%E6%8B%93%E5%B1%95%E6%95%99%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<p>内容部分摘自<a href="https://docs.github.com/zh/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax#quoting-code">使用简单的语法在 GitHub 上为您的散文和代码创建复杂的格式</a></p><p>如果有部分显示不正确，那就是只支持markdown（具体来讲是typora中编辑时），不能进行网页的渲染（注意区分github渲染和web渲染）</p><hr /><p><code>&lt;a name= "anchor"&gt;自定义定位点&lt;/a&gt;</code></p><p><code>[回到anchor](#anchor)</code></p><p><a name= "anchor">自定义定位点</a></p><p>引用见文章末尾</p><hr /><p>脚注</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Here is a simple footnote[^1].</span><br><span class="line"></span><br><span class="line">[^1]: My reference.</span><br></pre></td></tr></table></figure><p>Here is a simple footnote<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>.</p><p>引用见文章末尾</p><hr /><p>加粗 两个*或者两个_ <strong>TEST</strong> <strong>TEST</strong></p><p>斜体 一个<em>或者一个_ </em>TEST* <em>TEST</em></p><p>删除线 两个~ <del>TEST</del></p><p>粗斜体 三个* <strong><em>TEST</em></strong></p><p>下标 <code>&lt;sub&gt;&lt;/sub&gt;</code> 这是<sub>下标</sub></p><p>上标 <code>&lt;sup&gt;&lt;/sup&gt;</code> 这是<sup>上标</sup></p><p>下划线 <code>&lt;ins&gt;&lt;/ins&gt;</code> 这是<ins>下划线</ins></p><hr /><p>使用 <code>^(ctl) + 一个``</code> 为代码块添加反引号。<font color = "red">注意是一个反引号，且只有英文状态下可以</font></p><p>注释 <code>^(ctl) + -</code> <!--这是一条注释 This content will not appear in the rendered Markdown--></p><p>分割线. <code>*** + 回车</code> <code>--- + 回车</code> 必须要在一个新行</p><hr /><hr /><p>超链接 <code>[必应](https://www.bing.com)</code></p><p><font color = "red">如果不加上协议（如 http:// 或 https://），生成的链接会被解析为相对路径，从而导致错误的跳转</font></p><p><a href="https://www.bing.com">必应</a></p><hr /><p>无序列表，<code>- + 空格</code> 或 <code>* + 空格</code> 注意必须在一个新行，若有不同的级别只需要<code>回车+tab</code>即可</p><ul><li>一级<ul><li>二级<ul><li>三级<ul><li>四级</li></ul></li></ul></li></ul></li></ul><hr /><p>任务列表 快捷键<code>command + option + X</code></p><p><code>- + 空格 + [ ] + 空格</code> 未完成</p><p><code>- + 空格 + [x] + 空格</code>已完成</p><ul class="task-list"><li><input type="checkbox" disabled="" checked="" />第一个任务</li><li><input type="checkbox" disabled="" />第二个任务</li></ul><hr /><p>数学公式 快捷键<code>command + option + B</code></p><p>若要在web上显示，则要在hexo博客中，要安装插件</p><p>详见<a href="https://blog.csdn.net/qq_52466006/article/details/126924064">这里</a></p><p>按照上面的教程操作玩之后别忘记<code>npm install mathjax</code> <span class="math display">\[\ \begin{split} A\\B \end{split}\,\]</span></p><hr /><p>表情 <code>: + EMOJICODE + :</code></p><p>若要在web上显示，则要在hexo博客中，要安装<strong>Hexo Emoji</strong>插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-github-emojis --save</span><br></pre></td></tr></table></figure><p>这里就不安装了，因为mac本身能打出emoji</p><p>👍 💩</p><p><code>:+1:</code></p><p>:+1:</p><p><code>:shit:</code></p><p>:shit:</p><hr /><p>提示块</p><p>若要在web上显示，则要在hexo博客中，要安装<strong>Hexo Tag</strong>插件</p><p>这里也不做演示了，具体可以看https://wishdq.github.io/index/12337.html#fnref:2</p><blockquote><p>[!NOTE]</p><p>&gt; + 空格 + [!TIP]</p></blockquote><blockquote><p>[!TIP]</p><p>&gt; + 空格 + [!TIP]</p></blockquote><blockquote><p>[!IMPORTANT]</p><p>&gt; + 空格 + [!IMPORTANT]</p></blockquote><blockquote><p>[!WARNING]</p><p>&gt; + 空格 + [!WARNING]</p></blockquote><blockquote><p>[!CAUTION]</p><p>&gt; + 空格 + [!CAUTION]</p></blockquote><p>在typora中显示效果如下</p><p><img src="./截屏2024-12-30 15.08.41.png" alt="截屏2024-12-30 15.08.41" style="zoom: 50%;" /></p><hr /><p>表格</p><p>|name|gender| + 回车 自动生成表格，然后再调整表格即可，或者在菜单栏段落-&gt;表格-&gt;插入表格</p><table><thead><tr class="header"><th>name</th><th>gender</th></tr></thead><tbody><tr class="odd"><td>charoneo</td><td>male</td></tr></tbody></table><hr /><p><a href="#anchor">回到anchor</a></p><section class="footnotes" role="doc-endnotes"><hr /><ol><li id="fn1" role="doc-endnote"><p>my reference<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式笔记</title>
      <link href="/2024/12/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/12/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>本笔记是基于b站黑马程序员的设计模式教程，仅供参考！！如果想获取代码，欢迎<a href= "mailto:sdythmh@gmail.com">联系charoneo</a>或在下方的评论区留言，注意只有软件设计原则部分的代码是黑马程序员视频中的，其他代码是作业要求的代码，具体每个模式的要求可以见每个包下面的<code>requirement.txt</code></p><h1 id="设计模式笔记">设计模式笔记</h1><h2 id="设计模式概述">设计模式概述</h2><h3 id="什么是设计模式">什么是设计模式</h3><p>软件设计模式是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。具有一定的普遍性，可以反复使用。可以提高程序员的思维能力、使程序设计更加标准化、设计的代码可重用性高</p><h3 id="设计模式分类">设计模式分类</h3><p><strong>创建型模式</strong>：用于描述怎么创建对象，将对象的创建和使用分离（解耦），有单例模式、原型模式、工厂方法、抽象工厂、建造者5种</p><p><strong>结构型模式</strong>：描述如何将类或对象按某种布局组成更大的结构，有代理、适配器、桥接、装饰、外观、享元、组合等7种模式</p><p><strong>行为型模式</strong>：描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责，有模版方法、策略、命令、职责链、状态、观察者、中介者、迭代器、备忘录、解释器等11种</p><h2 id="uml">UML</h2><p>统一建模语言是用来设计软件的可视化建模语言。他的特点是简单、统一、图形化，能够表达软件设计中的动态与静态信息。</p><h3 id="类图">类图</h3><p>类图（Class diagram）是显示了模型的<strong>静态</strong>结构，特别是模型中存在的类，类的内部结构以及它们与其他类的关系。类图不显示暂时性信息，类图是面向对象建模的主要组成部分。</p><h3 id="类图表示法">类图表示法</h3><p><img src="./截屏2024-12-18 15.05.28.png" alt="截屏2024-12-18 15.05.28" style="zoom:67%;" /></p><p>包含类名、属性和方法</p><p>斜体表示抽象、下划线表示静态</p><p>属性/方法名称前加的加号和减号表示了这个属性/方法的可见性</p><ul><li>+：表示public</li><li>-：表示private</li><li>#：表示protected</li></ul><p>属性的完整表示方法是：<strong>可见性 名称 ： 类型 [ = 缺省值]</strong></p><p>方法的完整表示方式是：<strong>可见性 名称（参数列表） [ : 返回类型]</strong></p><h3 id="类与类之间的关系">类与类之间的关系</h3><p>关联关系是对象之间的一种引用关系，用于一类对象与另一类对象之间的关系，分为一般关联关系，聚合关系和组合关系</p><blockquote><p>1.一般关联</p></blockquote><p>一般关联可分为单向关联、双向关联、自关联</p><p><strong>单向关联</strong></p><p><img src="./截屏2024-12-19 15.24.46.png" alt="截屏2024-12-19 15.24.46" style="zoom:67%;" /></p><p>在uml图中用一个带箭头的实线表示</p><p><strong>双向关联</strong></p><p><img src="./截屏2024-12-19 15.34.01.png" alt="截屏2024-12-19 15.34.01" style="zoom:67%;" /></p><p>就是对方各自持有对方类型的成员变量</p><p>在UML类图中用一个不带箭头的直线表示</p><p><strong>自关联</strong></p><p><img src="./截屏2024-12-19 15.37.12.png" alt="截屏2024-12-19 15.37.12" style="zoom:67%;" /></p><p>在UML类图中用一个带有箭头且指向自身的线表示，如LinkedList</p><blockquote><p>2.聚合关系</p></blockquote><p>聚合关系是关联关系的一种，是强关联关系，是整体与部分的关系</p><p>成员对象是整体对象的一部分，但是<font color = "red">成员对象可以脱离整体对象而独立存在</font></p><p><img src="./截屏2024-12-19 15.46.53.png" alt="截屏2024-12-19 15.46.53" style="zoom:67%;" /></p><p>在UML图中中带空心的菱形来表示</p><blockquote><p>3.组合关系</p></blockquote><p>组合表示类之间整体与部分的关系，但它是一种更强烈的聚合关系</p><p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也不存在</p><p><img src="./截屏2024-12-19 15.51.07.png" alt="截屏2024-12-19 15.51.07" style="zoom:67%;" /></p><p>在UML类图中用实心菱形来表示</p><blockquote><p>4.依赖关系</p></blockquote><p>依赖关系是一种使用关系，是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过<strong>局部变量、方法参数或者对静态方法的调用</strong>来访问另一个类（被依赖类）中的某些方法来完成一些职责</p><p><img src="./截屏2024-12-19 15.56.43.png" alt="截屏2024-12-19 15.56.43" style="zoom:67%;" /></p><p>在UML图中用带箭头的虚线来表示</p><blockquote><p>5.继承关系</p></blockquote><p>继承关系是对象之间耦合度最大的一种关系，表示一般与特殊，父类与子类之间的关系</p><p><img src="./截屏2024-12-19 15.59.01.png" alt="截屏2024-12-19 15.59.01" style="zoom:67%;" /></p><p>在UML图中用空心三角箭头的实线来表示</p><blockquote><p>6.实现关系</p></blockquote><p>实现关系是接口与实现类之间的关系，类中的操作实现了接口中所声明的所有的抽象操作</p><p><img src="./截屏2024-12-19 16.01.48.png" alt="截屏2024-12-19 16.01.48" style="zoom:67%;" /></p><p>在UML图中用空心的三角箭头来表示</p><h2 id="软件设计原则">软件设计原则</h2><h3 id="单一职责原则srp">单一职责原则SRP</h3><p>单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分</p><p>降低类的复杂度、提供类的可读性、提高系统的可维护性</p><h3 id="开闭原则ocp">开闭原则OCP</h3><p>对扩展开放，对修改关闭。实现一个热插拔的效果，使用接口和抽象类</p><p><img src="./截屏2024-12-19 16.09.29.png" alt="截屏2024-12-19 16.09.29" style="zoom:67%;" /></p><p>注意图中右上方是依赖关系</p><p><font color = "blue">代码见package principles.OCP;</font></p><h3 id="里氏代换原则lsp">里氏代换原则LSP</h3><p><strong>子类必须能够替换其基类，而不影响程序的正确性</strong>。</p><p><strong><em>如果一个方法能够接受一个基类作为参数，那么它应该也能接受基类的子类对象，而不会导致行为异常</em></strong></p><p>子类可以扩展父类的功能，但不能改变父类原有的功能（比如重写）</p><p>重写会使整个继承体系的可复用性比较差，特别是运用多态比较频繁时</p><p>反例如下：</p><p><img src="./截屏2024-12-19 17.04.50.png" alt="截屏2024-12-19 17.04.50" style="zoom:67%;" /></p><p><font color = "blue">代码见package principles.LSP.before;</font></p><p><strong>修正</strong></p><p><img src="./截屏2024-12-19 17.30.07.png" alt="截屏2024-12-19 17.30.07" style="zoom:67%;" /></p><p><font color = "red">注意右侧两个应该是依赖关系（虚线）</font></p><p><font color = "blue">代码见package principles.LSP.after;</font></p><h3 id="依赖倒转原则dip">依赖倒转原则DIP</h3><p>高层模块不应该依赖底层模块，两者都应该依赖其抽象。要求对抽象进行编程，不要对实现进行编程</p><p><img src="./截屏2024-12-19 17.48.48.png" alt="截屏2024-12-19 17.48.48" style="zoom:67%;" /></p><p>A类是高层模块，而B类是底层模块</p><p>反例</p><p><img src="./截屏2024-12-19 17.51.53.png" alt="截屏2024-12-19 17.51.53" style="zoom:67%;" /></p><p><font color = "blue">代码见package principles.DIP.before;</font></p><p>这样的问题是组装的电脑cpu只能是intel的，内存条只能是金士顿的</p><p><strong>修正</strong></p><p><img src="./截屏2024-12-19 18.23.04.png" alt="截屏2024-12-19 18.23.04" style="zoom:67%;" /></p><p><font color = "blue">代码见package principles.DIP.after;</font></p><h3 id="接口隔离原则isp">接口隔离原则ISP</h3><p>客户端不应该被迫依赖于它不使用的方法，一个类对另一个类的依赖应该建立在最小的接口上</p><p><img src="./截屏2024-12-19 21.24.36.png" alt="截屏2024-12-19 21.24.36" style="zoom:67%;" /></p><p><img src="./截屏2024-12-19 21.26.52.png" alt="截屏2024-12-19 21.26.52" style="zoom:67%;" /></p><p><font color = "blue">代码见package principles.ISP;</font></p><h3 id="迪米特法则law-of-demeter">迪米特法则（Law of Demeter）</h3><p>最少知识原则，如果两个软件实体无需直接连接，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。每个模块都要和它关系最亲密的模块打交道</p><p><img src="./截屏2024-12-19 21.36.27.png" alt="截屏2024-12-19 21.36.27" style="zoom:67%;" /></p><p>迪米特法则中的“朋友”是指：当前对象本身，当前对象的成员对象，当前对象所创建的对象，当前对象的方法参数</p><p><img src="./截屏2024-12-19 21.40.08.png" alt="截屏2024-12-19 21.40.08" style="zoom:67%;" /></p><p><font color = "blue">代码见package principles.demeter;</font></p><h3 id="合成复用原则crp">合成复用原则CRP</h3><p>尽量使用组合或者聚合等关联关系来实现，其次才考虑使用继承来实现</p><p>直接继承的缺点：</p><ol type="1"><li>父类对子类是透明的，“白箱”复用</li><li>子类和父类的耦合性高</li><li>限制了复用的灵活性</li></ol><p>继承复用如下图</p><p><img src="./截屏2024-12-19 21.55.42.png" alt="截屏2024-12-19 21.55.42" style="zoom:67%;" /></p><p>聚合复用如下图</p><p><img src="./截屏2024-12-19 21.56.13.png" alt="截屏2024-12-19 21.56.13" style="zoom:67%;" /></p><p>如果还需要增加光能汽车类，就不再需要定义红色或者白色的子类</p><h2 id="创建者模式">创建者模式</h2><p>将对象的创建和使用分离，降低系统的耦合度，使用者不需要关注对象的创建细节</p><h3 id="单例设计模式">单例设计模式</h3><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一对象的方式，可以直接访问，不需要实例化该类的对象</p><p><strong>饿汉式</strong>：类加载就会导致该单实例对象被创建</p><p>对象的创建随着类的加载而创建，所以存在内存浪费问题</p><p><strong>懒汉式</strong>：类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建</p><p>双重检查锁模式、静态内部类方式（JVM在加载外部类的过程中，是不会加载静态内部类的，只有内部类的属性/方法被调用时才会被加载）、枚举类（利用JAVA的底层机制）</p><p>单例模式可能<strong>存在的问题</strong>：</p><ol type="1"><li>序列化和反序列化可能破环单例模式（先读取一个对象写入到文件，然后通过读文件的方式来获取到新的对象，因为每次获取到的都是该文件中的对象的拷贝，所以每次获取到（读文件）的对象内存地址都是不一样的）</li><li>反射破环单例模式（获取Singleton的字节码对象、获取无参构造方法对象、取消访问检查、创建Singleton对象）</li></ol><p>对应的<strong>解决方法</strong>：</p><ol type="1"><li><p>在Singleton类中添加<code>readResolve()</code>方法，在反序列化时被反射调用，如果定义了这个方法，就返回这个方法的值</p><p>底层实现如下图</p><p><img src="./截屏2024-12-20 16.17.03.png" alt="截屏2024-12-20 16.17.03" style="zoom:50%;" /></p></li><li><p>在类中添加一个boolean属性来判断是否是第一次创建对象，如果不是，则抛出异常</p></li></ol><p><font color = "blue">代码见package patterns.singleton; 其中IoDHSingleton.java中写了关于解决两个可能存在的问题的代码，但是没有main测试</font></p><blockquote><p>在JDK中，<code>Runtime.java</code>类就是饿汉式单例设计模式</p></blockquote><h3 id="工厂模式">工厂模式</h3><p>反例：</p><p><img src="./截屏2024-12-20 17.43.40.png" alt="截屏2024-12-20 17.43.40" style="zoom:67%;" /></p><p>背景：如果创建对象的时候直接new该对象，就会对该对象耦合严重，加入我们需要更换对象，所有new对象的地方都需要修改一遍，这显然违背了软件设计的开闭原则</p><p>工厂模式：如果需要更换对象，直接在工厂里更换该对象即可，达到了与该对象解耦的目的，工厂模式的最大优点是<strong>解耦</strong></p><h4 id="简单工厂模式">简单工厂模式</h4><p>分为抽象产品，具体产品，具体工厂</p><p><img src="./截屏2024-12-20 17.56.33.png" alt="截屏2024-12-20 17.56.33" style="zoom:67%;" /></p><p>解除咖啡店和具体产品对象的依赖，但是又产生的新的耦合</p><p>所以<strong>优点</strong>是把对象的创建和业务逻辑（点咖啡）分开，这样以后就避免了修改客户端代码，如果要实现新的产品直接修改工厂类；<strong>缺点</strong>是还是要修改工厂类，<strong>违背了开闭原则</strong></p><p><font color = "blue">代码见package patterns.factory.simpleFactory;（例子不一样）</font></p><h4 id="工厂方法模式">工厂方法模式</h4><p><strong>完全遵循开闭原则</strong>，<font color = "green">具体工厂创建具体产品</font></p><p>分为抽象产品，具体产品，抽象工厂（提供了创建产品的接口），具体工厂（实现抽象工厂中的抽象方法）</p><p><img src="./截屏2024-12-20 18.13.17.png" alt="截屏2024-12-20 18.13.17" style="zoom:67%;" /></p><p><font color = "red">上图左上部分应该是虚线三角（implements）</font></p><p>如果需要新增咖啡品种（产品类），那么需要新增对应品种的工厂（工厂类），符合开闭原则的对扩展开放，对修改关闭。但这也增加了系统的复杂度</p><p><font color = "blue">代码见package patterns.factory.factoryMethod;（例子不一样）</font></p><h4 id="抽象工厂模式">抽象工厂模式</h4><p>区别产品族和产品等级</p><p><img src="./截屏2024-12-20 18.30.30.png" alt="截屏2024-12-20 18.30.30" style="zoom:67%;" /></p><p>一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无需指定所要产品的具体类就能得到同族的不同等级的产品的模式结构</p><p><img src="./截屏2024-12-20 18.52.53.png" alt="截屏2024-12-20 18.52.53" style="zoom:67%;" /></p><p>缺点：当产品组需要增加一个产品时，所有的工厂类都需要进行修改，<strong>不满足开闭原则</strong></p><p>使用场景：每次只使用某一族的产品</p><p><font color = "blue">代码见package patterns.factory.abstractFactory;（例子不一样）</font></p><p>扩展：<strong>简单工厂+配置文件</strong>解除耦合</p><p>在工厂类中加载配置文件中的全类名，并创建对象进行存储，客户端如果需要对象，直接进行获取即可（构建一个map来存储name和Object，通过名称来获取对象）</p><p><img src="./截屏2024-12-20 19.14.22.png" alt="截屏2024-12-20 19.14.22" style="zoom:67%;" /></p><p>如需要新增咖啡品种，只需要修改配置文件就行</p><blockquote><p>在JDK中，Collection.iterator方法运用到了工厂模式</p></blockquote><p><img src="./截屏2024-12-20 19.30.23.png" alt="截屏2024-12-20 19.30.23" style="zoom:67%;" /></p><h3 id="原型模式">原型模式</h3><p>用一个已经创建的实例作为原型，通过复制该原型对象来创建一个原型对象相同的新对象</p><p>抽象原型类、具体原型类、访问类</p><p><img src="./截屏2024-12-20 21.04.39.png" alt="截屏2024-12-20 21.04.39" style="zoom:67%;" /></p><p><strong>浅克隆（原型模式）</strong>：创建一个新对象，新对象的<strong><font color = "red">属性</font></strong>和原来对象完全相同，对于非基本类型属性，仍指向原有属性指向的对象的内存地址。只复制对象的基本数据类型和引用类型的地址。</p><p><strong>深克隆</strong>：创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象的地址</p><p><img src="./截屏2024-12-20 21.16.19.png" alt="截屏2024-12-20 21.16.19" style="zoom:67%;" /></p><p>适用于对象的创建非常复杂，使用原型快速创建对象，性能和安全要求高</p><p>使用<strong>输出流对象</strong>来实现深克隆，先写对象到文件中，再把文件中的对象读取到新在对象中（克隆）</p><p><font color = "blue">代码文件见package patterns.prototype; （和黑马例子不同）</font></p><h3 id="建造者模式">建造者模式</h3><p>将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示（电脑装配）</p><p>分离了部件的构造（Builder负责）和装配（Director负责），从而可以构造出复杂的对象。实现了构建和装配的解耦。不同的构建器，相同的装配，可以做出不同的对象；相同的构建器，不同的装配顺序也可以做出不同的对象</p><p>分为抽象建造者类、具体建造者类、产品类、指挥者类</p><p><img src="./截屏2024-12-22 17.41.07.png" alt="截屏2024-12-22 17.41.07" style="zoom:67%;" /></p><p>具体自行车例子：</p><p><img src="./截屏2024-12-22 17.43.41.png" alt="截屏2024-12-22 17.43.41" style="zoom:67%;" /></p><p>建造者模式的封装性很好；客服端不必知道内部细节，将产品本身与产品的创建过程解耦；将复杂的产品的创建步骤分解在不同的方法中；容易进行扩展，如果有新的需求，通过实现一个新的建造者类就可以完成</p><p>但是只能生产类似的产品</p><p>模式拓展：</p><p>在产品内部创建一个Builder静态内部类，在内部类中，每次build具体组件的时候返回的都是自身，从而实现链式编程，最后通过一个build方法返回产品</p><figure><img src="./截屏2024-12-22%2018.18.59.png" alt="截屏2024-12-22 18.18.59" /><figcaption aria-hidden="true">截屏2024-12-22 18.18.59</figcaption></figure><p><font color = "blue">具体代码见package patterns.builder; （和黑马不同）</font></p><blockquote><p>区别：工厂方法模式注重的是整体对象的创建方式，建造者模式注重的是部件构建的过程</p></blockquote><h2 id="结构型模式">结构型模式</h2><p>描述如何将类或对象按某种布局组成更大的结构。它分为<strong>类结构型模式</strong>和<strong>对象结构型模式</strong>，前者采用继承机制来组织接口和类，后者采用组合或聚合来组合对象</p><h3 id="代理模式">代理模式</h3><p>给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象的中介</p><p>按照代理类生成时机不同又分为静态代理和动态代理。静态代理代理类在编译期就生成，而动态代理代理类则是在java运行时动态生成</p><p>分为抽象主题类（真实主题和代理对象实现的业务方法）、真实主题类、代理类</p><p><img src="./截屏2024-12-22 18.49.27.png" alt="截屏2024-12-22 18.49.27" style="zoom:67%;" /></p><p><font color = "blue">具体代码见package patterns.proxy; （和黑马不同）</font></p><p><strong>JDK动态代理</strong></p><p>Java提供了一个动态代理类Proxy，它提供了一个创建代理对象的静态方法（newProxyInstance方法）来获取代理对象</p><p><img src="./截屏2024-12-22 19.12.55.png" alt="截屏2024-12-22 19.12.55" style="zoom:67%;" /></p><p>执行流程如下：</p><ul><li>在测试类中通过代理对象调用sell()方法</li><li>根据多态的特性，执行的是代理类(系统内存中的$Proxy0)中的sell()方法</li><li>代理类(系统内存中的$Proxy0)中的sell()方法又调用了InvocationHandler接口的子实现类对象的invoke方法</li><li>invoke方法通过反射执行了真实对象所属类(TrainStation)中的Sell()方法</li></ul><p><strong>CGLIB动态代理（略）</strong></p><p>代理模式的<strong>优点</strong></p><ul><li>中介作用和保护目标对象作用</li><li>扩展目标对象的功能</li><li>客户端与目标对象分离，降低了系统的耦合度</li></ul><h3 id="适配器模式">适配器模式</h3><p>将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作，有类<strong>适配器模式</strong>和<strong>对象适配器模式</strong></p><p>分为目标接口（中式插头）、适配者类（欧标插头）、适配器类（转换插头）</p><p><strong>类适配器模式</strong></p><p>定义一个适配器类来实现当前系统的业务接口，同时有继承现有组件库中已经存在的组件</p><p><img src="./截屏2024-12-23 14.00.30.png" alt="截屏2024-12-23 14.00.30" style="zoom:67%;" /></p><p>注意适配器类实现目标接口，继承适配者类</p><p>类适配器模式<strong>违背了合成复用模式</strong></p><p><strong>对象适配器模式</strong></p><p>将现有组件库中已经实现的组件引入适配器类中，该类同时实现当前系统的业务接口</p><p><img src="./截屏2024-12-23 14.15.26.png" alt="截屏2024-12-23 14.15.26" style="zoom:67%;" /></p><p>也就是把TFCard作为适配器类中的一个成员，适配器类中的构造函数的参数是TFCard</p><blockquote><p>在JDK中，StreamDecoder作为适配器完成了InputStreamReader把InputStream字节流转换为Reader字符流</p></blockquote><p><img src="./截屏2024-12-23 14.30.47.png" alt="截屏2024-12-23 14.30.47" style="zoom:67%;" /></p><p><font color = "blue">代码见package patterns.adapter（与黑马不同）</font></p><h3 id="装饰者模式">装饰者模式</h3><p>在不改变现有对象的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式</p><p>分为抽象构件（小吃）、具体构件（炒饭、炒面）、抽象装饰、具体装饰</p><p><img src="./截屏2024-12-23 16.18.47.png" alt="截屏2024-12-23 16.18.47" style="zoom:67%;" /></p><p><font color = "red">注意聚合画反了，新增一条Garnish继承Fastfood的线</font></p><p>可以带来比继承更加灵活的扩展功能，使用更加方便，完美<strong>遵循开闭原则</strong>。</p><p>装饰者类和被装饰者类可以独立发展，不会相互耦合，防止类爆炸</p><blockquote><p>在JDK中，BufferedWriter使用装饰者模式对Writer子实现类进行了增强(增加了装饰)，添加了缓冲区</p></blockquote><p><img src="./截屏2024-12-23 16.34.18.png" alt="截屏2024-12-23 16.34.18" style="zoom:67%;" /></p><p>代理和装饰者的区别：</p><p>装饰者是由外界传递进来（在类中只是声明），可以通过构造方法传递</p><p>静态代理是在代理类的内部创建（声明并创建），以此来隐藏目标对象</p><p><font color = "blue">代码见package patterns.decorator;（与黑马不同）</font></p><h3 id="桥接模式">桥接模式</h3><p>将抽象与实现分离，使它们可以独立的变化。它是组合关系代理继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度</p><p>分为抽象化角色、扩展抽象化角色、实现化角色、具体实现化角色</p><p><img src="./截屏2024-12-23 17.21.17.png" alt="截屏2024-12-23 17.21.17" style="zoom:67%;" /></p><p>抽象化角色聚合了实现化角色，体现出了<strong>两个维度</strong>之间的关系，<font color = "red">关键是聚合部分注入接口实现类对象</font></p><p>提高了系统的可扩展性，在两个变化维度中任意扩展一个维度，不需要修改原系统，<strong>满足开闭原则</strong></p><p><font color = "blue">代码见package patterns.bridge;（与黑马不同）</font></p><h3 id="外观模式">外观模式</h3><p>为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。外部应用程序不用关心内部子系统的具体的细节</p><p>是<strong>“迪米特法则”</strong>的典型应用</p><p>分为外观角色、子系统角色</p><p><img src="./截屏2024-12-23 17.58.20.png" alt="截屏2024-12-23 17.58.20" style="zoom:67%;" /></p><p>降低了子系统和客户端之间的耦合度，使得子系统的变化不会影响客户端</p><p>对客户屏蔽了子系统组件，使子系统用起来更加简单</p><p><strong>不符合开闭原则</strong></p><blockquote><p>tomcat中使用RequestFacade类定义私有成员变量Request，并且方法的实现调用Request的实现。然后，将RequestFacade上转为servletRequest</p></blockquote><p><img src="./截屏2024-12-23 18.10.44.png" alt="截屏2024-12-23 18.10.44" style="zoom:67%;" /></p><p><font color = "blue">代码见package patterns.facade;（与黑马不同）</font></p><h3 id="组合模式">组合模式</h3><p>又名部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据<strong>树形结构</strong>来组合对象，用来表示<strong>部分以及整体层次</strong>。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构</p><p><strong>满足开闭原则</strong></p><p><img src="./截屏2024-12-23 18.21.48.png" alt="截屏2024-12-23 18.21.48" style="zoom:67%;" /></p><p>分为抽象根节点（最上方的文件夹，公共抽象类）、树枝节点（二级或三级文件夹）、叶子节点（文件）</p><p><img src="./截屏2024-12-23 18.28.56.png" alt="截屏2024-12-23 18.28.56" style="zoom:67%;" /></p><p><strong>透明组合模式</strong></p><p>抽象根节点角色中声明了所有用于管理成员对象的方法，这样确保所有的构件类都有相同的接口，是组合模式的标准形式</p><p>不够安全，叶子节点调用树枝节点的相关方法在运行时期会抛异常</p><p><strong>安全组合模式</strong></p><p>在抽象根节点角色中没有声明任何用于管理成员对象的方法，而是在树枝节点中声明并实现了这些方法。</p><p>不够透明，客户端不能完全针对抽象编程，必须有区别的对待叶子和容器构件</p><p><font color = "blue">代码见package patterns.combination;（与黑马不同）</font></p><h3 id="享元模式flyweight">享元模式flyweight</h3><p>运用<strong>共享技术</strong>有效地支持大量细粒度对象的复用。它通过共享已经存在的对象来大幅度减少需要创建的对象数量，避免大量相似对象的开销，从而提高系统资源的利用率</p><p>存在内部状态（不随环境改变）和外部状态（随环境而改变）</p><p>分为抽象享元角色、具体享元角色、非享元角色（非共享的具体享元类对象，通过实例化创建）、享元工厂角色（当客户对象请求一个享元对象时，享元工厂检查系统中是否存在符合要求的享元对象，存在则提供给客户；不存在则创建新的享元对象）</p><p><img src="./截屏2024-12-23 21.12.54.png" alt="截屏2024-12-23 21.12.54" style="zoom:67%;" /></p><p>极大减少内存中相似或者相同的对象数量，节约系统资源。享元模式外部状态相对独立，且不影响内部状态</p><blockquote><p>在JDK类中，Integer类使用了享元模式。Integer默认线创建并<strong>缓存</strong> -128～127之间数的Integer对象。如果调用valueOf时超出了这个范围，就会创建一个新的Integer对象</p></blockquote><p><font color = "blue">代码见package patterns.flyweight;（与黑马不同）</font></p><h2 id="行为型模式">行为型模式</h2><p>描述程序在运行时复杂的流程控制，以描述多个类或对象之间怎样相互协作共同完成单个对象无法完成的任务</p><p>类行为型模式：采用继承机制</p><p>对象行为型模式：采用组合或者聚合在对象间分配行为</p><h3 id="模板方法模式">模板方法模式</h3><p>定义一个操作中的算法骨架（顺序），而将算法的一些步骤延迟到子类中，使得子类可以不改变算法结构的情况下重定义该算法的某些特定步骤</p><p>分为抽象类（模板方法和基本方法，基本方法又有抽象方法（取号、排队、打分）和具体方法（办理具体业务））和具体子类</p><p><img src="./截屏2024-12-23 22.17.53.png" alt="截屏2024-12-23 22.17.53" style="zoom:67%;" /></p><p>提高了代码的复用性：把相同的部分代码放在抽象的父类中，把不同的代码放在父类中并声明成抽象的，要求子类去重写</p><p><strong>符合开闭原则</strong></p><p>适用于算法的整体步骤很固定，但其中个别部分易变</p><blockquote><p>在JDK中，InputStream类使用了模版方法模式</p></blockquote><p><img src="./截屏2024-12-23 22.29.18.png" alt="截屏2024-12-23 22.29.18" style="zoom:67%;" /></p><p>反向控制：父类其实调用子类的方法</p><p><font color = "blue">代码见package patterns.template;（与黑马不同）</font></p><h3 id="策略模式">策略模式</h3><p>定义了一系列算法（如IDEA和eclipse），并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户（程序员）。属于对象行为模式，通过对算法进行封装，把使用算法的责任和算法的实现分隔开来，并委派给不同的对象对这些算法进行管理</p><p>分为抽象策略类、具体策略类和环境类（管理策略类）</p><p><img src="./截屏2024-12-23 23.45.57.png" alt="截屏2024-12-23 23.45.57" style="zoom: 67%;" /></p><p>策略类可以自由切换、增加一个新的策略只需要添加一个策略类即可，<strong>符合“开闭原则”</strong></p><p>但是客户端必须知道所有的策略类，并自行决定</p><blockquote><p>在JDK中，Comparator（抽象策略角色）中的Arrays类（环境类）中有个sort()方法用到了Comparator子实现类中的compare()方法</p></blockquote><p><font color = "blue">代码见package patterns.strategy;（与黑马不同）</font></p><h3 id="命令模式">命令模式</h3><p>将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分隔开。这样两者之间通过命令对象进行沟通，方便将命令对象进行存储、传递、调用、增加与管理</p><p>分为抽象命令类、具体命令类、实现者/接收者、调用者/请求者（持有一系列命令）</p><p><img src="./截屏2024-12-24 15.38.52.png" alt="截屏2024-12-24 15.38.52" style="zoom:67%;" /></p><p>降低系统的耦合度，使得调用者和接收者不直接交互；增加或删除命令非常方便，<strong>满足开闭原则</strong>；方便undo和redo操作</p><blockquote><p>在JDK中，Runnable是一个典型命令模式，Runnable担任命令的角色，Thread充当的是调用者</p></blockquote><p><font color = "blue">代码见package patterns.command;（与黑马不同）</font></p><h3 id="责任链模式">责任链模式</h3><p>为了避免请求发送者与多个请求处理者耦合在一起，将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，直到有对象处理它为止</p><p>分为抽象处理者角色、具体处理者角色、客户类角色</p><p><img src="./截屏2024-12-24 16.39.34.png" alt="截屏2024-12-24 16.39.34" style="zoom:67%;" /></p><p>降低了请求发送者和请求接收者的耦合度；增加了系统的可扩展性，增加了给对象指派职责的灵活性；明确各类的职责范围，<strong>符合类的单一职责原则</strong></p><blockquote><p>在javaWeb开发中，FilterChain是职责链（过滤器模式）的典型应用</p></blockquote><p><font color = "blue">代码见package patterns.chainOfResponsibility;（与黑马不同）</font></p><h3 id="状态模式">状态模式</h3><p>反例</p><p><img src="./截屏2024-12-24 20.22.15.png" alt="截屏2024-12-24 20.22.15" style="zoom:67%;" /></p><p>问题：使用了大量的switch case这样的判断；扩展性差</p><p>对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为</p><p>分为环境角色、抽象状态角色、具体状态角色</p><p><img src="./截屏2024-12-24 20.33.15.png" alt="截屏2024-12-24 20.33.15" style="zoom:67%;" /></p><p>将所有与某个状态有关的行为放到一个类中，并且可以方便的增加新的状态</p><p>但是会增加系统类和对象的个数、<strong>不满足开闭原则</strong></p><p><font color = "blue">代码见package patterns.state;（与黑马不同）</font></p><h3 id="观察者模式">观察者模式</h3><p>发布-订阅模式，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有观察者对象，使它们能够自动更新自己</p><p>分为抽象主题、具体主题（维护一个观察者列表）、抽象观察者、具体观察者</p><p><img src="./截屏2024-12-24 21.36.33.png" alt="截屏2024-12-24 21.36.33" style="zoom:67%;" /></p><p>降低了目标与观察者之间的耦合关系；可以实现广播机制</p><blockquote><p>在JDK中，通过java.util.Observable类（抽象主题类）和java.util.Observer接口（抽象观察者）实现了观察者模式</p></blockquote><p><font color = "blue">代码见package patterns.observer;（与黑马不同）</font></p><h3 id="中介者模式">中介者模式</h3><p>调停模式，定义了一个中介角色来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们的交互</p><p>分为抽象中介者角色、具体中介者角色、抽象同事类角色、具体同事类角色</p><p><img src="./截屏2024-12-24 23.21.44.png" alt="截屏2024-12-24 23.21.44" style="zoom:67%;" /></p><p><strong>星型结构</strong></p><p><font color = "blue">代码见package patterns.mediator;（与黑马不同）</font></p><h3 id="迭代器模式">迭代器模式</h3><p>提供一个对象来顺序访问聚合对象（比如集合）中的一系列数据，而不暴露聚合对象的内部表示</p><p>分为抽象聚合角色、具体聚合角色、抽象迭代器角色、具体迭代器角色</p><p><img src="./截屏2024-12-25 11.06.06.png" alt="截屏2024-12-25 11.06.06" style="zoom:67%;" /></p><p>支持以不同的方式遍历一个聚合对象，在同一个聚合对象上可以定义多种遍历方式</p><p>增加新的聚合类和迭代器类都很方便，无需修改原有代码，<strong>满足“开闭原则”</strong>的要求</p><blockquote><p>在JDK中， List是抽象聚合类、ArrayList是具体聚合类、Iterator时抽象迭代器、list.iterator()是具体迭代器（返回的是Iterator的子实现类）</p></blockquote><p><font color = "blue">代码见package patterns.iterator;（与黑马不同）</font></p><h3 id="访问者模式">访问者模式</h3><p>封装一些作用于某种数据结构中的各元素的操作，它可以在不改变这个数据结构的前提下定义作用于这些元素的新的操作</p><p>分为抽象访问者角色、具体访问者角色、抽象元素角色、具体元素角色、对象结构角色（包含元素角色）</p><p><img src="./截屏2024-12-25 12.42.55.png" alt="截屏2024-12-25 12.42.55" style="zoom:67%;" /></p><p>扩展性好，复用性好、分离无关行为</p><p>但是<strong>违背</strong>了<strong>开闭原则</strong>和<strong>依赖倒转原则</strong></p><p><font color = "blue">代码见package patterns.visitor;（与黑马不同）</font></p><p>扩展（双分派技术）（略）</p><h3 id="备忘录模式">备忘录模式</h3><p>快照模式，在不破环封装性的前提下，捕获一个对象的内部状态的，并在该对象之外保存这个状态，以便以后当需要时能将该对象恢复到原先保存的状态</p><p>分为发起人角色（创建和恢复备忘录）、备忘录角色、管理者角色（保存和获取备忘录）</p><p>备忘录有两个等效的接口：</p><p><strong>窄接口</strong>：只允许<strong>管理者</strong>把备忘录对象传给其他的对象</p><p><strong>宽接口</strong>：允许它读取所有的数据，以便根据这些数据恢复这个<strong>发起人</strong>对象的内部状态</p><ul><li>“白箱“备忘录模式</li></ul><p>备忘录角色对任何对象都提供一个接口，即宽接口，备忘录角色对内部所存储的状态对所有对象公开</p><p><img src="./截屏2024-12-25 13.49.31.png" alt="截屏2024-12-25 13.49.31" style="zoom:67%;" /></p><ul><li>“黑箱”备忘录模式</li></ul><p>备忘录角色对发起人提供一个宽接口，而为其他对象提供一个窄接口。在Java语言中，实现双重接口的办法就是<strong>将备忘录类设计成发起人类的内部成员类</strong></p><p><img src="./截屏2024-12-25 14.01.54.png" alt="截屏2024-12-25 14.01.54" style="zoom:67%;" /></p><p>提供了一种可以恢复状态的机制；实现了内部状态的封装；发起人不需要管理和保存其内部状态的各个备份，符合<strong>单一职责原则</strong></p><p><font color = "blue">代码见package patterns.memento;（白箱）（与黑马不同）</font></p><h3 id="解释器模式">解释器模式</h3><p>给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子</p><p>分为抽象表达式角色（规范）、终结符表达式角色、非终结符表达式角色、环境角色、客户端</p><p><img src="./截屏2024-12-25 14.58.10.png" alt="截屏2024-12-25 14.58.10" style="zoom:67%;" /></p><p>易于改变和扩展文法，增加新的解释表达式比较方便，<strong>符合开闭原则</strong></p><p><font color = "blue">代码见package patterns.interpreter;（与黑马不同）</font></p><p>黑马后面Spring框架部分此处省略</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vscode中Cpp配置和调试方法</title>
      <link href="/2024/12/01/vscode%E4%B8%ADCpp%E9%85%8D%E7%BD%AE%E5%92%8C%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/"/>
      <url>/2024/12/01/vscode%E4%B8%ADCpp%E9%85%8D%E7%BD%AE%E5%92%8C%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>这个话题网上有很多说法，csdn上的教程也很多，但是我看了大多数的教程，大部分是win，且是老版本的vscode，每个人的情况不同，配置的信息不同，我的这个教程也不一定能够包含所有的情况，所以还是以参考为主</p><p>首先就是扩展插件部分安装C/C++插件，Chinese simplify等等插件，这两个就够用，可以根据需求装C/C++ Extention和code runner等</p><h1 id="mac版">MAC版</h1><h2 id="一c_cpp_properties.json">一、c_cpp_properties.json</h2><p>command + shift + p或者左下角设置-&gt;命令面板，输入C/C++，选择Edit Configuration(UI)，</p><p><img src="./image-20241201175307715.png" alt="image-20241201175307715" style="zoom:50%;" /></p><p><img src="./image-20241201175607677.png" alt="image-20241201175607677" style="zoom:50%;" /></p><p>在这幅图片中要确保<code>编译器路径</code>和<code>IntelliSense模式</code>这两个配置是符合你的电脑要求的，编译器路径部分g++是C++的编译器，gcc是c语言的编译器，IntelliSense默认就行。</p><p>在设置完这些后，会出现一个<code>c_cpp_properties.json</code>文件，是你刚刚配置的相关信息，具体代码如下 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Mac&quot;,</span><br><span class="line">            &quot;includePath&quot;: [</span><br><span class="line">                &quot;$&#123;workspaceFolder&#125;/**&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;defines&quot;: [],</span><br><span class="line">            &quot;macFrameworkPath&quot;: [</span><br><span class="line">           &quot;/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;cStandard&quot;: &quot;c17&quot;,</span><br><span class="line">            &quot;cppStandard&quot;: &quot;c++17&quot;,</span><br><span class="line">            &quot;intelliSenseMode&quot;: &quot;macos-clang-arm64&quot;,</span><br><span class="line">            &quot;compilerPath&quot;: &quot;/usr/bin/g++&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;version&quot;: 4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到这里的编译器是xcode自带的g++。</p><h2 id="二launch.json">二、launch.json</h2><p>左上角点击运行-&gt;添加配置...，这时会出现一个launch.json文件，点击这个文件右下角的添加配置，选择<code>&#123;&#125;C/C++: (lldb)启动</code>（这里和win不同，mac只有lldb启动）</p><p><img src="./image-20241201180107718.png" alt="image-20241201180107718" style="zoom:50%;" /></p><p><img src="./image-20241201180251558.png" alt="image-20241201180251558" style="zoom:50%;" /></p><p><img src="./image-20241201180420945.png" alt="image-20241201180420945" style="zoom:50%;" /></p><p>一开始的<code>launch.json</code>只有上图这个最基本的，建议修改为以下内容 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;(lldb) 启动——生成调试文件&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;,  // 当前文件的输出路径</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;stopAtEntry&quot;: false,</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot;,</span><br><span class="line">            &quot;environment&quot;: [],</span><br><span class="line">            &quot;externalConsole&quot;: false,</span><br><span class="line">            &quot;MIMode&quot;: &quot;lldb&quot;,</span><br><span class="line">            &quot;setupCommands&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;description&quot;: &quot;为 gdb 启用整齐打印&quot;,</span><br><span class="line">                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,</span><br><span class="line">                    &quot;ignoreFailures&quot;: true</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;C/C++: g++ 生成活动文件&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有几点需要注意：</p><ol type="1"><li><code>name</code>是右侧调试列出现的名称，如下图</li></ol><p><img src="./image-20241201180639449.png" alt="image-20241201180639449" style="zoom:50%;" /></p><ol start="2" type="1"><li><code>program</code>是当前文件的输出路径，<code>$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;</code>表示在当前文件的目录下生成一个名字和cpp文件名字一样的可执行文件（如test.cpp生成test），注意这是mac版，不需要加后缀名。</li><li><code>stopAtEntry</code>，这一项控制是否在入口处暂停，默认false不暂停</li><li><code>externalConsole</code>，这一项控制是否启动外部控制台（独立的黑框）运行程序，默认false表示在集成终端中运行</li><li><code>preLaunchTask</code>，调试前的预执行任务，这里的值是tasks.json文件中对应的编译任务</li><li><code>cwd</code>，<code>cwd</code> 是 <strong>Current Working Directory</strong>（当前工作目录）的缩写。它指定了调试时程序的工作目录，也就是程序运行时查找文件和相对路径的起始目录。只有这个配置对了，类似<code>$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;</code>这种才不会出现问题</li></ol><p>其他的默认就好</p><h2 id="三tasks.json">三、tasks.json</h2><p>左上角点击终端-&gt;配置任务...，这里提示用模版创建，这里由于我没有现成的任务模版，只能自己新建一个tasks.json</p><p><img src="./image-20241201181237025.png" alt="image-20241201181237025" style="zoom:50%;" /></p><p><img src="./image-20241201181556832.png" alt="image-20241201181556832" style="zoom:50%;" /></p><p><img src="./image-20241201181617332.png" alt="image-20241201181617332" style="zoom:50%;" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;label&quot;: &quot;C/C++: g++ 生成活动文件&quot;,  // 编译任务的名称，跟上面preLaunchTask的值对应</span><br><span class="line">            &quot;command&quot;: &quot;/usr/bin/g++&quot;,  // g++路径</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;-g&quot;,</span><br><span class="line">                &quot;$&#123;file&#125;&quot;,</span><br><span class="line">                &quot;-o&quot;,</span><br><span class="line">                &quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot; </span><br><span class="line">            ],</span><br><span class="line">            &quot;options&quot;: &#123;</span><br><span class="line">                &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;problemMatcher&quot;: [</span><br><span class="line">                &quot;$gcc&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;group&quot;: &#123;</span><br><span class="line">                &quot;kind&quot;: &quot;build&quot;,</span><br><span class="line">                &quot;isDefault&quot;: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意一下几点：</p><ol type="1"><li><code>type</code>，这里是shell表明我是在终端运行的（也就是zsh）</li><li><code>label</code>，编译任务的名称，<font color = "red">跟上面preLaunchTask的值一致</font></li><li><code>command</code>，这里是系统的c++编译器路径</li><li><code>args</code>，<code>$&#123;file&#125;</code>表示在当前文件下运行，即要<font color = "red">点击到对应运行的cpp文件下</font>，点击开始绿色箭头的<code>开始与调试</code>. <code>$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;</code>表示<font color = "red">生成的文件的路径和名称，注意这个要和<code>launch.json</code>中的<code>program</code>一致</font></li><li><code>cwd</code>，重要性见launch.json所述。</li></ol><p>其他默认就好</p><h2 id="四运行和调试">四、运行和调试</h2><p>配置好上面三个文件后（在.vscode文件夹里，默认隐藏，在访达中command + shift + .即可显示，在vscode中海会自动创建），在右侧选择运行和调试，<font color = "red">选择到对应的要编译运行的cpp文件下</font>，注意如果有多个cpp文件需要同时编译，修改<code>tasks.json</code>中的<code>args</code>即可。点击运行与调试旁边的“绿色箭头”，就可以成功运行。</p><p><img src="./image-20241201183536753.png" alt="image-20241201183536753" style="zoom:50%;" /></p><p>结果如下 <img src="./image-20241201183753942.png" alt="image-20241201183753942" style="zoom:50%;" /></p><p>如果不习惯调试控制台输出，把<code>externalConsole</code>改为<code>true</code>即可.</p><h2 id="五解决终端将被任务重用按任意键关闭的问题">五、解决终端将被任务重用，按任意键关闭的问题</h2><p>在上面的叙述中，如果每一步都按照我的来，最终会在集成终端中出现“终端将被任务重用，按任意键关闭”的字样。这个还好，如果只是简单的输出程序，还可以在调试控制台中看到，但是如果是包含输入相关的程序（如cin），那么程序会被彻底阻塞。你无法在调试控制台输入，更没法在集成终端中输入（因为集成终端只会显示终端任务将被重用、或者生成已完成等等字样，按任意键就会关闭）。</p><p>这时你或许还可以把<code>launch.json</code>中的externalConsole改成true，但是这样会使你在全屏显示的情况下，每次都要跳回到桌面显示终端得到结果，而不能简单的在集成终端中显示。</p><p>解决方案如下： 在vscode插件中下载一个CodeLLDB扩展，如下图所示</p><p><img src="./image-20241202142825996.png" alt="image-20241202142825996" style="zoom:50%;" /></p><p>通过访问其github官网https://github.com/vadimcn/codelldb/blob/v1.11.1/MANUAL.md</p><p>有这么一段 Starting a New Debug Session</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;Launch&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;lldb&quot;,</span><br><span class="line">    &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">    &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/&lt;executable file&gt;&quot;,</span><br><span class="line">    &quot;args&quot;: [&quot;-arg1&quot;, &quot;-arg2&quot;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时，你只需要把<code>&lt;executable file&gt;</code>部分换成你的输出文件即可，如<code>$&#123;fileBasenameNoExtension&#125;</code>，参数部分不需要，cwd可以是<code>$&#123;workspaceFolder&#125;</code>，也可以是<code>$&#123;fileDirname&#125;</code>，我的具体配置如下（将之前的注释掉即可） <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;lldb&quot;</span>,</span><br><span class="line">            <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Launch&quot;</span>,</span><br><span class="line">            <span class="string">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;args&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;preLaunchTask&quot;</span>: <span class="string">&quot;C/C++: g++ 生成活动文件&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     &quot;name&quot;: &quot;(lldb) 启动——生成调试文件&quot;,</span></span><br><span class="line">        <span class="comment">//     &quot;type&quot;: &quot;cppdbg&quot;,</span></span><br><span class="line">        <span class="comment">//     &quot;request&quot;: &quot;launch&quot;,</span></span><br><span class="line">        <span class="comment">//     &quot;program&quot;: &quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;,  </span></span><br><span class="line">        <span class="comment">//     &quot;args&quot;: [],</span></span><br><span class="line">        <span class="comment">//     &quot;stopAtEntry&quot;: false,</span></span><br><span class="line">        <span class="comment">//     &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot;,</span></span><br><span class="line">        <span class="comment">//     &quot;environment&quot;: [],</span></span><br><span class="line">        <span class="comment">//     &quot;externalConsole&quot;: false,</span></span><br><span class="line">        <span class="comment">//     &quot;MIMode&quot;: &quot;lldb&quot;,</span></span><br><span class="line">        <span class="comment">//     &quot;setupCommands&quot;: [</span></span><br><span class="line">        <span class="comment">//         &#123;</span></span><br><span class="line">        <span class="comment">//             &quot;description&quot;: &quot;为 gdb 启用整齐打印&quot;,</span></span><br><span class="line">        <span class="comment">//             &quot;text&quot;: &quot;-enable-pretty-printing&quot;,</span></span><br><span class="line">        <span class="comment">//             &quot;ignoreFailures&quot;: true</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     ],</span></span><br><span class="line">        <span class="comment">//     &quot;preLaunchTask&quot;: &quot;C/C++: g++ 生成活动文件&quot;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意，上面这一部分代码也可以通过<code>launch.json</code>文件右下角的<code>添加配置...</code>中选择<code>&#123;&#125;CodeLLDB : launch</code>来直接配置</p><p>另外，这里<font color = "red">要自己加上<code>preLaunchTask</code></font>，这样就能确保在调试之前能够先执行<code>tasks.json</code>中的任务（也就是编译生成可执行文件），紧接着则集成终端中调试即可，结果如下 <img src="./image-20241202143555768.png" alt="image-20241202143555768" /></p><p>现在，你可以尽情用mac来写c++代码了！</p><p>补充一个有意思的问题：这篇文章原来的题目是：<code>vscode中C++配置和调试方法</code>，我在<code>hexo g</code>的时候会报错如下 <img src="./image-20241202151915830.png" alt="image-20241202151915830" style="zoom:50%;" /></p><p>可能是<code>node_modules</code>中的<code>hexo-asset-img</code>这个包的<code>index.js</code>没有正确处理标题中含有<code>++</code>这种的情况，吧<code>++</code>改成<code>pp</code>就能够正常<code>hexo g</code>了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>elm项目新增电子钱包</title>
      <link href="/2024/10/21/elm%E9%A1%B9%E7%9B%AE%E6%96%B0%E5%A2%9E%E7%94%B5%E5%AD%90%E9%92%B1%E5%8C%85/"/>
      <url>/2024/10/21/elm%E9%A1%B9%E7%9B%AE%E6%96%B0%E5%A2%9E%E7%94%B5%E5%AD%90%E9%92%B1%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="饿了吧项目电子钱包实验报告">“饿了吧“项目电子钱包实验报告</h1><h2 id="一需求分析增加电子钱包功能">一、<strong>需求分析：增加电子钱包功能</strong></h2><h3 id="背景"><strong>1. 背景</strong></h3><p>饿了吧项目原先没有电子钱包功能，支付都是通过银行卡或第三方支付（如支付宝、微信支付）完成。这种方式的局限性在于系统无法实现充值返点、退款暂存、透支、收款等功能，因此增加一个电子钱包功能变得必要。大部分电商平台都有钱包功能用于管理平台内的资金，提高用户黏性，方便资金流动。此次新增电子钱包功能以提升系统的灵活性和功能的丰富度。</p><h3 id="功能需求"><strong>2. 功能需求</strong></h3><ul><li><strong>充值和提现功能</strong>：<ul><li>用户可以向钱包充值和从钱包中提现。</li><li>为鼓励用户将资金存入平台，充值时应有一定奖励。例如，充值满1000元赠送100元。提现时，充值时所得的奖励部分需扣除，以防止利用奖励规则的“薅羊毛”行为。</li><li>奖励和手续费规则应支持动态设置，以应对不同的市场情况。</li></ul></li><li><strong>支付和转账功能</strong>：<ul><li>用户可以使用钱包进行支付和向其他钱包转账。</li><li>支付过程应保证交易的原子性，确保支付成功后资金准确从付款方钱包转入收款方钱包，避免因网络或系统问题造成资金丢失或不一致。</li></ul></li><li><strong>余额查询和交易流水查询功能</strong>：<ul><li>用户可以随时查询电子钱包的当前余额。</li><li>用户可以查看电子钱包的所有交易流水，了解资金的流动情况。</li></ul></li><li><strong>冻结和透支功能</strong>：<ul><li><strong>冻结功能</strong>：买家支付后，货款进入卖家账户但处于冻结状态，待买家确认收货后方可解冻，以保障买卖双方的权益。</li><li><strong>透支功能</strong>：为VIP用户提供一定的透支额度。如果用户未在规定时间内归还透支款项，则需支付一定利息，这类似于小额贷款或支付宝花呗的功能。</li></ul></li></ul><h3 id="系统设计和划分"><strong>3. 系统设计和划分</strong></h3><ul><li><strong>虚拟钱包系统</strong>：负责管理用户在平台内的虚拟账户。所有与虚拟资金相关的功能，如充值、提现、支付、转账、冻结、透支等，均由该系统处理。</li><li><strong>三方支付系统</strong>：负责与用户的银行账户或第三方支付平台交互。当用户进行充值或提现操作时，三方支付系统与银行账户进行交互，将资金转入或转出平台内的虚拟钱包。</li></ul><p>通过这种系统的划分，可以有效解耦虚拟钱包和外部资金的交互，减少系统的耦合度，提升可维护性和安全性。虚拟钱包系统聚焦于平台内资金的管理，而三方支付系统则专注于与外部支付渠道的对接。</p><h2 id="二方案设计">二、<strong>方案设计</strong></h2><h3 id="总体设计方案">1、总体设计方案</h3><p>在“饿了吧”项目中增加电子钱包功能，旨在实现平台内的资金管理，包括充值、提现、支付、查询余额、查询交易流水等核心功能。钱包功能被拆分为虚拟钱包系统和第三方支付系统两个子系统。虚拟钱包系统主要负责用户资金的存储和管理，而第三方支付系统负责与外部银行账户或支付渠道的对接。为了更好地实现面向对象的封装和业务逻辑集中管理，本次设计采用了基于充血模型的领域驱动设计（DDD）方法，特别在虚拟钱包模块中应用了充血模型。</p><h3 id="充血模型的应用">2、充血模型的应用</h3><p>在本次方案中，虚拟钱包模块采用充血模型来管理钱包的业务逻辑和数据状态。与传统贫血模型相比，充血模型将数据与相关业务逻辑封装到同一个类中。这种设计符合面向对象编程的封装特性，能够提高代码的聚合度和内聚性，从而更好地保证业务逻辑的一致性。</p><p>具体地，在“饿了吧”项目中，<code>VirtualWallet</code>类被设计为充血模型：</p><ul><li><code>VirtualWallet</code>类不仅保存用户钱包的基本信息（如余额、冻结金额、透支额度等），还直接包含了充值、提现、转账、冻结资金、解冻资金等业务方法。</li><li>例如，在用户充值的场景中，<code>recharge</code>方法被封装在<code>VirtualWallet</code>类中，业务逻辑包括增加余额、计算奖励金额并存入奖励余额字段，这些操作都集中在领域对象中完成，而不是分散到服务层中。</li></ul><p>这种设计方式的优势在于：</p><ul><li><strong>高内聚性</strong>：数据和操作紧密结合，减少了业务逻辑分散于多个类的情况，使代码结构更加简洁。</li><li><strong>清晰的职责划分</strong>：将钱包管理的核心逻辑放在领域对象中，服务层的职责被简化为调用领域对象的方法，起到协调控制的作用，而非直接处理业务逻辑。</li><li><strong>增强可维护性</strong>：充血模型使得业务逻辑的更新集中在一个地方，减少了代码维护的难度和可能出现的错误。</li></ul><h3 id="模块设计与接口方案">3、模块设计与接口方案</h3><ol type="1"><li><strong>VirtualWallet领域模型类</strong><ul><li>封装钱包的核心数据和操作，包括余额、冻结金额、透支额度、奖励余额等字段，以及<code>recharge</code>、<code>withdraw</code>、<code>transferTo</code>、<code>freeze</code>、<code>unfreeze</code>等方法。</li><li>通过充血模型，将余额管理、奖励计算、资金冻结等逻辑放入领域对象中，减少了代码分散的情况。</li></ul></li><li><strong>数据访问层（Mapper层）</strong><ul><li>使用<code>MyBatis</code>作为ORM工具，通过注解的方式实现对数据库的访问。</li><li>例如，<code>VirtualWalletMapper</code>用于从数据库中获取钱包信息、保存或更新钱包状态，<code>TransactionLogMapper</code>用于保存和查询交易日志。</li><li>每个方法与数据库中的操作保持一致，以确保数据的完整性与一致性。</li></ul></li><li><strong>服务层（Service层）</strong><ul><li><code>VirtualWalletService</code>接口定义了钱包的主要操作，如充值、提现、转账、冻结和解冻资金等，<code>VirtualWalletServiceImpl</code>实现了具体的逻辑。</li><li>服务层的主要职责是协调领域模型对象，调用<code>VirtualWallet</code>的业务方法，处理操作的事务管理以及与数据访问层的交互。</li></ul></li><li><strong>控制器层（Controller层）</strong><ul><li><code>VirtualWalletController</code>用于暴露API接口，供前端或其他服务调用。</li><li>控制器层接收用户的请求，解析参数并调用服务层方法。控制器仅负责用户请求的处理和响应的生成，具体的业务逻辑则委托给服务层和领域模型对象处理。</li><li>例如，充值接口通过调用<code>walletService.recharge()</code>方法完成，服务层再进一步调用<code>VirtualWallet</code>的充血模型方法实现核心业务逻辑。</li></ul></li></ol><h3 id="接口实现与流程">4、接口实现与流程</h3><p>本次钱包功能中实现的主要接口包括：</p><ol type="1"><li><strong>充值接口</strong>：<ul><li>路径：<code>POST /wallet/recharge</code></li><li>参数：<code>walletId</code>、<code>amount</code>、<code>rewardRate</code></li><li>流程：控制器层调用服务层的<code>recharge</code>方法，服务层获取钱包对象并调用<code>VirtualWallet</code>的<code>recharge</code>方法更新余额和奖励。</li></ul></li><li><strong>提现接口</strong>：<ul><li>路径：<code>POST /wallet/withdraw</code></li><li>参数：<code>walletId</code>、<code>amount</code>、<code>feeRate</code></li><li>流程：调用服务层的<code>withdraw</code>方法，服务层从数据库获取钱包对象并调用<code>withdraw</code>方法处理扣款逻辑，并在完成后更新数据库。</li></ul></li><li><strong>转账接口</strong>：<ul><li>路径：<code>POST /wallet/transfer</code></li><li>参数：<code>fromWalletId</code>、<code>toWalletId</code>、<code>amount</code></li><li>流程：控制器接收参数，服务层获取两个钱包对象，通过调用<code>VirtualWallet</code>的<code>transferTo</code>方法完成资金的转移。</li></ul></li><li><strong>交易日志查询接口</strong>：<ul><li>路径：<code>GET /wallet/&#123;walletId&#125;/transactions</code></li><li>参数：<code>walletId</code></li><li>流程：服务层调用<code>TransactionLogMapper</code>查询指定钱包的所有交易日志，返回给调用方。</li></ul></li></ol><h3 id="数据库的设计">5、数据库的设计</h3><p>根据需求我们可以设计如下数据库schemas</p><div><img src="./image-20241022015106352.png" alt="image-20241022015106352" style="zoom:80%;" /><img src="./image-20241022015118504.png" alt="image-20241022015118504" style="zoom:80%;" /></div><h2 id="三代码实现">三、代码实现</h2><p>先根据数据库的设计编写出相应的sql语句，并插入几条测试数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">-- 钱包表 (wallet)</span><br><span class="line">CREATE TABLE wallet (</span><br><span class="line">    wallet_id VARCHAR(36) PRIMARY KEY,</span><br><span class="line">    user_id VARCHAR(20) UNIQUE NOT NULL,</span><br><span class="line">    balance DECIMAL(15, 2) DEFAULT 0,</span><br><span class="line">    frozen_amount DECIMAL(15, 2) DEFAULT 0,</span><br><span class="line">    overdraft_limit DECIMAL(15, 2) DEFAULT 0,</span><br><span class="line">    reward_balance DECIMAL(15, 2) DEFAULT 0,</span><br><span class="line">    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">    FOREIGN KEY (user_id) REFERENCES user(userId)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 交易流水表 (transaction_log)</span><br><span class="line">CREATE TABLE transaction_log (</span><br><span class="line">    transaction_id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    wallet_id VARCHAR(36),</span><br><span class="line">    transaction_time DATETIME DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">    amount DECIMAL(15, 2) NOT NULL,</span><br><span class="line">    transaction_type VARCHAR(20) NOT NULL,</span><br><span class="line">    from_wallet_id VARCHAR(36),</span><br><span class="line">    to_wallet_id VARCHAR(36),</span><br><span class="line">    status VARCHAR(20) NOT NULL,</span><br><span class="line">    FOREIGN KEY (wallet_id) REFERENCES wallet(wallet_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 插入测试数据到 wallet 表中</span><br><span class="line">INSERT INTO wallet (wallet_id, user_id, balance, frozen_amount, overdraft_limit, reward_balance, created_at, updated_at)</span><br><span class="line">VALUES </span><br><span class="line">(&#x27;wallet_001&#x27;, &#x27;18854553694&#x27;, 1000.00, 0.00, 500.00, 0.00, NOW(), NOW()),</span><br><span class="line">(&#x27;wallet_002&#x27;, &#x27;123&#x27;, 2000.00, 0.00, 500.00, 0.00, NOW(), NOW()),</span><br><span class="line">(&#x27;wallet_003&#x27;, &#x27;123456&#x27;, 3000.00, 0.00, 800.00, 0.00, NOW(), NOW());</span><br></pre></td></tr></table></figure><p>然后，根据需求，我们需要新增VirtualWallet类和TransactionLog类，并且在这两个类中实现各自的方法</p><h3 id="virtualwallet">VirtualWallet</h3><p>VirtualWallet类的实体属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String walletId;</span><br><span class="line"><span class="keyword">private</span> String userId;</span><br><span class="line"><span class="keyword">private</span> BigDecimal balance; <span class="comment">// 可用余额</span></span><br><span class="line">BigDecimal frozenAmount; <span class="comment">// 冻结金额</span></span><br><span class="line"><span class="keyword">private</span> BigDecimal overdraftLimit; <span class="comment">// 透支额度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> BigDecimal <span class="title function_">getFrozenAmount</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> frozenAmount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFrozenAmount</span><span class="params">(BigDecimal frozenAmount)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.frozenAmount = frozenAmount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigDecimal rewardBalance; <span class="comment">// 奖励余额</span></span><br></pre></td></tr></table></figure><p>然后写出相应的构造函数和getter和setter方法</p><p>实现<strong>充值、提现、支付和接收金额</strong>的基本操作 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 充值操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recharge</span><span class="params">(BigDecimal amount, BigDecimal rewardRate)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (amount.compareTo(BigDecimal.ZERO) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;充值金额必须大于零&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">reward</span> <span class="operator">=</span> amount.multiply(rewardRate);</span><br><span class="line">    <span class="built_in">this</span>.balance = <span class="built_in">this</span>.balance.add(amount);</span><br><span class="line">    <span class="built_in">this</span>.rewardBalance = reward;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提现操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(BigDecimal amount, BigDecimal feeRate)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">fee</span> <span class="operator">=</span> amount.multiply(feeRate);</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">totalAmount</span> <span class="operator">=</span> amount.add(fee);</span><br><span class="line">    <span class="keyword">if</span> (totalAmount.compareTo(BigDecimal.ZERO) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;提现金额必须大于零&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.balance.compareTo(totalAmount) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.balance = <span class="built_in">this</span>.balance.subtract(totalAmount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 支付操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transferTo</span><span class="params">(VirtualWallet targetWallet, BigDecimal amount)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (amount.compareTo(BigDecimal.ZERO) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;转账金额必须大于零&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.getAvailableBalance().compareTo(amount) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;可用余额不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.balance = <span class="built_in">this</span>.balance.subtract(amount);</span><br><span class="line">    targetWallet.receive(amount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现<strong>冻结资金、解冻资金</strong>等高级操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 冻结资金</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">freeze</span><span class="params">(BigDecimal amount)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (amount.compareTo(BigDecimal.ZERO) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;冻结金额必须大于零&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.balance.compareTo(amount) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;余额不足以冻结&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.frozenAmount = <span class="built_in">this</span>.frozenAmount.add(amount);</span><br><span class="line">    <span class="built_in">this</span>.balance = <span class="built_in">this</span>.balance.subtract(amount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解冻资金</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unfreeze</span><span class="params">(BigDecimal amount)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (amount.compareTo(BigDecimal.ZERO) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;解冻金额必须大于零&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印日志查看 frozenAmount 和 amount 的值</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Frozen Amount: &quot;</span> + <span class="built_in">this</span>.frozenAmount);</span><br><span class="line">    System.out.println(<span class="string">&quot;Unfreeze Amount: &quot;</span> + amount);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.frozenAmount.compareTo(amount) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;解冻金额超过冻结金额&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.frozenAmount = <span class="built_in">this</span>.frozenAmount.subtract(amount);</span><br><span class="line">    <span class="built_in">this</span>.balance = <span class="built_in">this</span>.balance.add(amount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后写出相应的Controller层、Service层和ServiceImpl层，由于篇幅原因只给出一部分</p><p>VirtualWalletController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/wallet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VirtualWalletController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VirtualWalletService walletService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 充值接口</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/recharge&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">recharge</span><span class="params">(<span class="meta">@RequestParam</span> String walletId, <span class="meta">@RequestParam</span> BigDecimal amount, <span class="meta">@RequestParam</span> BigDecimal rewardRate)</span> &#123;</span><br><span class="line">        walletService.recharge(walletId, amount, rewardRate);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;充值成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提现接口</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/withdraw&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">withdraw</span><span class="params">(<span class="meta">@RequestParam</span> String walletId, <span class="meta">@RequestParam</span> BigDecimal amount, <span class="meta">@RequestParam</span> BigDecimal feeRate)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            walletService.withdraw(walletId, amount, feeRate);</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;提现成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    .....</span><br></pre></td></tr></table></figure><p>Service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">VirtualWalletService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">recharge</span><span class="params">(String walletId, BigDecimal amount, BigDecimal rewardRate)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(String walletId, BigDecimal amount, BigDecimal feeRate)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String fromWalletId, String toWalletId, BigDecimal amount)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    .....</span><br></pre></td></tr></table></figure><p>ServiceImpl层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VirtualWalletServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">VirtualWalletService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VirtualWalletMapper walletMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TransactionLogMapper transactionLogMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recharge</span><span class="params">(String walletId, BigDecimal amount, BigDecimal rewardRate)</span> &#123;</span><br><span class="line">        <span class="type">VirtualWallet</span> <span class="variable">wallet</span> <span class="operator">=</span> walletMapper.findById(walletId);</span><br><span class="line">        wallet.recharge(amount, rewardRate);</span><br><span class="line">        walletMapper.update(wallet);</span><br><span class="line">        <span class="type">TransactionLog</span> <span class="variable">log</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransactionLog</span>(walletId, amount, <span class="string">&quot;充值&quot;</span>, <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        transactionLogMapper.save(log);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(String walletId, BigDecimal amount, BigDecimal feeRate)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">VirtualWallet</span> <span class="variable">wallet</span> <span class="operator">=</span> walletMapper.findById(walletId);</span><br><span class="line">        wallet.withdraw(amount, feeRate);</span><br><span class="line">        walletMapper.update(wallet);</span><br><span class="line">        <span class="type">TransactionLog</span> <span class="variable">log</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransactionLog</span>(walletId, amount, <span class="string">&quot;提现&quot;</span>, <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        transactionLogMapper.save(log);</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br></pre></td></tr></table></figure><p>最后完成VirtualWalletMapper层的撰写，注意，这里的实体类和数据库中的字段名不一致，应当用@Result来进行一一对应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VirtualWalletServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">VirtualWalletService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VirtualWalletMapper walletMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TransactionLogMapper transactionLogMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recharge</span><span class="params">(String walletId, BigDecimal amount, BigDecimal rewardRate)</span> &#123;</span><br><span class="line">        <span class="type">VirtualWallet</span> <span class="variable">wallet</span> <span class="operator">=</span> walletMapper.findById(walletId);</span><br><span class="line">        wallet.recharge(amount, rewardRate);</span><br><span class="line">        walletMapper.update(wallet);</span><br><span class="line">        <span class="type">TransactionLog</span> <span class="variable">log</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransactionLog</span>(walletId, amount, <span class="string">&quot;充值&quot;</span>, <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        transactionLogMapper.save(log);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(String walletId, BigDecimal amount, BigDecimal feeRate)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">VirtualWallet</span> <span class="variable">wallet</span> <span class="operator">=</span> walletMapper.findById(walletId);</span><br><span class="line">        wallet.withdraw(amount, feeRate);</span><br><span class="line">        walletMapper.update(wallet);</span><br><span class="line">        <span class="type">TransactionLog</span> <span class="variable">log</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransactionLog</span>(walletId, amount, <span class="string">&quot;提现&quot;</span>, <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        transactionLogMapper.save(log);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String fromWalletId, String toWalletId, BigDecimal amount)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">VirtualWallet</span> <span class="variable">fromWallet</span> <span class="operator">=</span> walletMapper.findById(fromWalletId);</span><br><span class="line">        <span class="type">VirtualWallet</span> <span class="variable">toWallet</span> <span class="operator">=</span> walletMapper.findById(toWalletId);</span><br><span class="line">        fromWallet.transferTo(toWallet, amount);</span><br><span class="line">        walletMapper.update(fromWallet);</span><br><span class="line">        walletMapper.update(toWallet);</span><br><span class="line">        <span class="type">TransactionLog</span> <span class="variable">log</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransactionLog</span>(fromWalletId, amount, <span class="string">&quot;转账&quot;</span>, <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        transactionLogMapper.save(log);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="transactionlog">TransactionLog</h3><p>TransactionLog实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> transactionId; <span class="comment">// 交易唯一标识</span></span><br><span class="line"><span class="keyword">private</span> String walletId;   <span class="comment">// 钱包ID</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime transactionTime; <span class="comment">// 交易时间</span></span><br><span class="line"><span class="keyword">private</span> BigDecimal amount; <span class="comment">// 交易金额</span></span><br><span class="line"><span class="keyword">private</span> String transactionType; <span class="comment">// 交易类型（充值、提现、支付等）</span></span><br><span class="line"><span class="keyword">private</span> String fromWalletId; <span class="comment">// 支付来源钱包ID（可为空）</span></span><br><span class="line"><span class="keyword">private</span> String toWalletId; <span class="comment">// 支付目标钱包ID（可为空）</span></span><br><span class="line"><span class="keyword">private</span> String status; <span class="comment">// 交易状态（成功、失败、处理中）</span></span><br></pre></td></tr></table></figure><p>然后给出相应的构造函数、getter和setter方法，注意这里需要新增一个无参构造的方法，具体原因见</p><p><a href="https://blog.csdn.net/m0_37822085/article/details/125894706">记Mybatis的坑，解决Error attempting to get column ‘name‘ from result set，Cannot determine value type from_org.springframework.dao.dataintegrityviolationexce-CSDN博客</a></p><p>然后要更新交易状态并获取交易详细信息的简化展示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新交易状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateStatus</span><span class="params">(String newStatus)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (newStatus == <span class="literal">null</span> || newStatus.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;交易状态不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.status = newStatus;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取交易详细信息的简化展示</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getTransactionSummary</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Transaction &quot;</span> + transactionId + <span class="string">&quot;: &quot;</span> + transactionType + <span class="string">&quot; of &quot;</span> + amount + <span class="string">&quot; at &quot;</span> + transactionTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TransactionLogMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TransactionLogMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存交易记录</span></span><br><span class="line">    <span class="meta">@Insert(&quot;INSERT INTO transaction_log (wallet_id, transaction_time, amount, transaction_type, from_wallet_id, to_wallet_id, status) &quot; +</span></span><br><span class="line"><span class="meta">            &quot;VALUES (#&#123;walletId&#125;, #&#123;transactionTime&#125;, #&#123;amount&#125;, #&#123;transactionType&#125;, #&#123;fromWalletId&#125;, #&#123;toWalletId&#125;, #&#123;status&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(TransactionLog transactionLog)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据钱包ID查找所有交易记录</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT transaction_id, wallet_id, transaction_time, amount, transaction_type, from_wallet_id, to_wallet_id, status FROM transaction_log WHERE wallet_id = #&#123;walletId&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;transactionId&quot;, column = &quot;transaction_id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;walletId&quot;, column = &quot;wallet_id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;transactionTime&quot;, column = &quot;transaction_time&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;amount&quot;, column = &quot;amount&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;transactionType&quot;, column = &quot;transaction_type&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;fromWalletId&quot;, column = &quot;from_wallet_id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;toWalletId&quot;, column = &quot;to_wallet_id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;status&quot;, column = &quot;status&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    List&lt;TransactionLog&gt; <span class="title function_">findByWalletId</span><span class="params">(<span class="meta">@Param(&quot;walletId&quot;)</span> String walletId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四单元测试">四、单元测试</h2><h3 id="virtualwallettest">VirtualWalletTest</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VirtualWalletTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> VirtualWallet wallet;</span><br><span class="line">    <span class="keyword">private</span> VirtualWallet targetWallet;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        wallet = <span class="keyword">new</span> <span class="title class_">VirtualWallet</span>(<span class="string">&quot;wallet1&quot;</span>, <span class="string">&quot;user1&quot;</span>, <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1000.00&quot;</span>), <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;500.00&quot;</span>));</span><br><span class="line">        targetWallet = <span class="keyword">new</span> <span class="title class_">VirtualWallet</span>(<span class="string">&quot;wallet2&quot;</span>, <span class="string">&quot;user2&quot;</span>, <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;500.00&quot;</span>), <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;300.00&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testRecharge</span><span class="params">()</span> &#123;</span><br><span class="line">        wallet.recharge(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;500.00&quot;</span>), <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.1&quot;</span>));</span><br><span class="line">        assertEquals(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1500.00&quot;</span>), wallet.getBalance()); <span class="comment">// 余额增加</span></span><br><span class="line">        assertTrue(wallet.rewardBalance.compareTo(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;50.00&quot;</span>)) == <span class="number">0</span>);<span class="comment">// 奖励余额增加</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testRechargeNegativeAmount</span><span class="params">()</span> &#123;</span><br><span class="line">        assertThrows(IllegalArgumentException.class, () -&gt; wallet.recharge(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;-100.00&quot;</span>), <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.1&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWithdraw</span><span class="params">()</span> &#123;</span><br><span class="line">        assertDoesNotThrow(() -&gt; wallet.withdraw(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;200.00&quot;</span>), <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.05&quot;</span>)));</span><br><span class="line">        assertTrue(wallet.getBalance().compareTo(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;790.00&quot;</span>)) == <span class="number">0</span>); <span class="comment">// 余额减去 200 + 10（手续费）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWithdrawInsufficientBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        assertThrows(Exception.class, () -&gt; wallet.withdraw(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;2000.00&quot;</span>), <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.05&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testTransferTo</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        wallet.transferTo(targetWallet, <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;300.00&quot;</span>));</span><br><span class="line">        assertTrue(wallet.getBalance().compareTo(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;700.00&quot;</span>)) == <span class="number">0</span>); <span class="comment">// 余额减去 300</span></span><br><span class="line">        assertTrue(targetWallet.getBalance().compareTo(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;800.00&quot;</span>)) == <span class="number">0</span>); <span class="comment">// 目标钱包增加 300</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testTransferToInsufficientBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        assertThrows(Exception.class, () -&gt; wallet.transferTo(targetWallet, <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;2000.00&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testFreeze</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        wallet.freeze(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;300.00&quot;</span>));</span><br><span class="line">        assertTrue(wallet.getBalance().compareTo(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;700.00&quot;</span>)) == <span class="number">0</span>); <span class="comment">// 冻结 300, 1000-300 = 700</span></span><br><span class="line">        assertTrue(wallet.frozenAmount.compareTo(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;300.00&quot;</span>)) == <span class="number">0</span>); <span class="comment">// 冻结金额增加 300</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUnfreeze</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        wallet.freeze(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;300.00&quot;</span>));</span><br><span class="line">        wallet.unfreeze(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;300.00&quot;</span>));</span><br><span class="line">        assertTrue(wallet.getBalance().compareTo(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1000.00&quot;</span>)) == <span class="number">0</span>); <span class="comment">// 解冻后恢复到原余额</span></span><br><span class="line">        assertTrue(wallet.frozenAmount.compareTo(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.00&quot;</span>)) == <span class="number">0</span>); <span class="comment">// 冻结金额为 0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWithdrawWithInvalidAmount</span><span class="params">()</span> &#123;</span><br><span class="line">        assertThrows(IllegalArgumentException.class, () -&gt; wallet.withdraw(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;-100.00&quot;</span>), <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.1&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testFreezeWithInvalidAmount</span><span class="params">()</span> &#123;</span><br><span class="line">        assertThrows(IllegalArgumentException.class, () -&gt; wallet.freeze(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;-100.00&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUnfreezeWithInvalidAmount</span><span class="params">()</span> &#123;</span><br><span class="line">        assertThrows(IllegalArgumentException.class, () -&gt; wallet.unfreeze(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;-100.00&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果 <img src="./image-20241021235219505.png" alt="image-20241021235219505" style="zoom: 80%;" /></p><h3 id="transactionlogtest">TransactionLogTest</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionLogTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TransactionLog transactionLog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        transactionLog = <span class="keyword">new</span> <span class="title class_">TransactionLog</span>(<span class="string">&quot;wallet1&quot;</span>, <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;500.00&quot;</span>), <span class="string">&quot;充值&quot;</span>, <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testConstructor</span><span class="params">()</span> &#123;</span><br><span class="line">        assertNotNull(transactionLog);</span><br><span class="line">        assertEquals(<span class="string">&quot;wallet1&quot;</span>, transactionLog.getWalletId());</span><br><span class="line">        assertEquals(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;500.00&quot;</span>), transactionLog.getAmount());</span><br><span class="line">        assertEquals(<span class="string">&quot;充值&quot;</span>, transactionLog.getTransactionType());</span><br><span class="line">        assertEquals(<span class="string">&quot;成功&quot;</span>, transactionLog.getStatus());</span><br><span class="line">        assertNotNull(transactionLog.getTransactionTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdateStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        transactionLog.updateStatus(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        assertEquals(<span class="string">&quot;失败&quot;</span>, transactionLog.getStatus());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdateStatusWithEmptyString</span><span class="params">()</span> &#123;</span><br><span class="line">        assertThrows(IllegalArgumentException.class, () -&gt; transactionLog.updateStatus(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdateStatusWithNull</span><span class="params">()</span> &#123;</span><br><span class="line">        assertThrows(IllegalArgumentException.class, () -&gt; transactionLog.updateStatus(<span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetTransactionSummary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">summary</span> <span class="operator">=</span> transactionLog.getTransactionSummary();</span><br><span class="line">        assertTrue(summary.contains(<span class="string">&quot;Transaction&quot;</span>));</span><br><span class="line">        assertTrue(summary.contains(<span class="string">&quot;充值&quot;</span>));</span><br><span class="line">        assertTrue(summary.contains(<span class="string">&quot;500.00&quot;</span>));</span><br><span class="line">        assertTrue(summary.contains(String.valueOf(transactionLog.getTransactionTime().getYear())));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="./image-20241021235412096.png" alt="image-20241021235412096" style="zoom:80%;" /></p><h2 id="五集成测试">五、集成测试</h2><p>使用apifox进行集成测试，注意测试的时候需要在在8080后面加入/elm</p><p>先在IDEA中启动好springboot项目</p><p><img src="./image-20241022014546059.png" alt="image-20241022014546059" style="zoom:80%;" /></p><h3 id="钱包充值">1、钱包充值</h3><p><img src="./image-20241021235851395.png" alt="image-20241021235851395" style="zoom:80%;" /></p><h3 id="钱包提现">2.钱包提现</h3><p><img src="./image-20241022001841772.png" alt="image-20241022001841772" style="zoom:80%;" /></p><h3 id="钱包转账">3.钱包转账</h3><p><img src="./image-20241022001912365.png" alt="image-20241022001912365" style="zoom:80%;" /></p><h3 id="冻结资金">4.冻结资金</h3><p><img src="./image-20241022001938568.png" alt="image-20241022001938568" style="zoom:80%;" /></p><h3 id="解冻资金">5.解冻资金</h3><p><img src="./image-20241022002014950.png" alt="image-20241022002014950" style="zoom:80%;" /></p><h3 id="查询余额接口">6.查询余额接口</h3><p><img src="./image-20241022002102031.png" alt="image-20241022002102031" style="zoom:80%;" /></p><h3 id="获取交易日志接口">7.获取交易日志接口</h3><p><img src="./image-20241022002217781.png" alt="image-20241022002217781" style="zoom:80%;" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软工中级实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生中的重大经历</title>
      <link href="/2024/09/17/%E4%BA%BA%E7%94%9F%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%A7%E7%BB%8F%E5%8E%86/"/>
      <url>/2024/09/17/%E4%BA%BA%E7%94%9F%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%A7%E7%BB%8F%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid authentication. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d25497956461948b4e378ac4ac35cb492172b2df3ed7ad0311d68e4203e8c156"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入手mac初体验</title>
      <link href="/2024/09/17/%E5%85%A5%E6%89%8Bmac%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2024/09/17/%E5%85%A5%E6%89%8Bmac%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>我现在这台mac的型号是2024款最新款14寸macbookpro m4pro 48G+1T，在这之前我更换过多次，从一开始的17款A1706macbookpro，到22款13寸的m2，再到21款的14寸m1pro，再到23款14寸m2max，再到现在我手里这一台，虽然说前四台都是二手的。但是，一款好的二手电脑性价比极高，足足可以用好多年。二手电脑贬值快是不可避免的，mac算作在二手电脑里贬值幅度较小的了，最后一台二手m2max当年官网2.5w+，如今过了一年1.67w，电池14次循环，100%，第二年主要部件在保，外观成色都完美，商家还很负责的把发票补开出来了，个人觉得在闲鱼上买到这样的mac算是比较完美了。但是听说新出的m4pro已经吊打m2max，所以没忍住，换了新款的m4pro😁</p><p>再说一下我多次换mac的经验吧。</p><p>个人是iphone13，ipad Air5，Apple watch s7，也是想体验一下苹果的生态吧，再就是想摆脱每次出门都要带着重达4kg的游戏本+充电器，满足我随时随地办公的需求，于是考虑入手一款mac。</p><p>17款的A1706，当时也没有太多钱，好不容易攒了2k，想着快点体验一下mbp，所以就入手了这款。这款缺点也很明显，都2024年了，还用着7年前的机器，有点寒碜的感觉，20年前的全是intel芯片，功耗大，续航比较差，如果是16寸高配intel插着电在家里用还是可以当作生产力的，但是13寸的拿来出门办公。。说实话，续航还真不一定有我的游戏本（Dell G15 5520）强，况且性能层面它和游戏本的差距也不是一点半点的。于是大概一个月后，我又以原价在闲鱼上卖了出去。<img src="./IMG_6818.JPG" alt="IMG_6818" style="zoom: 50%;" /></p><p>22款13寸m2，这个当时主要是看中了芯片，m2芯片说是在m1的基础上提升了不少，可是现在想想，都是arm架构的，厚度还一样，能提升多少呢？5.6k入手的感觉确实还不错，续航极大的提高，出门一整天都不需要带充电器。但是，用了一段时间后发现，性能却不够用，我的配置是8+256，256还好，我也不需要存一些资料，但是内存8G，甚至网页开多了都会卡，何况苹果m系列的内存是cpu和gpu共用的，也就是说，cpu实际得到的内存比8G少的多，如果是轻办公的话无所谓，但是作为一名码农，这肯定是不达标的。还有一点是，这一款的外观和17款的外观没有任何区别，看网上说有点清库存的意思，毕竟最新的m3已经改变了之前的老旧外观。除此之外，蝶式键盘我也不是很喜欢，哒哒哒哒的响不说还没有一点手感。因此，过了一个月，我又以原价卖了出去。<img src="./IMG_6819.JPG" alt="IMG_6819" style="zoom:50%;" /></p><p>21款14寸m1pro，入手这一款是看网上测评说m1pro是大于m2，这其实也不难理解，毕竟按照苹果的尿性pro就是比基础款强不少的，放在iphone产品上也能看得出来。并且配置方面我也升级到了16+512。但是，还是不满意，毕竟我的游戏本是32+1T的，怎么说也得升级为32G吧，再者，我自己测试的时候，打开微信，qq，IDEA，Webstorm，网页开了几十个的时候内存还是不够用。我的这款是8+14核的，也就是丐版，心里总觉得有些过不去。这款我是在京东上买的，京东的拍拍二手算是比较正规的二手平台了，但是没盒子没发票，将来想转手都困难。于是，为了尽快卖出，我是8843入手的，以7700的价格一个周之后在闲鱼上卖了出去。</p><p>还有一点这里补充一下，从这一款开始，我的mac就不带touchbar了，说实话，我一开始入手A1706的时候，有一个相中点就是touchbar，但是后来越来越感觉鸡肋，除了调节声音和亮度的时候比较丝滑，切换网页或者拉动进度条的时候比较省事，其他再无优点。论高端大气上档次，其实赶不上现在的m2max有品。这也是比较有争议的一点吧，所以苹果也取消了touchbar，22款的13寸m2，无疑是最后一批带m2的产品。</p><p>这期间还有个小插曲，我在闲鱼上写了可以走验货宝，一位买家欣然接受，我跟他聊的也很投机，但是到了验货宝的浙江验机中心后，验机中心给我的答复是，屏幕存在明显的老化，当时我就懵了，我的屏幕没有一点的问题，怎么验机中心会检测出问题呢，这里还好我录了封箱视频，里面并没有展现出屏幕有老化的现象，后来我上网查阅了很多资料，才发现，苹果m1pro，m2pro等等系列屏幕两侧都会出现变暗的部分，但是不是很明显，因此我也没注意，这是通病。就是这一点，也让验货中心的sb看出来了，没有经验不说，只是死板的下结论，说得好听一点是负责任，说得不好听那就是形式主义。<strong>毕竟拿钱办事，不需要提升自己的技能，这种岗位细细想来也能说的过去。</strong>验货宝的这一结论，无意成为了买家到手刀的杀手锏，其实，闲鱼提供验货宝这一服务，是为了防止到手刀，实际上，在闲鱼验完货后买家决定要买之前是可以再次商定价格的，到手刀就这样被转移到这个步骤了，真是妙啊，假如说你不降价，买家就拒绝接受商品，让你付验货费，说货不对板，你一点脾气也没有，啥事没做直接亏100多块，这还不算运费。<strong>这种变相的到手刀到底对谁有利，不必多言了。</strong>所以，我的商品从原来的7800被砍成7700，很无语。这次交易很不愉快，自己亏了1k多，还被验货宝搞了。现在才明白，为什么贵重的电子产品都是面交。<img src="./IMG_6820.JPG" alt="IMG_6820" style="zoom:50%;" /></p><p>之后，我在闲鱼上浏览了半个月吧，几乎小学期的大半时间都花在了这上面。比较相中的是m2max 32+1T，至于14寸还是16寸，经常出门的话还是14寸好一点，毕竟16寸可能装在书包里都挺困难。本来我已经买了一个未拆封未激活，卖家那边声称是教育机但是已经过保，买回来发现是后封的，因此又退了。过几天，我联系另一个卖家的时候，他发的序列号竟然和我刚退回去的mac的序列号一模一样，再一看他们的ip都是深圳，我瞬间感觉这机器来路不正。因此，我选择一位好评100%的南京实体店卖家，也是在开学的第一天，买到了自己心意的机器。</p><p><img src="./截屏2024-09-17 13.37.36.png" alt="截屏2024-09-17 13.37.36" style="zoom:50%;" /></p><p>之所以买mac的原因归结为一下几点吧</p><ol type="1"><li>续航高，我现在的m2max续航虽然赶不上16寸的，但是1小时的中等强度办公消耗10%的电量已经是笔记本中的天花板的存在了</li><li>便携性，因为我不怎么在宿舍学习，并且要在不同的教学楼里上课，有时还会去图书馆，所以这一是我着重考虑的一点。</li><li>洁面优美，干净整洁。这一点我就不得不提一下我的游戏本了，经常在轻办公的时候，风扇就毫无防备的响了，一开始还以为是开了什么软件，后来才发现是系统更新，每次都是呼呼的响完，右下角多出来一个请选择计划重启的时间，真是让人有点哭笑不得。还有就是开机速度，安装和卸载软件的便捷性等等</li><li>苹果生态。现在手机和mac传文件可以直接用隔空投送了，而不用像之前那样还需要借助微信，微信传的视频还是被压缩的，现在可以轻松的传源文件。</li><li>系统的稳定性。mac系统还是很稳的，这一点网上有很多的案例，我也不多说了，我的游戏本今年就已经蓝屏过2次了。。。</li><li>触控板，台前调度，全屏幕切换等等。这些功能属实让我方便也舒适不少，具体的优点不细说了。</li><li>性能层面。mac插不插充电器，电脑的性能都一样，但是win本（特别是游戏本）就不一样了，不插电开个ppt都会卡。。</li></ol><p>可能现在有键盘侠会反驳了，mac软件生态差，不能打游戏。</p><p>确实，但是我的专业目前来讲只有一个vivado不能在mac上下载，其他的mac上都有相关的软件，况且我也有我的游戏本，只不过不想背着它来回跑。以后如果有需要跑模型啥的，估计也会有实验室的服务器吧。</p><p>至于打游戏，熟悉我的人都知道，从上大学以来，我是没有在电脑上打过游戏的，所以如果你是win的游戏迷的话，还是慎重考虑mac。</p><p>除了这两点，还能说得出什么理由呢？欢迎评论区留言。</p><p>上面的个人经历也是想给各位一个参考，如果你不知道你买mac的目的，或者不能像我这样罗列出买的理由，那我还是建议不要冲动的买。毕竟，买一个配置相同的mac和win，mac的价格是win的2倍左右。最后说一句，如果你想在闲鱼这样的二手平台买mac，你还是一个小白的话，建议你多搜搜经验贴，或者来咨询我，防止被骗！！</p><p>-------------------------------------------------------2024/11/26更新----------------------------------------------------------</p><p>还是把上面的m2max给出掉了，原因很简单，11月1日出的新品m4芯片，经过多次比较，我发现CPU方面m4=m3pro=m2max，而m4pro的CPU提升更大，可以媲美m3max，所以毫无疑问，买新不买旧，我以15800的价格出掉了m2max，其实现在的m2max性价比不低，但作为一名电子产品爱好者，想尝尝新，所以即使是亏了1000，还是决定卖新款m4pro，下图为目前的机器配置，使用感受一个字：爽！</p><p><img src="./截屏2024-11-26 13.31.52.png" alt="截屏2024-11-26 13.31.52" style="zoom:50%;" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单周期MIPS处理器的设计与实现</title>
      <link href="/2024/06/17/%E5%8D%95%E5%91%A8%E6%9C%9FMIPS%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
      <url>/2024/06/17/%E5%8D%95%E5%91%A8%E6%9C%9FMIPS%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="实验四单周期mips处理器的设计与实现">实验四、单周期MIPS处理器的设计与实现</h1><h2 id="一实验目的">一、实验目的</h2><ol type="1"><li><p>熟悉 MIPS 处理器的常用指令集（10 条）</p></li><li><p>掌握单周期处理器数据通路和控制单元的设计方法</p></li><li><p>基于增量方式，实现单周期 MIPS 处理器；</p></li><li><p>基于测试用例对所设计的单周期 MIPS 处理器进行功能验证。</p></li></ol><h2 id="二实验环境">二、实验环境</h2><ol type="1"><li><p>操作系统：Windows 10 或 Ubuntu 16.04</p></li><li><p>开发环境：Xilinx Vivado 2018.2</p></li><li><p>硬件平台：远程 FPGA 硬件云平台</p></li></ol><h2 id="三实验原理">三、实验原理</h2><p>处理器（CPU）本质上是一个复杂的数字时序电路。通常，时序电路由记忆部件（如寄存器、存储器等）和组合逻辑构成。记忆部件用于保存电路的工作状态，而组合逻辑则由逻辑门组成，提供电路的所有逻辑功能。在组合逻辑的作用下，电路从一个状态转化为另一个状态，这样的电路也称为“状态机”。因此，单周期 MIPS 处理器在概念上也可以被看作一个大规模的状态机，如下图所示。其中，组合逻辑依据当前记忆部件中的值（即电路的现态）对指令进行处理，这个处理过程将再次修改记忆部件的值，使电路达到新状态（即电路的次态）。</p><p><img src="./image-20240617163813747.png" alt="image-20240617163813747" style="zoom:50%;" /></p><p>在设计单周期 CPU 这样复杂的时序电路系统时，通常的方法是从包含记忆部件的硬件开始。这些元件包括<strong>存储器</strong>和<strong>寄存器</strong>，寄存器又可分为<strong>程序计数器</strong>和<strong>寄存器文件</strong>。然后，在这些存储元件之间增加组合逻辑基于当前状态计算新的状态。从指令存储器中读取指令，然后译码时访问寄存器文件获取操作数，再使用加载和存储指令从数据存储器中读取和写入数据。下面给出了具有 4 种状态元件（<strong>程序计数器 PC</strong>、<strong>寄存器文件</strong>、<strong>指令存储器</strong>和<strong>数据存储器</strong>）的框图。</p><p><img src="./image-20240617163833476.png" alt="image-20240617163833476" style="zoom:80%;" /></p><h2 id="四实验内容">四、实验内容</h2><p>基于 SystemVerilog HDL 设计并实现单周期 MIPS 处理器——MiniMIPS32。</p><p>该处理器具有如下特点：</p><p>⚫ 32 位数据通路</p><p>⚫ 小端模式</p><p>⚫ 支持 10 条指令：<strong>lw、sw、lui、ori、addiu、addu、slt、beq、bne 和 j</strong></p><p>⚫ 寄存器文件由 32 个 32 位寄存器组成，采用异步读/同步写工作模式</p><p>⚫ 采用哈佛结构（即分离的指令存储器和数据存储器），指令存储器由ROM构成，采用异步读工作模式；数据存储器由 RAM 构成，采用异步读/同步写工作模式。</p><p>顶层模块MiniMIPS32_SYS结构图如下：</p><p><img src="./image-20240617164020561.png" alt="image-20240617164020561" style="zoom: 67%;" /></p><p>下表给出了给出了顶层模块 MiniMIPS32_SYS 的输入/输出端口。</p><p><img src="./image-20240617164130074.png" alt="image-20240617164130074" style="zoom:67%;" /></p><p>最终设计实现的单周期MIPS处理器能够运行所提供的6个测试用例 <strong>mem.S，i-type.S，r-type.S，branch.S，sort_sim.S 和 sort_board.S</strong>。其中，前 5 个只能用于功能仿真；最后一个可以上传到远程 FPGA 硬件云平台完成功能验证，如果测试通过则 LED 灯 led_g 被点亮为绿色，否则 LED 灯 led_r 被点亮为红色。</p><h2 id="五实验步骤">五、实验步骤</h2><h3 id="一minimips的总体设计">（一）MiniMIPS的总体设计</h3><p>由于MiniMIPS32模块较为复杂，所以我划分为了6个子模块，对应不同的功能</p><p>由于CPU的执行指令过程为：<strong>取指、译码、执行、访存、写回（、更新PC）</strong>，因此我划分为<code>ControlUnit</code> 、<code>Register_File</code>、<code>ALUOps</code>、<code>RegWriteDataSelect</code>、<code>AddressCalculation</code>、<code>pc</code>这六个子模块，功能如下：</p><p><strong>指令获取</strong>：从指令存储器中获取当前指令，并将指令传递给 <code>ControlUnit</code> 进行译码。</p><p><strong>译码</strong>：<code>ControlUnit</code> 根据指令的操作码和功能码，生成相应的控制信号，指导各个模块的操作。</p><p><strong>寄存器读写</strong>：<code>Register_File</code> 根据控制信号和指令中的寄存器地址，进行寄存器的读写操作。</p><p><strong>ALU 操作</strong>：<code>ALUOps</code> 根据控制信号，对操作数进行相应的运算，并输出结果。</p><p><strong>数据选择</strong>：<code>RegWriteDataSelect</code> 根据控制信号，选择写回寄存器的数据和目标地址。</p><p><strong>地址计算</strong>：<code>AddressCalculation</code> 根据控制信号和指令，计算下一条指令的地址。</p><p><strong>程序计数器更新</strong>：<code>pc</code> 模块在时钟上升沿更新程序计数器的值。</p><h4 id="controlunit.sv">1. ControlUnit.sv</h4><p><strong>功能描述</strong>：</p><ul><li>控制单元模块根据指令操作码 (<code>op</code>) 和功能码 (<code>funct</code>)，生成各种控制信号，以指导处理器的不同部分如何操作。</li><li>该模块输入操作码和功能码，并输出多个控制信号。</li></ul><p><strong>输入信号</strong>：</p><ul><li><code>op</code>：指令的操作码。</li><li><code>funct</code>：指令的功能码（仅对 R 型指令有用）。</li><li><code>RD1</code>、<code>RD2</code>：来自寄存器文件的两个操作数。</li><li><code>daddr</code>：数据存储器地址。</li></ul><p><strong>输出信号</strong>：</p><ul><li><code>we</code>：数据存储器写使能信号。</li><li><code>we3</code>：寄存器文件写使能信号。</li><li><code>pcflag</code>：程序计数器更新标志。</li><li><code>regdst</code>：寄存器目标选择信号。</li><li><code>mem_to_reg</code>：内存到寄存器数据选择信号。</li><li><code>j_flag</code>：跳转指令标志。</li><li><code>alusrc</code>：ALU 第二操作数选择信号。</li><li><code>AluControl</code>：ALU 控制信号。</li></ul><p><strong>作用</strong>：</p><ul><li>根据指令类型和具体功能，生成相应的控制信号，确保处理器各个部分按照预期的方式操作。例如，<code>lw</code> 和 <code>sw</code> 指令需要访问数据存储器，<code>ControlUnit</code> 生成的信号会指示数据存储器进行读或写操作。</li></ul><h4 id="register_file.sv">2. Register_File.sv</h4><p><strong>功能描述</strong>：</p><ul><li>寄存器文件模块实现了一个包含 32 个 32 位寄存器的存储结构。提供对寄存器的读写功能。</li></ul><p><strong>输入信号</strong>：</p><ul><li><code>sys_clk</code>：系统时钟信号。</li><li><code>WE3</code>：写使能信号。</li><li><code>sys_rst_n</code>：系统复位信号（低电平有效）。</li><li><code>A1</code>、<code>A2</code>、<code>A3</code>：要读取或写入的寄存器地址。</li><li><code>WD3</code>：要写入寄存器的数据。</li></ul><p><strong>输出信号</strong>：</p><ul><li><code>RD1</code>、<code>RD2</code>：从寄存器读取的数据。</li></ul><p><strong>作用</strong>：</p><ul><li>在时钟上升沿或复位时，更新寄存器值。根据输入地址和控制信号，实现对寄存器的读写操作。</li></ul><h4 id="aluops.sv">3. ALUOps.sv</h4><p><strong>功能描述</strong>：</p><ul><li>ALU 操作模块实现算术逻辑单元 (ALU) 的功能。根据控制信号执行不同的运算，如加法、减法、与、或等。</li></ul><p><strong>输入信号</strong>：</p><ul><li><code>alu1</code>：ALU 的第一个操作数。</li><li><code>alu2</code>：ALU 的第二个操作数。</li><li><code>AluControl</code>：控制信号，决定 ALU 要执行的具体操作。</li></ul><p><strong>输出信号</strong>：</p><ul><li><code>aluresult</code>：ALU 运算结果。</li></ul><p><strong>作用</strong>：</p><ul><li>根据 <code>AluControl</code> 信号，对 <code>alu1</code> 和 <code>alu2</code> 进行相应的运算，并输出结果。例如，如果 <code>AluControl</code> 信号指示加法操作，ALU 就会对 <code>alu1</code> 和 <code>alu2</code> 进行加法运算，并将结果输出到 <code>aluresult</code>。</li></ul><h4 id="regwritedataselect.sv">4. RegWriteDataSelect.sv</h4><p><strong>功能描述</strong>：</p><ul><li>该模块负责选择写回寄存器的数据和目标寄存器地址。</li></ul><p><strong>输入信号</strong>：</p><ul><li><code>regdst</code>：寄存器目标选择信号，决定写回寄存器地址是 <code>rd</code> 还是 <code>rt</code>。</li><li><code>mem_to_reg</code>：内存到寄存器数据选择信号，决定写回的数据是来自 ALU 还是数据存储器。</li><li><code>rt</code>、<code>rd</code>：指令中的寄存器地址字段。</li><li><code>aluresult</code>：ALU 运算结果。</li><li><code>dout</code>：从数据存储器读取的数据。</li></ul><p><strong>输出信号</strong>：</p><ul><li><code>A3</code>：要写入的寄存器地址。</li><li><code>WD3</code>：要写入寄存器的数据。</li></ul><p><strong>作用</strong>：</p><ul><li>根据 <code>regdst</code> 信号，决定要写入的寄存器地址是 <code>rd</code> 还是 <code>rt</code>。根据 <code>mem_to_reg</code> 信号，决定写入寄存器的数据是 ALU 结果还是从内存读取的数据。</li></ul><h4 id="addresscalculation.sv">5. AddressCalculation.sv</h4><p><strong>功能描述</strong>：</p><ul><li>地址计算模块负责计算下一条指令的程序计数器 (PC) 值。</li></ul><p><strong>输入信号</strong>：</p><ul><li><code>pcflag</code>：程序计数器更新标志。</li><li><code>j_flag</code>：跳转指令标志。</li><li><code>next_addr</code>：当前的程序计数器值。</li><li><code>extend</code>：符号扩展后的立即数。</li><li><code>instr_index</code>：跳转指令的目标地址。</li></ul><p><strong>输出信号</strong>：</p><ul><li><code>current_addr</code>：计算后的下一条指令地址。</li></ul><p><strong>作用</strong>：</p><ul><li>根据 <code>pcflag</code> 和 <code>j_flag</code> 信号，决定程序计数器的更新方式。处理顺序执行、条件分支和无条件跳转等情况，计算出下一条指令的地址。</li></ul><h4 id="pc.sv">6. pc.sv</h4><p><strong>功能描述</strong>：</p><ul><li>程序计数器 (PC) 模块实现程序计数器的功能。</li></ul><p><strong>输入信号</strong>：</p><ul><li><code>cpu_clk</code>：系统时钟信号。</li><li><code>cpu_rst_n</code>：系统复位信号（低电平有效）。</li><li><code>current_addr</code>：当前的程序计数器值。</li></ul><p><strong>输出信号</strong>：</p><ul><li><code>next_addr</code>：更新后的程序计数器值。</li></ul><p><strong>作用</strong>：</p><ul><li>在时钟上升沿，根据复位信号和输入的 <code>current_addr</code>，更新程序计数器的值。确保处理器按照正确的指令地址执行。</li></ul><h3 id="二lw-和-sw访存类指令">（二）lw 和 sw（访存类指令）</h3><h4 id="controllerunit.sv">1.ControllerUnit.sv</h4><p>在 <code>ControlUnit</code> 模块中添加 <code>lw</code> 和 <code>sw</code> 指令的控制逻辑。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">module ControlUnit(</span><br><span class="line">    input  logic [5:0]  op,</span><br><span class="line">    input  logic [5:0]  funct,</span><br><span class="line">    input  logic [31:0] RD1,</span><br><span class="line">    input  logic [31:0] RD2,</span><br><span class="line">    input  logic [31:0] daddr,</span><br><span class="line">    output logic        we,</span><br><span class="line">    output logic        we3,</span><br><span class="line">    output logic        pcflag,</span><br><span class="line">    output logic        regdst,</span><br><span class="line">    output logic        mem_to_reg,</span><br><span class="line">    output logic        j_flag,</span><br><span class="line">    output logic [1:0]  alusrc,</span><br><span class="line">    output logic [1:0]  AluControl</span><br><span class="line">);</span><br><span class="line">    always_comb begin</span><br><span class="line">        we = 0;</span><br><span class="line">        we3 = 0;</span><br><span class="line">        pcflag = 0;</span><br><span class="line">        regdst = 0;</span><br><span class="line">        mem_to_reg = 0;</span><br><span class="line">        j_flag = 0;</span><br><span class="line">        alusrc = 2&#x27;b00;</span><br><span class="line">        AluControl = 2&#x27;b00;</span><br><span class="line"></span><br><span class="line">        case(op)</span><br><span class="line">            6&#x27;b100011: begin // lw</span><br><span class="line">                we = 0;</span><br><span class="line">                we3 = 1;</span><br><span class="line">                pcflag = 0;</span><br><span class="line">                regdst = 0;</span><br><span class="line">                alusrc = 2&#x27;b01;</span><br><span class="line">                mem_to_reg = 1;</span><br><span class="line">                j_flag = 0;</span><br><span class="line">                AluControl = 2&#x27;b00;</span><br><span class="line">            end</span><br><span class="line">            6&#x27;b101011: begin // sw</span><br><span class="line">                we = (daddr[31:16] != 16&#x27;h8000 &amp;&amp; daddr[31:16] != 16&#x27;h8004);</span><br><span class="line">                we3 = 0;</span><br><span class="line">                pcflag = 0;</span><br><span class="line">                regdst = 0;</span><br><span class="line">                alusrc = 2&#x27;b01;</span><br><span class="line">                mem_to_reg = 0;</span><br><span class="line">                j_flag = 0;</span><br><span class="line">                AluControl = 2&#x27;b00;</span><br><span class="line">            end</span><br><span class="line">            default: pcflag = 0;</span><br><span class="line">        endcase</span><br><span class="line">    end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><p><code>lw</code> 指令：控制信号 <code>we</code> 设为 <code>0</code>（不写数据存储器），<code>we3</code> 设为 <code>1</code>（写寄存器文件），<code>alusrc</code> 设为 <code>2'b01</code>（选择符号扩展后的立即数作为 ALU 的第二个操作数），<code>mem_to_reg</code> 设为 <code>1</code>（选择从数据存储器读取的数据写回寄存器），<code>AluControl</code> 设为 <code>2'b00</code>（执行加法操作）。</p><p><code>sw</code> 指令：控制信号 <code>we</code> 根据地址判断是否写数据存储器（避免与特定地址冲突），<code>we3</code> 设为 <code>0</code>（不写寄存器文件），<code>alusrc</code> 设为 <code>2'b01</code>，<code>mem_to_reg</code> 设为 <code>0</code>，<code>AluControl</code> 设为 <code>2'b00</code>。</p><h4 id="register_file.sv-1">2.Register_File.sv</h4><p>寄存器文件模块，读取和写入寄存器。</p><p>在时钟上升沿或复位时，更新寄存器文件的值。</p><p>根据 <code>WE3</code> 信号，决定是否将 <code>WD3</code> 写入到地址 <code>A3</code> 对应的寄存器。</p><p>读取地址 <code>A1</code> 和 <code>A2</code> 对应的寄存器值，并分别输出到 <code>RD1</code> 和 <code>RD2</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">module Register_File(</span><br><span class="line">    input               sys_clk,</span><br><span class="line">    input               WE3,</span><br><span class="line">    input               sys_rst_n,</span><br><span class="line">    input        [4:0]  A1,</span><br><span class="line">    input        [4:0]  A2,</span><br><span class="line">    input        [4:0]  A3,</span><br><span class="line">    input        [31:0] WD3,</span><br><span class="line">    output logic [31:0] RD1,</span><br><span class="line">    output logic [31:0] RD2</span><br><span class="line">);</span><br><span class="line">    logic [31:0] r [31:0];</span><br><span class="line"></span><br><span class="line">    always_ff @(posedge sys_clk) begin</span><br><span class="line">        if (!sys_rst_n) begin</span><br><span class="line">            for (int i = 0; i &lt; 32; i++) begin</span><br><span class="line">                r[i] &lt;= 32&#x27;d0;</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">        else if (WE3) begin</span><br><span class="line">            r[A3] &lt;= WD3;</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    assign RD1 = r[A1];</span><br><span class="line">    assign RD2 = r[A2];</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h4 id="aluops.sv-1">3.ALUOps.sv</h4><p>实现加法操作,根据 <code>AluControl</code> 信号，执行加法操作。对于 <code>lw</code> 和 <code>sw</code> 指令，ALU 需要执行加法操作，将基址寄存器的值与立即数相加，得到内存访问地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">module ALUOps(</span><br><span class="line">    input  logic [31:0] alu1,</span><br><span class="line">    input  logic [31:0] alu2,</span><br><span class="line">    input  logic [1:0]  AluControl,</span><br><span class="line">    output logic [31:0] aluresult</span><br><span class="line">);</span><br><span class="line">    always_comb begin</span><br><span class="line">        case (AluControl)</span><br><span class="line">            2&#x27;b00: aluresult = alu1 + alu2; // 加法操作</span><br><span class="line">            default: aluresult = 32&#x27;b0;</span><br><span class="line">        endcase</span><br><span class="line">    end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h4 id="regwritedataselect.sv-1">4.RegWriteDataSelect.sv</h4><p>选择写回寄存器的数据和目标寄存器地址。具体来讲</p><p>根据 <code>regdst</code> 信号，决定写回的寄存器地址是 <code>rd</code> 还是 <code>rt</code>。</p><p>根据 <code>mem_to_reg</code> 信号，决定写回的数据是来自内存还是 ALU 运算结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">module RegWriteDataSelect(</span><br><span class="line">    input  logic        regdst,</span><br><span class="line">    input  logic        mem_to_reg,</span><br><span class="line">    input  logic [4:0]  rt,</span><br><span class="line">    input  logic [4:0]  rd,</span><br><span class="line">    input  logic [31:0] aluresult,</span><br><span class="line">    input  logic [31:0] dout,</span><br><span class="line">    output logic [4:0]  A3,</span><br><span class="line">    output logic [31:0] WD3</span><br><span class="line">);</span><br><span class="line">    assign A3 = regdst ? rd : rt;</span><br><span class="line">    assign WD3 = mem_to_reg ? &#123;dout[7:0], dout[15:8], dout[23:16], dout[31:24]&#125; : aluresult;</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h4 id="addresscalculation.sv-1">5.AddressCalculation.sv</h4><p>计算下一条指令的程序计数器 (PC) 值。处理顺序执行和条件分支指令，计算下一条指令的地址。</p><p>对于 <code>lw</code> 和 <code>sw</code> 指令，程序计数器顺序递增。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">module AddressCalculation(</span><br><span class="line">    input  logic        pcflag,</span><br><span class="line">    input  logic        j_flag,</span><br><span class="line">    input  logic [31:0] next_addr,</span><br><span class="line">    input  logic [31:0] extend,</span><br><span class="line">    input  logic [25:0] instr_index,</span><br><span class="line">    output logic [31:0] current_addr</span><br><span class="line">);</span><br><span class="line">    always_comb begin</span><br><span class="line">        if (!j_flag) begin</span><br><span class="line">            if (!pcflag)</span><br><span class="line">                current_addr = next_addr + 4;</span><br><span class="line">            else</span><br><span class="line">                current_addr = next_addr + 4 + (extend &lt;&lt; 2);</span><br><span class="line">        end else begin</span><br><span class="line">            logic [31:0] mid = next_addr + 4;</span><br><span class="line">            current_addr = &#123;mid[31:28], instr_index, 2&#x27;b00&#125;;</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h4 id="pc.sv-1">6.pc.sv</h4><p>程序计数器模块,在时钟上升沿，根据复位信号和输入的 <code>current_addr</code>，更新程序计数器的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">module pc(</span><br><span class="line">    input logic cpu_clk,</span><br><span class="line">    input logic cpu_rst_n,</span><br><span class="line">    input logic [31:0] current_addr,</span><br><span class="line">    output logic [31:0] next_addr</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    always_ff @(posedge cpu_clk) begin</span><br><span class="line">        if (!cpu_rst_n)</span><br><span class="line">            next_addr &lt;= 32&#x27;d0;</span><br><span class="line">        else</span><br><span class="line">            next_addr &lt;= current_addr;</span><br><span class="line">    end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h4 id="顶层模块">7.顶层模块</h4><p>将各个子模块联系起来构成完整的系统</p><p>从指令存储器获取当前指令，传递给 <code>ControlUnit</code> 进行译码，生成控制信号。</p><p>根据控制信号，<code>Register_File</code> 模块读取或写入寄存器。</p><p><code>ALUOps</code> 模块执行相应的运算，并输出结果。</p><p><code>RegWriteDataSelect</code> 模块选择写回寄存器的数据和目标地址。</p><p><code>AddressCalculation</code> 模块计算下一条指令的地址。</p><p><code>pc</code> 模块在时钟上升沿更新程序计数器的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">`include &quot;defines.sv&quot;</span><br><span class="line"></span><br><span class="line">module MiniMIPS32(</span><br><span class="line">    input  logic        cpu_clk,</span><br><span class="line">    input  logic        cpu_rst_n,</span><br><span class="line">    output logic [31:0] iaddr,</span><br><span class="line">    input  logic [31:0] inst,</span><br><span class="line">    output logic [31:0] daddr, </span><br><span class="line">    output logic        we,   </span><br><span class="line">    output logic [31:0] din,     </span><br><span class="line">    input  logic [31:0] dout    </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    logic [31:0] Instruction;</span><br><span class="line">    logic [5:0] op, funct;</span><br><span class="line">    logic [4:0] rs, rt, rd;</span><br><span class="line">    logic [15:0] imm;</span><br><span class="line">    logic [25:0] instr_index;</span><br><span class="line"></span><br><span class="line">    logic [31:0] current_addr;</span><br><span class="line">    logic [31:0] next_addr;  </span><br><span class="line">    logic [31:0] aluresult;</span><br><span class="line">    logic [31:0] extend;</span><br><span class="line">    logic [31:0] extend_0;</span><br><span class="line">    logic [31:0] alu1;</span><br><span class="line">    logic [31:0] alu2;</span><br><span class="line">    logic [31:0] RD1;</span><br><span class="line">    logic [31:0] RD2;</span><br><span class="line">    logic [31:0] WD3;</span><br><span class="line">    logic [4:0]  A3;</span><br><span class="line"></span><br><span class="line">    logic we3, pcflag, regdst, mem_to_reg, j_flag;</span><br><span class="line">    logic [1:0] alusrc, AluControl;</span><br><span class="line"></span><br><span class="line">    assign Instruction = &#123;inst[7:0], inst[15:8], inst[23:16], inst[31:24]&#125;;</span><br><span class="line">    assign op = Instruction[31:26];</span><br><span class="line">    assign rs = Instruction[25:21];</span><br><span class="line">    assign rt = Instruction[20:16];</span><br><span class="line">    assign rd = Instruction[15:11];</span><br><span class="line">    assign imm = Instruction[15:0];</span><br><span class="line">    assign funct = Instruction[5:0];</span><br><span class="line">    assign instr_index = Instruction[25:0];</span><br><span class="line"></span><br><span class="line">    ControlUnit cu(</span><br><span class="line">        .op(op),</span><br><span class="line">        .funct(funct),</span><br><span class="line">        .RD1(RD1),</span><br><span class="line">        .RD2(RD2),</span><br><span class="line">        .daddr(daddr),</span><br><span class="line">        .we(we),</span><br><span class="line">        .we3(we3),</span><br><span class="line">        .pcflag(pcflag),</span><br><span class="line">        .regdst(regdst),</span><br><span class="line">        .mem_to_reg(mem_to_reg),</span><br><span class="line">        .j_flag(j_flag),</span><br><span class="line">        .alusrc(alusrc),</span><br><span class="line">        .AluControl(AluControl)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    Register_File rf(</span><br><span class="line">        .sys_clk(cpu_clk),</span><br><span class="line">        .WE3(we3),</span><br><span class="line">        .sys_rst_n(cpu_rst_n),</span><br><span class="line">        .A1(rs),</span><br><span class="line">        .A2(rt),</span><br><span class="line">        .RD1(RD1), </span><br><span class="line">        .RD2(RD2),</span><br><span class="line">        .A3(A3),</span><br><span class="line">        .WD3(WD3)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    always_comb begin</span><br><span class="line">        extend = &#123;&#123;16&#123;imm[15]&#125;&#125;, imm&#125;;</span><br><span class="line">        extend_0 = &#123;16&#x27;b0, imm&#125;;</span><br><span class="line">        alu1 = RD1;</span><br><span class="line">        alu2 = (alusrc == 2&#x27;b00) ? RD2 : (alusrc == 2&#x27;b01) ? extend : extend_0;</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    ALUOps alu_ops(</span><br><span class="line">        .alu1(alu1),</span><br><span class="line">        .alu2(alu2),</span><br><span class="line">        .AluControl(AluControl),</span><br><span class="line">        .aluresult(aluresult)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    RegWriteDataSelect reg_write_data_select(</span><br><span class="line">        .regdst(regdst),</span><br><span class="line">        .mem_to_reg(mem_to_reg),</span><br><span class="line">        .rt(rt),</span><br><span class="line">        .rd(rd),</span><br><span class="line">        .aluresult(aluresult),</span><br><span class="line">        .dout(dout),</span><br><span class="line">        .A3(A3),</span><br><span class="line">        .WD3(WD3)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    AddressCalculation addr_calc(</span><br><span class="line">        .pcflag(pcflag),</span><br><span class="line">        .j_flag(j_flag),</span><br><span class="line">        .next_addr(next_addr),</span><br><span class="line">        .extend(extend),</span><br><span class="line">        .instr_index(instr_index),</span><br><span class="line">        .current_addr(current_addr)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    assign daddr = aluresult;</span><br><span class="line">    assign &#123;din[7:0], din[15:8], din[23:16], din[31:24]&#125; = RD2;</span><br><span class="line"></span><br><span class="line">    pc pc_count(</span><br><span class="line">        .cpu_clk(cpu_clk),</span><br><span class="line">        .cpu_rst_n(cpu_rst_n),</span><br><span class="line">        .current_addr(current_addr),</span><br><span class="line">        .next_addr(next_addr)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    assign iaddr = next_addr;</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h3 id="二luiori-和-addiui-型指令">（二）lui、ori 和 addiu（I-型指令）</h3><h4 id="controllerunit.sv-1">1.ControllerUnit.sv</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">..........</span><br><span class="line">6&#x27;b101011: begin // sw</span><br><span class="line">    we = (daddr[31:16] != 16&#x27;h8000 &amp;&amp; daddr[31:16] != 16&#x27;h8004);</span><br><span class="line">    we3 = 0;</span><br><span class="line">    pcflag = 0;</span><br><span class="line">    regdst = 0;</span><br><span class="line">    alusrc = 2&#x27;b01;</span><br><span class="line">    mem_to_reg = 0;</span><br><span class="line">    j_flag = 0;</span><br><span class="line">    AluControl = 2&#x27;b00;</span><br><span class="line">end</span><br><span class="line">6&#x27;b001111: begin // lui</span><br><span class="line">    we = 0;</span><br><span class="line">    we3 = 1;</span><br><span class="line">    pcflag = 0;</span><br><span class="line">    regdst = 0;</span><br><span class="line">    alusrc = 2&#x27;b10;</span><br><span class="line">    mem_to_reg = 0;</span><br><span class="line">    j_flag = 0;</span><br><span class="line">    AluControl = 2&#x27;b10;</span><br><span class="line">end</span><br><span class="line">6&#x27;b001101: begin // ori</span><br><span class="line">    we = 0;</span><br><span class="line">    we3 = 1;</span><br><span class="line">    pcflag = 0;</span><br><span class="line">    regdst = 0;</span><br><span class="line">    alusrc = 2&#x27;b10;</span><br><span class="line">    mem_to_reg = 0;</span><br><span class="line">    j_flag = 0;</span><br><span class="line">    AluControl = 2&#x27;b01;</span><br><span class="line">end</span><br><span class="line">6&#x27;b001001: begin // addiu</span><br><span class="line">    we = 0;</span><br><span class="line">    we3 = 1;</span><br><span class="line">    pcflag = 0;</span><br><span class="line">    regdst = 0;</span><br><span class="line">    alusrc = 2&#x27;b01;</span><br><span class="line">    mem_to_reg = 0;</span><br><span class="line">    j_flag = 0;</span><br><span class="line">    AluControl = 2&#x27;b00;</span><br><span class="line">end</span><br><span class="line">..........</span><br></pre></td></tr></table></figure><h4 id="aluops.sv-2">2.ALUOps.sv</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">..........</span><br><span class="line">always_comb begin</span><br><span class="line">    case (AluControl)</span><br><span class="line">        2&#x27;b00: aluresult = alu1 + alu2; // 加法操作</span><br><span class="line">        2&#x27;b01: aluresult = alu1 | alu2; // ORI 操作</span><br><span class="line">        2&#x27;b10: aluresult = alu2 &lt;&lt; 16;  // LUI 操作</span><br><span class="line">        default: aluresult = 32&#x27;b0;</span><br><span class="line">    endcase</span><br><span class="line">end</span><br><span class="line">..........</span><br></pre></td></tr></table></figure><h4 id="顶层模块-1">3.顶层模块</h4><p>为了使 <code>lui</code> 指令工作，需要确保立即数在 <code>lui</code> 指令中的扩展方式正确。以下代码片段应在顶层模块的 <code>always_comb</code> 块中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">..........</span><br><span class="line">always_comb begin</span><br><span class="line">    extend = &#123;&#123;16&#123;imm[15]&#125;&#125;, imm&#125;;</span><br><span class="line">    extend_0 = &#123;imm, 16&#x27;b0&#125;; // 对于LUI指令，高16位是立即数，低16位为0</span><br><span class="line">    alu1 = RD1;</span><br><span class="line">    alu2 = (alusrc == 2&#x27;b00) ? RD2 : (alusrc == 2&#x27;b01) ? extend : extend_0;</span><br><span class="line">end</span><br><span class="line">..........</span><br></pre></td></tr></table></figure><p>以上增加的代码片段在 <code>ControlUnit.sv</code> 和 <code>ALUOps.sv</code> 中添加了对 <code>lui</code>、<code>ori</code> 和 <code>addiu</code> 指令的控制逻辑和操作，实现了对这三条 I-型指令的支持。在顶层模块中添加了立即数的扩展方式以支持 <code>lui</code> 指令。</p><h3 id="三addu-和-sltr-型指令">（三）addu 和 slt（R-型指令）</h3><h4 id="controllerunit.sv-2">1.ControllerUnit.sv</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">..........</span><br><span class="line">6&#x27;b001001: begin // addiu</span><br><span class="line">    we = 0;</span><br><span class="line">    we3 = 1;</span><br><span class="line">    pcflag = 0;</span><br><span class="line">    regdst = 0;</span><br><span class="line">    alusrc = 2&#x27;b01;</span><br><span class="line">    mem_to_reg = 0;</span><br><span class="line">    j_flag = 0;</span><br><span class="line">    AluControl = 2&#x27;b00;</span><br><span class="line">end</span><br><span class="line">6&#x27;b000000: begin // R-type</span><br><span class="line">    if(funct == 6&#x27;b100001) begin // addu</span><br><span class="line">        we = 0;</span><br><span class="line">        we3 = 1;</span><br><span class="line">        pcflag = 0;</span><br><span class="line">        regdst = 1;</span><br><span class="line">        alusrc = 2&#x27;b00;</span><br><span class="line">        mem_to_reg = 0;</span><br><span class="line">        j_flag = 0;</span><br><span class="line">        AluControl = 2&#x27;b00;</span><br><span class="line">    end</span><br><span class="line">    else if(funct == 6&#x27;b101010) begin // slt</span><br><span class="line">        we = 0;</span><br><span class="line">        we3 = 1;</span><br><span class="line">        pcflag = 0;</span><br><span class="line">        regdst = 1;</span><br><span class="line">        alusrc = 2&#x27;b00;</span><br><span class="line">        mem_to_reg = 0;</span><br><span class="line">        j_flag = 0;</span><br><span class="line">        AluControl = 2&#x27;b11;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">..........</span><br></pre></td></tr></table></figure><h4 id="aluops.sv-3">2.ALUOps.sv</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">..........</span><br><span class="line">always_comb begin</span><br><span class="line">    case (AluControl)</span><br><span class="line">        2&#x27;b00: aluresult = alu1 + alu2; // 加法操作</span><br><span class="line">        2&#x27;b01: aluresult = alu1 | alu2; // ORI 操作</span><br><span class="line">        2&#x27;b10: aluresult = alu2 &lt;&lt; 16;  // LUI 操作</span><br><span class="line">        2&#x27;b11: aluresult = (alu1 &lt; alu2) ? 32&#x27;b1 : 32&#x27;b0; // SLT 操作</span><br><span class="line">        default: aluresult = 32&#x27;b0;</span><br><span class="line">    endcase</span><br><span class="line">end</span><br><span class="line">..........</span><br></pre></td></tr></table></figure><h4 id="顶层模块-2">3.顶层模块</h4><p>顶层模块中，已包含了立即数扩展的代码，现需确保 <code>funct</code> 字段的操作也被正确处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">..........</span><br><span class="line">assign funct = Instruction[5:0];</span><br><span class="line">..........</span><br></pre></td></tr></table></figure><h3 id="四beqbne-和-j转移指令">（四）beq、bne 和 j（转移指令）</h3><h4 id="controllerunit.sv-3">1.ControllerUnit.sv</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">..........</span><br><span class="line">6&#x27;b000000: begin // R-type</span><br><span class="line">    if(funct == 6&#x27;b100001) begin // addu</span><br><span class="line">        we = 0;</span><br><span class="line">        we3 = 1;</span><br><span class="line">        pcflag = 0;</span><br><span class="line">        regdst = 1;</span><br><span class="line">        alusrc = 2&#x27;b00;</span><br><span class="line">        mem_to_reg = 0;</span><br><span class="line">        j_flag = 0;</span><br><span class="line">        AluControl = 2&#x27;b00;</span><br><span class="line">    end</span><br><span class="line">    else if(funct == 6&#x27;b101010) begin // slt</span><br><span class="line">        we = 0;</span><br><span class="line">        we3 = 1;</span><br><span class="line">        pcflag = 0;</span><br><span class="line">        regdst = 1;</span><br><span class="line">        alusrc = 2&#x27;b00;</span><br><span class="line">        mem_to_reg = 0;</span><br><span class="line">        j_flag = 0;</span><br><span class="line">        AluControl = 2&#x27;b11;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">6&#x27;b000100: begin // beq</span><br><span class="line">    we = 0;</span><br><span class="line">    we3 = 0;</span><br><span class="line">    pcflag = (RD1 == RD2);</span><br><span class="line">    regdst = 0;</span><br><span class="line">    alusrc = 2&#x27;b00;</span><br><span class="line">    mem_to_reg = 0;</span><br><span class="line">    j_flag = 0;</span><br><span class="line">    AluControl = 2&#x27;b00;</span><br><span class="line">end</span><br><span class="line">6&#x27;b000101: begin // bne</span><br><span class="line">    we = 0;</span><br><span class="line">    we3 = 0;</span><br><span class="line">    pcflag = (RD1 != RD2);</span><br><span class="line">    regdst = 0;</span><br><span class="line">    alusrc = 2&#x27;b00;</span><br><span class="line">    mem_to_reg = 0;</span><br><span class="line">    j_flag = 0;</span><br><span class="line">    AluControl = 2&#x27;b00;</span><br><span class="line">end</span><br><span class="line">6&#x27;b000010: begin // j</span><br><span class="line">    we = 0;</span><br><span class="line">    we3 = 0;</span><br><span class="line">    pcflag = 0;</span><br><span class="line">    regdst = 0;</span><br><span class="line">    alusrc = 2&#x27;b00;</span><br><span class="line">    mem_to_reg = 0;</span><br><span class="line">    j_flag = 1;</span><br><span class="line">    AluControl = 2&#x27;b00;</span><br><span class="line">end</span><br><span class="line">..........</span><br></pre></td></tr></table></figure><h4 id="addresscalculation.sv-2">2.AddressCalculation.sv</h4><p>在 <code>AddressCalculation</code> 模块中已处理条件分支和无条件跳转的逻辑，无需增加新的代码，只需确保现有代码正确计算跳转地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">..........</span><br><span class="line">always_comb begin</span><br><span class="line">    if (!j_flag) begin</span><br><span class="line">        if (!pcflag)</span><br><span class="line">            current_addr = next_addr + 4;</span><br><span class="line">        else</span><br><span class="line">            current_addr = next_addr + 4 + (extend &lt;&lt; 2);</span><br><span class="line">    end else begin</span><br><span class="line">        logic [31:0] mid = next_addr + 4;</span><br><span class="line">        current_addr = &#123;mid[31:28], instr_index, 2&#x27;b00&#125;;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">..........</span><br></pre></td></tr></table></figure><h4 id="顶层模块-3">3.顶层模块</h4><p>顶层模块中，已包含了对 <code>instr_index</code> 的处理代码，现需确保 <code>pcflag</code> 和 <code>j_flag</code> 信号被正确使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">..........</span><br><span class="line">assign instr_index = Instruction[25:0];</span><br><span class="line">..........</span><br><span class="line">always_comb begin</span><br><span class="line">    extend = &#123;&#123;16&#123;imm[15]&#125;&#125;, imm&#125;;</span><br><span class="line">    extend_0 = &#123;imm, 16&#x27;b0&#125;; // 对于LUI指令，高16位是立即数，低16位为0</span><br><span class="line">    alu1 = RD1;</span><br><span class="line">    alu2 = (alusrc == 2&#x27;b00) ? RD2 : (alusrc == 2&#x27;b01) ? extend : extend_0;</span><br><span class="line">    pc_src = pcflag;</span><br><span class="line">    next_pc = (j_flag) ? &#123;next_pc[31:28], instr_index, 2&#x27;b00&#125; : (pc_src ? (next_pc + 4 + (extend &lt;&lt; 2)) : (next_pc + 4));</span><br><span class="line">end</span><br><span class="line">..........</span><br></pre></td></tr></table></figure><h2 id="六实验结果">（六）实验结果</h2><p>仿真前加载相应的指令和数据，即分别加载XXX_inst.coe和XXX_data.coe</p><p><img src="./image-20240617190516561.png" alt="image-20240617190516561" style="zoom:80%;" /></p><p>我对仿真测试的代码进行了略微的修改，以便于测试重置后是否能够再次正常运行，修改部分如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">initial begin</span><br><span class="line">    // Initialize Inputs</span><br><span class="line">    sys_clk = 0;</span><br><span class="line">    sys_rst_n = 0;</span><br><span class="line">    #400</span><br><span class="line">    sys_rst_n = 1;     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //#15000 $stop;</span><br><span class="line">    #12000</span><br><span class="line">    sys_rst_n = 0;</span><br><span class="line">    #400</span><br><span class="line">    sys_rst_n = 1;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>仿真结果：</p><p><img src="./image-20240617190725392.png" alt="image-20240617190725392" style="zoom:80%;" /></p><p>远程平台验证结果：</p><p><img src="./image-20240617190758172.png" alt="image-20240617190758172" style="zoom:80%;" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数电 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网socket实验week4</title>
      <link href="/2024/06/14/%E8%AE%A1%E7%BD%91socket%E5%AE%9E%E9%AA%8Cweek4/"/>
      <url>/2024/06/14/%E8%AE%A1%E7%BD%91socket%E5%AE%9E%E9%AA%8Cweek4/</url>
      
        <content type="html"><![CDATA[<h1 id="一协议设计">一、协议设计</h1><p><strong>具体要求：</strong></p><p>当服务器在等待一个客户端发送下一个请求时，能够同时处理来自其它客户端的请求，使服务器能够同时处理多个并发的客户端。</p><p>注意：</p><ol type="1"><li><p>将服务器能够支持的最大连接数设置为 1024，这是操作系统可用文件描述符数量的最大值。</p></li><li><p>客户端可能会“暂停”（即请求发送了一半突然暂停）或出错，但这些问题不应对其他并发用户产生不良影响。也就是说，如果一个客户端只发送了请求的一半就停止了，那么服务端应继续为另一个客户端提供服务。</p></li><li><p>只能通过 select()方法实现并发，禁止使用多线程。</p></li></ol><h2 id="一协议头部">（一）协议头部</h2><p>在讨论并发的概念时，常常会提到另一个相关概念——并行。以下是对这两个概念的区分：</p><p><strong>并发（Concurrency）：</strong> 并发是指在不同时间点将任务交给处理器处理。在某一时刻，多个任务可能不会同时运行，但它们会在不同时间片轮流执行。</p><p><strong>并行（Parallelism）：</strong> 并行则是将每个任务分配给独立的处理器进行处理。在某一时刻，多个任务可以同时运行。</p><p>并发和并行有显著的区别。并行是在不同的物理处理器上同时执行不同的代码片段，其关键是同时完成多个任务。而并发则是同时管理多个任务，这些任务可能在执行过程中被暂停，以便处理其他任务。</p><figure><img src="./v2-7b3107ece3b8e47097ed0a7bee923299_720w.jpg" alt="理解并行与并发 - 知乎" /><figcaption aria-hidden="true">理解并行与并发 - 知乎</figcaption></figure><p>在现代服务器上，实现并发主要有两种方法：多线程同步阻塞和 I/O 多路复用。</p><p>如果服务器不做特别处理，每次只能处理一个连接。新的连接必须等待当前连接结束才能建立，这就是最初的同步阻塞方法。这种方式一次只能连接一对服务器和客户端。</p><p>为了提高处理效率，多线程同步阻塞方法应运而生。每次 <code>accept</code> 接受一个连接，就创建一个线程来处理该连接，这样就可以同时处理多个连接，这是经典的多线程同步阻塞方法。</p><p>然而，多线程同步阻塞并不理想，会导致资源浪费。每个 TCP 连接需要一个线程，10k 个连接需要 10k 个线程。然而，大部分连接并不活跃，即便需要处理业务逻辑，也可以快速返回结果，大部分时间都在 I/O 阻塞或等待网络响应。这使得创建和管理大量线程非常耗费资源，线程切换也极其耗费 CPU。最终，CPU 处理实际业务的时间少，大部分资源浪费在线程切换上。</p><p>I/O 多路复用方法则不同，它将阻塞的 socket 暂时放置一边，处理其他事情，从而避免资源浪费，这是非阻塞 I/O 的核心概念。</p><p>[123](./DALL·E 2024-06-14 02.21.34 - A diagram illustrating the process of handling I_O in concurrent servers. On the left side, labeled 'Application Process,' it shows multiple calls to .webp)</p><p>上图展示了调用 <code>recv</code> 时的情况。当用户进程发出 <code>read</code> 操作时，如果内核中的数据尚未准备好，系统不会阻塞用户进程，而是立即返回一个错误。用户进程不需要等待，而是立即知道数据尚未准备好，于是可以再次发送 <code>read</code> 操作。一旦内核中的数据准备好，再次接收到用户进程的系统调用，数据会立刻被拷贝到用户内存，然后返回。</p><p>I/O 多路复用的原理是不断检查多个 socket，当某个 socket 数据准备好时立即返回，否则整个进程继续阻塞。这样，一个进程可以在不耗费大量资源的情况下处理多个连接。这种轮询操作由内核态完成，从而减少内核态和用户态之间的切换。</p><h2 id="二协议规则">（二）协议规则</h2><p>具体实现的流程如下：</p><p>1）主进程采用 I/O 多路复用技术来监控多个 socket 资源。</p><p>2）当客户端尝试连接时，服务端会接受连接请求，并将其加入到监控列表中。</p><p>3）客户端与服务端之间的通信也会触发 I/O 复用函数返回。</p><p>4）服务端在循环中同时处理新的连接请求和已有连接的业务请求。</p><h2 id="三主要数据结构">（三）主要数据结构</h2><p>在本次第四周的 socket 实验中，我们引入了一个名为 <code>fdclient[]</code> 的数组数据结构，用作用户池。这个数组的定义和初始化如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> fdclient[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure><p>数组的大小设置为 1024，这是因为实验指导书中提到最大连接用户数为 1024。为了管理和操作这个用户池，我们使用了一个辅助索引 <code>fdptr</code>，其定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> fdptr = <span class="number">1024</span>;</span><br></pre></td></tr></table></figure><p><code>fdptr</code> 是一个整数变量，用来记录当前处理的用户在用户池中的位置。在处理用户连接的循环中，<code>fdptr</code> 会持续遍历 <code>fdclient[]</code> 数组中的所有用户，从而确保每个用户都能被正确处理和管理。</p><p>进一步解释：</p><ol type="1"><li><strong>用户池 (<code>fdclient[]</code>)</strong>: 这个数组用于存储每个连接的文件描述符。文件描述符是系统为每个连接分配的唯一标识符，用于跟踪和管理活动连接。</li><li><strong>辅助索引 (<code>fdptr</code>)</strong>: <code>fdptr</code> 是一个指针，指向当前正在处理的用户在 <code>fdclient[]</code> 数组中的位置。每次新的连接或需要处理现有连接时，<code>fdptr</code> 会更新以指向下一个用户，从而在循环中遍历所有连接。</li><li><strong>循环处理</strong>: 在服务器运行过程中，会进入一个循环，使用 <code>fdptr</code> 遍历 <code>fdclient[]</code> 数组中的每个用户，处理他们的连接请求和数据传输。这种方法确保了服务器能够高效地管理多个并发连接。</li></ol><h2 id="四相关算法">（四）相关算法</h2><p>本周的实验任务是确保服务器能够在等待一个客户端发送下一个请求的同时，处理来自其他客户端的请求，从而实现对多个并发客户端的支持。为实现这一目标，我们将使用 <code>select</code> 函数。</p><p><code>select</code> 是一个阻塞调用函数，允许我们监听多个文件描述符（socket）的状态，并在其中某个变为可读、可写或发生异常时返回。这样，服务器可以同时处理多个客户端连接，而无需为每个连接创建一个线程。</p><p><code>select</code> 函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">select</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="type">int</span> nfds,</span></span><br><span class="line"><span class="params">    fd_set *readfds,</span></span><br><span class="line"><span class="params">    fd_set *writefds,</span></span><br><span class="line"><span class="params">    fd_set *exceptfds,</span></span><br><span class="line"><span class="params">    <span class="type">const</span> <span class="keyword">struct</span> timeval *timeout</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>nfds</strong>：这个参数在现代实现中已被忽略，主要用于兼容性目的。</li><li><strong>readfds</strong>：指向一组等待可读性检查的文件描述符的集合。</li><li><strong>writefds</strong>：指向一组等待可写性检查的文件描述符的集合。</li><li><strong>exceptfds</strong>：指向一组等待异常状态检查的文件描述符的集合。</li><li><strong>timeout</strong>：指定 <code>select</code> 等待的最长时间，可以是 NULL 表示无限期阻塞。</li></ul><p><code>fd_set</code> 的理解：</p><p><code>fd_set</code> 是一个文件描述符集合，用于指定需要监听的文件描述符。可以将 <code>fd_set</code> 视为一个位数组，其中每一位表示一个文件描述符的状态。假设 <code>fd_set</code> 的大小为 1 字节，则可以表示最多 8 个文件描述符。如果 <code>sizeof(fd_set)</code> 为 512 字节，则可以表示 512 * 8 = 4096 个文件描述符。</p><p>使用 <code>select</code> 的步骤：</p><ol type="1"><li>初始化 <code>fd_set</code>：使用 <code>FD_ZERO</code> 宏清空集合，然后使用 <code>FD_SET</code> 宏添加需要监听的文件描述符。</li><li>调用 <code>select</code>：传递文件描述符集合以及超时时间，<code>select</code> 将阻塞直到其中一个文件描述符变为可读、可写或发生异常，或者超时。</li><li>处理返回结果：使用 <code>FD_ISSET</code> 宏检查哪个文件描述符准备好，并进行相应处理。</li></ol><p><code>select</code> 的性能注意事项：</p><ul><li><strong>内核态和用户态的拷贝开销</strong>：每次调用 <code>select</code>，都需要将文件描述符集合从用户态拷贝到内核态，这在文件描述符数量较多时会产生较大的开销。</li><li><strong>线性扫描</strong>：内核需要线性扫描整个 <code>fd_set</code> 集合，因此随着监控文件描述符数量的增加，I/O 性能会线性下降。</li></ul><h2 id="算法内容">算法内容</h2><ol type="1"><li><strong>初始化和创建套接字</strong><ul><li>创建服务器套接字并设置为非阻塞模式。</li><li>绑定服务器套接字到指定的地址和端口，并开始监听连接请求。</li></ul></li><li><strong>并发处理</strong><ul><li>使用 <code>select()</code> 方法监控多个文件描述符，等待它们变为可读或可写状态。</li><li>当一个新客户端连接时，接受连接并将客户端套接字设置为非阻塞模式。</li><li>将客户端套接字添加到文件描述符集合中，以便 <code>select()</code> 方法监控它们。</li></ul></li><li><strong>处理客户端请求</strong><ul><li>当客户端发送数据时，接收并处理请求，根据 HTTP 方法（GET、HEAD、POST）执行相应的操作。</li><li>如果接收到的请求不完整或出现错误，关闭客户端连接并从文件描述符集合中移除该客户端。</li><li>向客户端发送响应，包括错误信息（如 400、404、501 等）。</li></ul></li><li><strong>日志记录</strong><ul><li>在处理请求和发送响应时，记录每个请求的详细信息，包括请求的类型、来源 IP、时间等。</li><li>在出现错误时，记录错误信息和相关的详细信息。</li></ul></li></ol><h2 id="伪代码">伪代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">函数 main()</span><br><span class="line">    初始化服务器套接字</span><br><span class="line">    将套接字绑定到端口 9999</span><br><span class="line">    监听套接字</span><br><span class="line"></span><br><span class="line">    初始化 fd 集合用于 select()</span><br><span class="line">    将服务器套接字添加到 fd 集合</span><br><span class="line"></span><br><span class="line">    循环</span><br><span class="line">        复制 fd 集合以供 select() 使用</span><br><span class="line">        调用 select() 监视套接字</span><br><span class="line"></span><br><span class="line">        如果服务器套接字有新连接</span><br><span class="line">            处理新连接()</span><br><span class="line"></span><br><span class="line">        处理现有连接()</span><br><span class="line"></span><br><span class="line">    关闭服务器套接字</span><br><span class="line"></span><br><span class="line">函数 处理新连接()</span><br><span class="line">    接受新连接</span><br><span class="line">    将客户端套接字添加到 fd 集合</span><br><span class="line"></span><br><span class="line">函数 处理现有连接()</span><br><span class="line">    遍历 fd 集合中的每个套接字</span><br><span class="line">        如果套接字有数据可读</span><br><span class="line">            处理客户端()</span><br><span class="line"></span><br><span class="line">函数 处理客户端()</span><br><span class="line">    当客户端有数据可读</span><br><span class="line">        从客户端读取数据</span><br><span class="line">        解析 HTTP 请求</span><br><span class="line">        处理请求()</span><br><span class="line">        将响应发送回客户端</span><br><span class="line">        如果必要，关闭客户端连接</span><br><span class="line"></span><br><span class="line">函数 处理请求()</span><br><span class="line">    如果请求为空</span><br><span class="line">        发送 400 错误响应</span><br><span class="line">        记录错误日志</span><br><span class="line">    否则如果请求有效</span><br><span class="line">        检查 HTTP 版本</span><br><span class="line">        如果版本不支持</span><br><span class="line">            发送 505 错误响应</span><br><span class="line">            记录错误日志</span><br><span class="line">        否则</span><br><span class="line">            调用 use_method() 处理请求</span><br><span class="line">    否则</span><br><span class="line">        发送 501 错误响应</span><br><span class="line">        记录错误日志</span><br><span class="line"></span><br><span class="line">函数 关闭客户端()</span><br><span class="line">    从 fd 集合中移除客户端套接字</span><br><span class="line">    关闭客户端套接字</span><br><span class="line"></span><br><span class="line">函数 发送错误响应()</span><br><span class="line">    构造错误响应</span><br><span class="line">    将响应发送到客户端</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="四实验结果分析与测试">四、实验结果分析与测试</h1><p>ApacheBench（简称 ab）是 Apache 服务器附带的一个简单却强大的 Web 压力测试工具。它是一个命令行工具，能够通过创建大量并发访问线程模拟多个用户对特定 URL 地址的访问，从而测试目标服务器的负载能力。</p><p>工具特点</p><ul><li><strong>轻量化</strong>：ab 工具对发起负载的本机要求很低。</li><li><strong>易上手</strong>：命令行界面简单直观，学习曲线平缓。</li><li><strong>核心指标</strong>：能够提供基本的性能指标，如每秒请求数和每次请求的响应时间。</li><li><strong>缺点</strong>：不支持图形化结果展示，也不能实时监控。</li></ul><p>使用方法</p><p>ab 的基本命令格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">css</span><br><span class="line">复制代码</span><br><span class="line">ab [options] [http://]hostname[:port]/path</span><br></pre></td></tr></table></figure><p>其中，<code>options</code> 可以包括多种参数设置。在性能测试中，我们通常关注以下两个主要参数：</p><ul><li><code>-n</code>：设置测试中总共发起的请求数，即 Number of requests to perform。</li><li><code>-c</code>：设置一次产生的请求数（或并发数），即 Number of multiple requests to make。</li></ul><p>例如，要对 <code>http://example.com</code> 进行测试，总共发起 1000 个请求，并且同时产生 100 个并发请求，可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arduino</span><br><span class="line">复制代码</span><br><span class="line">ab -n 1000 -c 100 http://example.com/</span><br></pre></td></tr></table></figure><p>结果解释</p><p>运行上述命令后，ab 工具会输出详细的测试结果，其中最重要的几个指标包括：</p><ol type="1"><li><strong>Requests per second</strong>：<ul><li>该指标表示每秒钟处理的请求数，相当于性能测试工具 LoadRunner 中的每秒事务数。括号中的 <code>mean</code> 表示这是一个平均值。</li><li>计算公式：<code>Requests per second = 总请求数 / 总测试时间</code></li></ul></li><li><strong>Time per request</strong>：<ul><li>该指标表示平均每个请求的响应时间，相当于 LoadRunner 中的平均事务响应时间。括号中的 <code>mean</code> 表示这是一个平均值。</li><li>计算公式：<code>Time per request = 总测试时间 / 总请求数</code></li></ul></li><li><strong>Time per request (concurrent)</strong>：<ul><li>这一行显示的 <code>Time per request</code> 是每个连接请求实际运行时间的平均值。它的值等于上面行的 <code>Time per request</code> 除以并发数 <code>c</code>。</li><li>计算公式：<code>Time per request (concurrent) = Time per request / 并发数</code></li></ul></li></ol><p>修改好的代码可以同时执行两个客户端的请求，测试结果如下图：</p><figure><img src="./image-20240614045520028.png" alt="image-20240614045520028" /><figcaption aria-hidden="true">image-20240614045520028</figcaption></figure><p>在ab测试中，为了比较不同在并发数下我们的服务器的工作状态，我们选取 n=256，c 取 1,2,4,8,16,32,64,128,256 最后的测试</p><p>各种情况的截图如下</p><p>这是c=1</p><div><img src="./image-20240614045932695.png" alt="image-20240614045932695" style="zoom: 80%;" /><img src="./image-20240614045957702.png" alt="image-20240614045957702" style="zoom:80%;" /></div><p>接下来分别是c=2,4,8....</p><div><img src="./image-20240614050133110.png" alt="image-20240614050133110" style="zoom:80%;" /><img src="./image-20240614050204034.png" alt="image-20240614050204034" style="zoom:80%;" /></div><div><img src="./image-20240614050339310.png" alt="image-20240614050339310" style="zoom:80%;" /><img src="./image-20240614050413778.png" alt="image-20240614050413778" style="zoom:80%;" /></div><div><img src="./image-20240614050453866.png" alt="image-20240614050453866" style="zoom:80%;" /><img src="./image-20240614050521564.png" alt="image-20240614050521564" style="zoom:80%;" /></div><div><img src="./image-20240614050553165.png" alt="image-20240614050553165" style="zoom:80%;"></div><p>结果数据如下表所示</p><table><thead><tr class="header"><th>c</th><th>request per second</th><th>time per request1</th><th>time per request2</th></tr></thead><tbody><tr class="odd"><td>1</td><td>173.18</td><td>5.774</td><td>5.774</td></tr><tr class="even"><td>2</td><td>169.42</td><td>11.805</td><td>5.902</td></tr><tr class="odd"><td>4</td><td>177.76</td><td>22.503</td><td>5.626</td></tr><tr class="even"><td>8</td><td>27.08</td><td>295.372</td><td>36.922</td></tr><tr class="odd"><td>16</td><td>34.08</td><td>29.347</td><td>32.91</td></tr><tr class="even"><td>32</td><td>45.56</td><td>702.379</td><td>21.949</td></tr><tr class="odd"><td>64</td><td>42.88</td><td>1492.624</td><td>23.322</td></tr><tr class="even"><td>128</td><td>34.98</td><td>3659.200</td><td>33.78</td></tr></tbody></table><p>从表格中可以观察到，随着并发数的增加，我们的每秒请求数（Requests per second）也在不断增加。这意味着随着并发数的上升，每秒处理的事务数量也在增加。然而，当并发数达到32时，Requests per second达到了峰值，之后便开始下降。对于每个并发客户端的请求时间（Time per request）也是类似的趋势。一开始，随着并发数的增加，每个请求的平均处理时间在减少，直到并发数达到32时，Time per request达到最小值。随后，随着并发数的进一步增加，Time per request又开始上升，最终在并发数为256时达到了一个最高点。</p><h2 id="测试平台截屏">测试平台截屏</h2><figure><img src="./image-20240614051322143.png" alt="image-20240614051322143" /><figcaption aria-hidden="true">image-20240614051322143</figcaption></figure><h1 id="五进度总结未完成">五、进度总结（未完成）</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 计网实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网socket实验week3</title>
      <link href="/2024/06/14/%E8%AE%A1%E7%BD%91socket%E5%AE%9E%E9%AA%8Cweek3/"/>
      <url>/2024/06/14/%E8%AE%A1%E7%BD%91socket%E5%AE%9E%E9%AA%8Cweek3/</url>
      
        <content type="html"><![CDATA[<h1 id="三实验结果和分析">三、实验结果和分析</h1><p>启动服务器后，运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./liso_client 127.0.0.1 9999 samples/request_pipeline</span><br></pre></td></tr></table></figure><p>结果如下</p><figure><img src="./image-20240614015732195.png" alt="image-20240614015732195" /><figcaption aria-hidden="true">image-20240614015732195</figcaption></figure><h2 id="浏览器测试">浏览器测试</h2><h2 id="实验平台评测">实验平台评测</h2><figure><img src="./image-20240614021052262.png" alt="image-20240614021052262" /><figcaption aria-hidden="true">image-20240614021052262</figcaption></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 计网实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网socket实验week2</title>
      <link href="/2024/06/14/%E8%AE%A1%E7%BD%91socket%E5%AE%9E%E9%AA%8Cweek2/"/>
      <url>/2024/06/14/%E8%AE%A1%E7%BD%91socket%E5%AE%9E%E9%AA%8Cweek2/</url>
      
        <content type="html"><![CDATA[<h1 id="三实验结果和分析">三、实验结果和分析</h1><h2 id="get">GET</h2><p>以下分别为 GET 在 server 端（左边）和 client 端（右边）的实验结果。由于server端检查过长，所以只截屏了一部分</p><figure><img src="./image-20240614013828698.png" alt="image-20240614013828698" /><figcaption aria-hidden="true">image-20240614013828698</figcaption></figure><h2 id="head">HEAD</h2><p>下面这个分别为HEAD 在 server 端（左边）和 client 端（右边）的实验结果。</p><figure><img src="./image-20240614013918986.png" alt="image-20240614013918986" /><figcaption aria-hidden="true">image-20240614013918986</figcaption></figure><h2 id="post">POST</h2><p>下面这个分别为POST 在 server 端（左边）和 client 端（右边）的实验结果。</p><figure><img src="./image-20240614013947187.png" alt="image-20240614013947187" /><figcaption aria-hidden="true">image-20240614013947187</figcaption></figure><p>以下分别为几个错误类型在 client 端和 server 端的测试结果。</p><h2 id="section">400</h2><figure><img src="./image-20240614014112336.png" alt="image-20240614014112336" /><figcaption aria-hidden="true">image-20240614014112336</figcaption></figure><h2 id="section-1">501</h2><figure><img src="./image-20240614014153352.png" alt="image-20240614014153352" /><figcaption aria-hidden="true">image-20240614014153352</figcaption></figure><h2 id="section-2">505</h2><figure><img src="./image-20240614014211415.png" alt="image-20240614014211415" /><figcaption aria-hidden="true">image-20240614014211415</figcaption></figure><h2 id="日志模块的实现">日志模块的实现</h2><figure><img src="./image-20240614014459513.png" alt="image-20240614014459513" /><figcaption aria-hidden="true">image-20240614014459513</figcaption></figure><h2 id="测试平台结果">测试平台结果</h2><figure><img src="./image-20240614015810446.png" alt="image-20240614015810446" /><figcaption aria-hidden="true">image-20240614015810446</figcaption></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 计网实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网socket实验week1</title>
      <link href="/2024/06/11/%E8%AE%A1%E7%BD%91socket%E5%AE%9E%E9%AA%8Cweek1/"/>
      <url>/2024/06/11/%E8%AE%A1%E7%BD%91socket%E5%AE%9E%E9%AA%8Cweek1/</url>
      
        <content type="html"><![CDATA[<h1 id="一协议设计">一、协议设计</h1><p><strong>具体要求：</strong></p><ol type="1"><li><p>掌握课本有关 HTTP 的内容；阅读 HTTP/1.1 的标准文档 RFC2616[1]；</p></li><li><p>搭建编程环境（参见“讲解 PPT-环境安装配置.pptx）；</p></li><li><p>熟悉 Socket 编程方法；</p></li><li><p>掌握 lex 和 yacc[7]正确解析消息（message）的方法；</p></li><li><p>实现简单的 echo web server。</p></li></ol><h2 id="一代码源文件架构">（一）代码源文件架构</h2><p>文件目录结构</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">WEBSERVER</span><br><span class="line">│</span><br><span class="line">├── <span class="selector-class">.vscode</span>/</span><br><span class="line">├── cgi/</span><br><span class="line">├── include/</span><br><span class="line">│   └── parse<span class="selector-class">.h</span></span><br><span class="line">├── obj/</span><br><span class="line">├── samples/</span><br><span class="line">├── <span class="attribute">src</span>/</span><br><span class="line">│   ├── echo_client<span class="selector-class">.c</span></span><br><span class="line">│   ├── echo_server<span class="selector-class">.c</span></span><br><span class="line">│   ├── example<span class="selector-class">.c</span></span><br><span class="line">│   ├── lex<span class="selector-class">.yy</span><span class="selector-class">.c</span></span><br><span class="line">│   ├── lexer<span class="selector-class">.l</span></span><br><span class="line">│   ├── parse<span class="selector-class">.c</span></span><br><span class="line">│   ├── parser<span class="selector-class">.y</span></span><br><span class="line">│   ├── y<span class="selector-class">.tab</span><span class="selector-class">.c</span></span><br><span class="line">│   ├── y<span class="selector-class">.tab</span><span class="selector-class">.h</span></span><br><span class="line">│   ├── static_site/</span><br><span class="line">│   ├── DockerFile</span><br><span class="line">│   └── Makefile</span><br><span class="line">└── README<span class="selector-class">.md</span></span><br></pre></td></tr></table></figure><h4 id="代码源文件架构分析">代码源文件架构分析</h4><ol type="1"><li><strong>根目录文件</strong><ul><li><code>README.md</code>：包含项目的基本信息、使用方法和开发者指南。</li><li><code>Makefile</code>：用于编译和链接项目中的各个源文件，自动化构建流程。</li><li><code>DockerFile</code>：用于创建Docker镜像，提供一致的开发和部署环境。</li></ul></li><li><strong>.vscode目录</strong><ul><li>存放VS Code的配置文件，如任务、调试配置等。</li></ul></li><li><strong>cgi目录</strong><ul><li>用于存放CGI（Common Gateway Interface）相关的文件，实现动态网页生成。</li></ul></li><li><strong>include目录</strong><ul><li><code>parse.h</code>：头文件，声明解析器相关的函数和数据结构。</li></ul></li><li><strong>obj目录</strong><ul><li>存放编译生成的中间目标文件（object files），如<code>.o</code>文件。</li></ul></li><li><strong>samples目录</strong><ul><li>存放示例代码或测试样例。</li></ul></li><li><strong>src目录</strong><ul><li>源文件<ul><li><code>echo_client.c</code>：实现客户端代码，发送请求并接收服务器响应。</li><li><code>echo_server.c</code>：实现服务器代码，接收并处理客户端请求，返回响应。</li><li><code>example.c</code>：示例代码，用于展示如何使用某些功能或库。</li><li><code>lex.yy.c</code>：由<code>lexer.l</code>生成的词法分析器代码。</li><li><code>lexer.l</code>：词法分析器定义文件，定义如何将输入的文本流分解为标记（tokens）。</li><li><code>parse.c</code>：解析器代码，包含语法分析的实现。</li><li><code>parser.y</code>：语法分析器定义文件，使用Yacc或Bison生成解析器。</li><li><code>y.tab.c</code>：由<code>parser.y</code>生成的语法分析器代码。</li><li><code>y.tab.h</code>：由<code>parser.y</code>生成的语法分析器头文件，包含语法分析器使用的符号常量。</li></ul></li><li>静态站点文件<ul><li><code>static_site/</code>：存放静态网页文件，如HTML、CSS、JavaScript等。</li></ul></li></ul></li></ol><h4 id="功能模块分析">功能模块分析</h4><ol type="1"><li><strong>客户端模块（echo_client.c）</strong><ul><li>实现客户端功能，主要负责发送HTTP请求到服务器并接收响应。</li></ul></li><li><strong>服务器模块（echo_server.c）</strong><ul><li>实现服务器功能，主要负责接收和解析客户端请求，并返回相应的HTTP响应。</li><li>支持处理GET, HEAD, POST等HTTP方法，并返回相应的数据。</li></ul></li><li><strong>词法分析模块（lexer.l -&gt; lex.yy.c）</strong><ul><li>使用词法分析器将输入的文本流分解为标记，供语法分析器使用。</li></ul></li><li><strong>语法分析模块（parser.y -&gt; y.tab.c, y.tab.h）</strong><ul><li>使用语法分析器解析输入的标记序列，生成对应的语法树或执行相应的操作。</li><li>结合词法分析器，完成对HTTP请求的解析。</li></ul></li><li><strong>解析模块（parse.c, parse.h）</strong><ul><li>实现具体的解析逻辑，包括解析HTTP头部和消息体。</li><li>使用前面生成的词法和语法分析器，对输入消息进行全面解析。</li></ul></li></ol><h3 id="消息解析方法">消息解析方法</h3><h4 id="lex-和-yacc-介绍">Lex 和 Yacc 介绍</h4><ol type="1"><li>Lex（词法分析器生成器）：<ul><li><strong>作用</strong>：负责将输入的字符流分解成一个个标记（tokens），这些标记是语法分析器（Yacc）能够处理的基本单元。</li><li>工作原理：<ol type="1"><li><strong>定义词法规则</strong>：在<code>.l</code>文件中定义词法规则，描述不同标记的模式。</li><li><strong>生成词法分析器</strong>：使用Lex工具读取<code>.l</code>文件，生成相应的词法分析器代码（如<code>lex.yy.c</code>）。</li><li><strong>标记识别</strong>：运行词法分析器代码，将输入的字符流转换成标记序列。</li></ol></li></ul></li><li>Yacc（Yet Another Compiler-Compiler，语法分析器生成器）：<ul><li><strong>作用</strong>：负责根据词法分析器提供的标记序列，按照预定义的语法规则生成语法树，或执行相应的动作。</li><li>工作原理：<ol type="1"><li><strong>定义语法规则</strong>：在<code>.y</code>文件中定义语法规则，描述标记的组合方式。</li><li><strong>生成语法分析器</strong>：使用Yacc工具读取<code>.y</code>文件，生成相应的语法分析器代码（如<code>y.tab.c</code>和<code>y.tab.h</code>）。</li><li><strong>语法分析</strong>：运行语法分析器代码，解析标记序列，生成语法树或执行解析操作。</li></ol></li></ul></li></ol><h4 id="消息解析流程">消息解析流程</h4><ol type="1"><li>词法分析（Lex）：<ul><li><strong>输入</strong>：HTTP请求的字符流。</li><li><strong>输出</strong>：标记序列（如方法名、URL、HTTP版本、头部字段名、字段值等）。</li></ul></li><li>语法分析（Yacc）：<ul><li><strong>输入</strong>：Lex生成的标记序列。</li><li><strong>输出</strong>：解析后的语法树，或直接执行相应操作（如存储请求方法、路径、HTTP版本、头部字段等）。</li></ul></li><li>请求处理：<ul><li>根据语法分析器解析的结果，处理不同的HTTP方法（GET、HEAD、POST）。</li><li>对于未实现的方法，返回501 Not Implemented响应。</li><li>对于格式错误的请求，返回400 Bad Request响应。</li></ul></li></ol><h4 id="lex-和-yacc-工作流程图">Lex 和 Yacc 工作流程图</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">+--------------------------+</span><br><span class="line">|     HTTP 请求字符流      |</span><br><span class="line">+--------------------------+</span><br><span class="line">              |</span><br><span class="line">              v</span><br><span class="line">+--------------------------+</span><br><span class="line">|        Lex 词法分析       |</span><br><span class="line">+--------------------------+</span><br><span class="line">              |</span><br><span class="line">              v</span><br><span class="line">+--------------------------+</span><br><span class="line">|        标记序列          |</span><br><span class="line">+--------------------------+</span><br><span class="line">              |</span><br><span class="line">              v</span><br><span class="line">+--------------------------+</span><br><span class="line">|       Yacc 语法分析      |</span><br><span class="line">+--------------------------+</span><br><span class="line">              |</span><br><span class="line">              v</span><br><span class="line">+--------------------------+</span><br><span class="line">|     解析结果或语法树      |</span><br><span class="line">+--------------------------+</span><br><span class="line">              |</span><br><span class="line">              v</span><br><span class="line">+--------------------------+</span><br><span class="line">|     请求处理与响应生成    |</span><br><span class="line">+--------------------------+</span><br></pre></td></tr></table></figure><h1 id="二协议实现">二、协议实现</h1><h2 id="消息解析">1.消息解析</h2><p>在使用 <code>./example /samples/...</code> 进行测试时，发现 start code 中的代码只能解析 <code>request_line</code> 和单个 <code>request_head</code>，无法进一步解析多条 <code>request_head</code>。因此，该代码仅能正确处理 <code>sample_request_example</code>。</p><p>为了解析多条 <code>request_head</code>，我们需要修改 <code>parser.y</code> 中的 <code>request_header</code> 解析规则。关键在于正确使用 yacc 中的 <code>|</code> 符号，通过递归解析所有的 <code>request_header</code>。</p><p>在消息解析部分，还有一个重要任务是在 <code>parse.c</code> 中处理畸形请求。在 <code>parse.c</code> 中，有一个 <code>TODO</code> 是关于处理畸形请求（Handle Malformed Requests）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TODO Handle Malformed Requests</span></span><br></pre></td></tr></table></figure><p>为此，我们需要使用 <code>yystart</code> 语句来实现，并在解析完成后使用 <code>memset</code> 清空 <code>buf</code>。</p><p>另外，代码中的 <code>malloc</code> 语句一开始只分配了处理一行的内存（<code>malloc(sizeof(request_header) * 1)</code>），为了能够解析多个 <code>request_header</code>，我们需要将其修改为 19 行（<code>malloc(sizeof(request_header) * 19)</code>）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request-&gt;headers = (Request_header *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Request_header)*<span class="number">19</span>);</span><br></pre></td></tr></table></figure><p><font color = "blue">具体修改为：</font></p><p><strong>解析规则修改</strong>：在 <code>parser.y</code> 中，修改 <code>request_header</code> 的解析规则，使用 <code>|</code> 符号递归解析多条 <code>request_header</code>。</p><p><strong>处理畸形请求</strong>：在 <code>parse.c</code> 中，使用 <code>yystart</code> 语句处理畸形请求，并在解析完成后使用 <code>memset</code> 清空 <code>buf</code>。</p><p><strong>内存分配</strong>：将 <code>malloc(sizeof(request_header) * 1)</code> 修改为 <code>malloc(sizeof(request_header) * 19)</code>，以便解析多个 <code>request_header</code>。</p><h2 id="实现服务端与客户端的通信">2.实现服务端与客户端的通信</h2><p>服务端与客户端的通信可以分为两个部分：<code>echo_server</code> 和 <code>echo_client</code>。</p><h4 id="echo_client">1）echo_client</h4><p>Start code 中的 <code>echo_client</code> 部分实现较为完善，但在读取报文时使用了 <code>fgets</code> 函数，这种参数传递方式并不理想。更好的方法是通过 <code>open()</code> 将 <code>argv[3]</code> 中的内容读入 <code>fd_in</code>（文件描述符），然后通过 <code>read()</code> 将 <code>fd_in</code> 和缓冲区写入 <code>readRet</code>。</p><h4 id="echo_server">2）echo_server</h4><p>在 <code>echo_server</code> 部分，需要实现对 <code>GET</code>、<code>HEAD</code>、<code>POST</code> 请求的 echo 功能，以及对未实现请求返回 501 状态码和格式错误请求返回 400 状态码。以下是状态码的相关描述：</p><ul><li><strong>1xx</strong>: 报告的 - 接收到请求，继续处理。</li><li><strong>2xx</strong>: 成功 - 请求成功接收、理解并接受。</li><li><strong>3xx</strong>: 重定向 - 需要进一步操作以完成请求。</li><li><strong>4xx</strong>: 客户端错误 - 请求包含语法错误或无法完成。</li><li><strong>5xx</strong>: 服务器错误 - 服务器无法完成显然有效的请求。</li></ul><p>这些状态码和原因短语一起为客户端提供了响应信息，客户端只需检查状态码，不必解析原因短语。</p><p>Start code 中的 <code>echo_server</code> 部分已经基本实现，现在需要修改的是服务器在发现还有未处理的报文时的行为。</p><h4 id="伪代码实现">伪代码实现</h4><p>以下是服务端处理未处理报文时的<strong>伪代码</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ((readret = <span class="built_in">recv</span>(client_sock, buf, BUF_SIZE, <span class="number">0</span>)) &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    request = <span class="built_in">parse</span>(buf, readret, sock)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> request is <span class="literal">NULL</span>:</span><br><span class="line">        <span class="built_in">send</span>(client_sock, <span class="string">&quot;HTTP/1.1 400 Bad request\r\n\r\n&quot;</span>, <span class="number">50</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> request.http_method in [<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;HEAD&quot;</span>, <span class="string">&quot;GET&quot;</span>]:</span><br><span class="line">        <span class="built_in">send</span>(client_sock, buf, readret, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">send</span>(client_sock, <span class="string">&quot;HTTP/1.1 501 Not Implemented\r\n\r\n&quot;</span>, <span class="number">50</span>, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(request.headers)</span><br><span class="line">    <span class="built_in">free</span>(request)</span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="number">0</span>, BUF_SIZE)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> readret == <span class="number">-1</span>:</span><br><span class="line">    <span class="built_in">handle_error</span>(client_sock, sock, <span class="string">&quot;Error reading from client socket.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">close_socket</span>(client_sock):</span><br><span class="line">    <span class="built_in">handle_error</span>(sock, sock, <span class="string">&quot;Error closing client socket.&quot;</span>)</span><br></pre></td></tr></table></figure><p>为了改善 <code>echo_client</code> 的报文读取，使用 <code>open()</code> 将 <code>argv[3]</code> 中的内容读入文件描述符 <code>fd_in</code>，然后通过 <code>read()</code> 将 <code>fd_in</code> 和缓冲区写入 <code>readRet</code>。</p><p>在 <code>echo_server</code> 部分，需要实现对 <code>GET</code>、<code>HEAD</code>、<code>POST</code> 请求的 echo 功能，并对未实现的请求返回 501 状态码，对格式错误的请求返回 400 状态码。</p><p>在服务器发现未处理报文时，首先通过 <code>parse</code> 函数解析报文，如果请求为空，向 <code>client_sock</code> 发送 "HTTP/1.1 400 Bad request" 响应；如果请求为 <code>POST</code>、<code>HEAD</code>、<code>GET</code> 方法之一，则回显请求内容；否则，向 <code>client_sock</code> 发送 "HTTP/1.1 501 Not Implemented" 响应。最后，释放 <code>request</code> 相关的内存。</p><p>最后，修改 <code>echo_server.c</code> 文件的顶部包含 <code>parse.h</code>，以及MakeFile文件确保 <code>parse.h</code> 和 <code>parse.c</code> 在 <code>Makefile</code> 中的依赖关系</p><h1 id="三实验结果和分析">三、实验结果和分析</h1><h2 id="get">GET</h2><p>以下分别为 GET 在 server 端（左边）和 client 端（右边）的实验结果。由于server端检查过长，所以只截屏了一部分</p><figure><img src="./image-20240611185439064.png" alt="image-20240611185439064" /><figcaption aria-hidden="true">image-20240611185439064</figcaption></figure><figure><img src="./image-20240611185513598.png" alt="image-20240611185513598" /><figcaption aria-hidden="true">image-20240611185513598</figcaption></figure><h2 id="head">HEAD</h2><p>下面这个分别为HEAD 在 server 端（左边）和 client 端（右边）的实验结果。</p><figure><img src="./image-20240611185732114.png" alt="image-20240611185732114" /><figcaption aria-hidden="true">image-20240611185732114</figcaption></figure><h2 id="post">POST</h2><p>下面这个分别为POST 在 server 端（左边）和 client 端（右边）的实验结果。</p><figure><img src="./image-20240611185825141.png" alt="image-20240611185825141" /><figcaption aria-hidden="true">image-20240611185825141</figcaption></figure><p>以下分别为几个错误类型在 client 端和 server 端的测试结果。</p><h2 id="section">400</h2><figure><img src="./image-20240611185933016.png" alt="image-20240611185933016" /><figcaption aria-hidden="true">image-20240611185933016</figcaption></figure><h2 id="section-1">501</h2><figure><img src="./image-20240611190019458.png" alt="image-20240611190019458" /><figcaption aria-hidden="true">image-20240611190019458</figcaption></figure><h2 id="error">Error</h2><figure><img src="./image-20240611190149560.png" alt="image-20240611190149560" /><figcaption aria-hidden="true">image-20240611190149560</figcaption></figure><p>在自动测试平台上的结果如下图所示：</p><figure><img src="./image-20240611192952651.png" alt="image-20240611192952651" /><figcaption aria-hidden="true">image-20240611192952651</figcaption></figure><h1 id="四.进度总结">四.进度总结</h1><p><strong>本周任务完成表</strong></p><p>在“完成”“没完成”列对应打“√”</p><table><thead><tr class="header"><th>本周任务要求</th><th>完成</th><th>没完成</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>1、阅读HTTP/1.1的标准文档RFC2616</td><td>√</td><td></td><td></td></tr><tr class="even"><td>2、搭建编程环境</td><td>√</td><td></td><td></td></tr><tr class="odd"><td>3、熟悉Socket编程方法；</td><td>√</td><td></td><td></td></tr><tr class="even"><td>4、掌握lex和yacc正确解析消息（message）的方法</td><td>√</td><td></td><td></td></tr><tr class="odd"><td>5.1实现简单的echo web server。Echo GET, HEAD, POST</td><td>√</td><td></td><td></td></tr><tr class="even"><td>5.2 响应没有实现的方法</td><td>√</td><td></td><td></td></tr><tr class="odd"><td>5.3 响应错误的方法</td><td>√</td><td></td><td></td></tr><tr class="even"><td>6、功能测试</td><td>√</td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 计网实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wireSharkLab</title>
      <link href="/2024/06/07/wireSharkLab/"/>
      <url>/2024/06/07/wireSharkLab/</url>
      
        <content type="html"><![CDATA[<h1 id="实验一getstarted">实验一、GetStarted</h1><p>本次实验的主要目标是向你介绍 Wireshark。以下问题将展示你已经能够启动并运行 Wireshark，并且已经探索了它的一些功能。根据你的 Wireshark 实验回答以下问题：</p><blockquote><ol type="1"><li>在上面第7步的未过滤数据包列表窗口中列出出现在协议列中的3种不同的协议。</li></ol></blockquote><p>分别有SSDP、DNS、ICMPv6，如下图</p><p><img src="./image-20240608010240201.png" alt="image-20240608010240201" style="zoom:80%;" /></p><blockquote><ol start="2" type="1"><li>从发送 HTTP GET 消息到接收 HTTP OK 回复花了多长时间？（默认情况下，数据包列表窗口中的时间列的值是 Wireshark 跟踪开始以来的时间，以秒为单位。要以时间格式显示时间字段，选择 Wireshark 查看下拉菜单，然后选择时间显示格式，然后选择时间格式。）</li></ol></blockquote><p><img src="./image-20240608010755604.png" alt="image-20240608010755604" style="zoom:80%;" /></p><p>由上图可知，中间间隔了大概0.2s</p><blockquote><ol start="3" type="1"><li>gaia.cs.umass.edu 的互联网地址是什么（也称为 www-net.cs.umass.edu）？你计算机的互联网地址是什么？</li></ol></blockquote><p><img src="./image-20240608011107832.png" alt="image-20240608011107832" style="zoom:80%;" /></p><p>在 Wireshark 中，选中 HTTP GET 请求数据包后，在数据包详细信息窗口中可以找到以下信息：</p><ul><li><strong>源 IP 地址</strong>：这就是我的计算机的互联网地址172.18.168.120。</li><li><strong>目的 IP 地址</strong>：这就是 gaia.cs.umass.edu 的互联网地址128.119.245.12。</li></ul><blockquote><ol start="4" type="1"><li>打印上面第2题中提到的两个 HTTP 消息（GET 和 OK）。为此，从 Wireshark 文件命令菜单中选择打印，然后选择“仅选定的数据包”和“按显示打印”单选按钮，然后点击确定。</li></ol></blockquote><p>打印结果如下：</p><p><img src="./image-20240608011854689.png" alt="image-20240608011854689" style="zoom:80%;" /></p><h1 id="实验二http">实验二、HTTP</h1><h2 id="一the-basic-http-getresponse-interaction">一、The Basic HTTP GET/response interaction</h2><p>根据步骤的要求实验结果截屏如下</p><figure><img src="./image-20240608014619648.png" alt="image-20240608014619648" /><figcaption aria-hidden="true">image-20240608014619648</figcaption></figure><p>问答问题如下：</p><p><img src="./image-20240608020350934.png" alt="image-20240608020350934" style="zoom:80%;" /></p><blockquote><p>1.<strong>您的浏览器运行的是HTTP 1.0还是1.1版本？服务器运行的是哪个版本的HTTP？</strong></p></blockquote><ul><li>浏览器运行的是HTTP/1.1版本：<ul><li>位于第一条记录的第2行：“Wireshark-file1.html HTTP/1.1”</li></ul></li><li>服务器运行的是HTTP/1.1版本：<ul><li>位于第二条记录的第3行：“HTTP/1.1 200 OK (text/html)”</li></ul></li></ul><blockquote><p>2.<strong>您的浏览器向服务器指示它可以接受哪些语言（如果有）？</strong></p></blockquote><ul><li>位于第一条记录的第13行：“Accept-Language: zh-CN,zh;q=0.9,en;q=0.8”</li></ul><blockquote><p>3.<strong>您的计算机的IP地址是什么？gaia.cs.umass.edu服务器的IP地址是什么？</strong></p></blockquote><ul><li>您的计算机IP地址：<ul><li>位于第一条记录的第5行：“Src: 172.18.168.120”</li></ul></li><li>服务器IP地址：<ul><li>位于第一条记录的第5行：“Dst: 128.119.245.12”</li></ul></li></ul><blockquote><p>4.<strong>服务器返回给您的浏览器的状态代码是什么？</strong></p></blockquote><p>位于第二条记录的第9行：“Status Code: 200”</p><blockquote><p>5.<strong>您正在检索的HTML文件在服务器上最后一次修改是什么时候？</strong></p></blockquote><p>位于第二条记录的第14行：“Last-Modified: Fri, 07 Jun 2024 02:59:02 GMT”</p><blockquote><p>6.<strong>服务器向您的浏览器返回了多少字节的内容？</strong></p></blockquote><p>位于第二条记录的第18行：“Content-Length: 128”</p><blockquote><p>7.<strong>通过检查数据包内容窗口中的原始数据，您是否看到数据中有任何在数据包列表窗口中未显示的标头？如果有，请列出一个。</strong></p></blockquote><p>从图片上看，所有标头都已显示在列表窗口中，没有看到未显示的标头。</p><h2 id="二the-http-conditional-getresponse-interaction">二、The HTTP CONDITIONAL GET/response interaction</h2><figure><img src="./Page1.png" alt="Page1" /><figcaption aria-hidden="true">Page1</figcaption></figure><figure><img src="./image-20240608021913091.png" alt="image-20240608021913091" /><figcaption aria-hidden="true">image-20240608021913091</figcaption></figure><blockquote><p>8.<strong>检查浏览器发送到服务器的第一个HTTP GET请求的内容。您是否看到HTTP GET中的“IF-MODIFIED-SINCE”行？</strong></p></blockquote><p>没有看到“IF-MODIFIED-SINCE”行。</p><ul><li>参考位置：在第一条记录中，从第1行到第12行没有“IF-MODIFIED-SINCE”行。</li></ul><blockquote><p>9.<strong>检查服务器响应的内容。服务器是否显式返回了文件内容？您如何判断？</strong></p></blockquote><p>是的，服务器显式返回了文件内容。</p><ul><li>参考位置：在第二条记录中，第8行显示“Status Code: 200”，并且第12行到第22行显示了文件内容的详细信息（包括Content-Length: 371）。</li></ul><blockquote><p>10.<strong>现在检查浏览器发送到服务器的第二个HTTP GET请求的内容。您是否看到HTTP GET中的“IF-MODIFIED-SINCE:”行？如果有，此标头后面跟随了哪些信息？</strong></p></blockquote><p>是的，看到“IF-MODIFIED-SINCE:”行。</p><ul><li>参考位置：在第三条记录中，第13行显示“IF-MODIFIED-SINCE: Fri, 07 Jun 2024 05:59:02 GMT”。</li></ul><blockquote><p>11.<strong>服务器在响应第二个HTTP GET请求时返回的HTTP状态代码和短语是什么？服务器是否显式返回了文件内容？解释。</strong></p></blockquote><p>HTTP状态代码是304 Not Modified，服务器没有显式返回文件内容。</p><ul><li>参考位置：在第四条记录中，第7行显示“Status Code: 304”，第8行显示“Response Phrase: Not Modified”。</li></ul><h2 id="三retrieving-long-documents">三、Retrieving Long Documents</h2><figure><img src="./image-20240610001629922.png" alt="image-20240610001629922" /><figcaption aria-hidden="true">image-20240610001629922</figcaption></figure><blockquote><p>12.<strong>您的浏览器发送了多少条HTTP GET请求消息？哪个数据包编号包含《权利法案》的GET消息？</strong></p></blockquote><p>浏览器发送了两条HTTP GET请求消息。包含《权利法案》的GET消息的数据包编号是118和164。</p><ul><li>参考位置：在第一条记录中，第1行显示数据包编号118，第四条记录中，第1行显示数据包编号164。</li></ul><blockquote><p>13.<strong>哪个数据包编号包含与HTTP GET请求响应关联的状态代码和短语？</strong></p></blockquote><p>数据包编号127和172包含与HTTP GET请求响应关联的状态代码和短语。</p><ul><li>参考位置：在第二条记录中，第1行显示数据包编号127，第五条记录中，第1行显示数据包编号172。</li></ul><blockquote><p>14.<strong>响应中的状态代码和短语是什么？</strong></p></blockquote><p>状态代码是200 OK。</p><ul><li>参考位置：在第二条记录中，第3行显示“HTTP/1.1 200 OK (text/html)”，第五条记录中，第3行显示“HTTP/1.1 200 OK (text/html)”。</li></ul><blockquote><p>15.<strong>需要多少包含数据的TCP段来承载单个HTTP响应和《权利法案》的文本？</strong></p></blockquote><p>需要四个包含数据的TCP段来承载单个HTTP响应和《权利法案》的文本。</p><ul><li>参考位置：在第二条记录中，第9行显示“4 Reassembled TCP Segments (4861 bytes)”，第五条记录中，第9行显示“4 Reassembled TCP Segments (4861 bytes)”。</li></ul><h2 id="四包含嵌入对象的html文档">四、包含嵌入对象的HTML文档</h2><figure><img src="./image-20240610003729656.png" alt="image-20240610003729656" /><figcaption aria-hidden="true">image-20240610003729656</figcaption></figure><blockquote><p>16.<strong>您的浏览器发送了多少条HTTP GET请求消息？这些GET请求发送到哪些互联网地址？</strong></p></blockquote><p>浏览器发送了四条HTTP GET请求消息。这些GET请求发送到的互联网地址是：128.119.245.12 和 128.79.137.164。</p><p>参考位置：</p><ul><li>第一条记录，第1行显示数据包编号59，目标地址是128.119.245.12。</li><li>第三条记录，第1行显示数据包编号65，目标地址是128.119.245.12。</li><li>第五条记录，第1行显示数据包编号80，目标地址是128.119.245.12。</li><li>第七条记录，第1行显示数据包编号96，目标地址是128.79.137.164。</li></ul><blockquote><p>17.<strong>您能判断您的浏览器是串行下载这两个图像，还是从两个网站并行下载？解释。</strong></p></blockquote><p><strong>浏览器是串行下载这两个图像的。</strong></p><p>解释：</p><ul><li>时间戳显示，第二个GET请求（数据包96）是在第一个GET请求（数据包65）完成并收到响应（数据包73和84）之后发送的。这表明浏览器在处理第一个请求完成后才开始处理第二个请求，说明下载过程是串行的。</li></ul><h2 id="五http身份验证">五、HTTP身份验证</h2><figure><img src="./image-20240610005603834.png" alt="image-20240610005603834" /><figcaption aria-hidden="true">image-20240610005603834</figcaption></figure><figure><img src="./image-20240610005611363.png" alt="image-20240610005611363" /><figcaption aria-hidden="true">image-20240610005611363</figcaption></figure><blockquote><p>18.<strong>服务器对来自您的浏览器的初始HTTP GET消息的响应是什么（状态代码和短语）？</strong></p></blockquote><p>服务器的响应是401 Unauthorized。</p><ul><li><strong>参考位置</strong>：第二条记录，第3行显示“HTTP/1.1 401 Unauthorized”。</li></ul><blockquote><p>19.<strong>当您的浏览器第二次发送HTTP GET消息时，HTTP GET消息中包含了什么新字段？</strong></p></blockquote><p>第二次发送的HTTP GET消息中包含了“Authorization”字段。</p><ul><li><strong>参考位置</strong>：数据包2469，第11行显示“Authorization: Basic d2lyZXNoYXJrLXN0dWRlbnRzOm5ldHdvcms=”。</li></ul><h1 id="实验三tcp">实验三、TCP</h1><h2 id="一a-first-look-at-the-captured-trace">一、A first look at the captured trace</h2><blockquote><p>1.客户端计算机（源）的IP地址和TCP端口号是什么？</p></blockquote><figure><img src="./image-20240610012023256.png" alt="image-20240610012023256" /><figcaption aria-hidden="true">image-20240610012023256</figcaption></figure><p>根据HTTP/POST下的字段可以发现，源IP地址为172.18.168.120，TCP端口号为7847</p><blockquote><p>2.gaia.cs.umass.edu的IP地址是什么？它在这个连接中发送和接收TCP段的端口号是多少？</p></blockquote><figure><img src="./image-20240610012255568.png" alt="image-20240610012255568" /><figcaption aria-hidden="true">image-20240610012255568</figcaption></figure><p>还是刚刚的内容下方便可以找到，目标IP地址为128.119.245.12，目标端口号为80</p><blockquote><p>3.如果你已创建自己的跟踪文件，请回答客户端计算机（源）的IP地址和TCP端口号是什么？</p></blockquote><figure><img src="./image-20240610012849946.png" alt="image-20240610012849946" /><figcaption aria-hidden="true">image-20240610012849946</figcaption></figure><p>下载并打开跟踪文件，可以看到源IP地址为192.168.1.102，TCP端口号为1161</p><h2 id="二tcp基础">二、TCP基础</h2><blockquote><p>4.用于启动客户端计算机和gaia.cs.umass.edu之间TCP连接的TCP SYN段的序列号是多少？该段中是什么标识段为SYN段？</p></blockquote><figure><img src="./image-20240610013118719.png" alt="image-20240610013118719" /><figcaption aria-hidden="true">image-20240610013118719</figcaption></figure><p>序列号为0，标志位是0x002，代表是SYN段</p><blockquote><p>5.gaia.cs.umass.edu发送给客户端计算机以回复SYN的SYNACK段的序列号是多少？SYNACK段中的确认字段的值是多少？gaia.cs.umass.edu是如何确定该值的？该段中是什么标识段为SYNACK段？</p></blockquote><figure><img src="./image-20240610013413738.png" alt="image-20240610013413738" /><figcaption aria-hidden="true">image-20240610013413738</figcaption></figure><p>相对序列号为0，确认字段为相对序列号+1，是1. 标志位是0x012，代表这是一个SYN，ACK段</p><blockquote><p>6.包含HTTP POST命令的TCP段的序列号是多少？</p></blockquote><figure><img src="./image-20240610013659129.png" alt="image-20240610013659129" /><figcaption aria-hidden="true">image-20240610013659129</figcaption></figure><p>找到包含HTTP POST命令的TCP段。可以通过在“Info”列中找到包含“POST”的条目。发现其序列号为164041</p><blockquote><p>7.将包含HTTP POST的TCP段视为TCP连接中的第一个段。前六个段的序列号是多少（包括包含HTTP POST的段）？每个段在何时发送？每个段的确认在何时收到？考虑每个TCP段发送和收到其确认之间的时间差，每个段的RTT值是多少？每个确认收到后EstimatedRTT值是多少？</p></blockquote><figure><img src="./image-20240610014211540.png" alt="image-20240610014211540" /><figcaption aria-hidden="true">image-20240610014211540</figcaption></figure><p>通过点击每个TCP段的信息可以得到，前六个段的序列号分别是164091、1、1、1、164091、0</p><p>第一段（HTTP POST命令段）</p><ul><li><strong>序列号</strong>：104</li><li><strong>发送时间</strong>：21:44:25.867722</li><li><strong>确认时间</strong>：21:44:25.959852</li><li><strong>RTT值</strong>：21:44:25.959852 - 21:44:25.867722 = 0.09213 秒</li><li><strong>EstimatedRTT值</strong>：初始值为RTT值，即0.09213秒</li></ul><p>第二段</p><ul><li><strong>序列号</strong>：1</li><li><strong>发送时间</strong>：21:44:25.867738</li><li><strong>确认时间</strong>：21:44:26.018268</li><li><strong>RTT值</strong>：21:44:26.018268 - 21:44:25.867738 = 0.15053 秒</li><li><strong>EstimatedRTT值</strong>：0.875 * 0.09213 + 0.125 * 0.15053 = 0.09923秒</li></ul><p>第三段</p><ul><li><strong>序列号</strong>：1</li><li><strong>发送时间</strong>：21:44:26.018268</li><li><strong>确认时间</strong>：21:44:26.026211</li><li><strong>RTT值</strong>：21:44:26.026211 - 21:44:26.018268 = 0.00794 秒</li><li><strong>EstimatedRTT值</strong>：0.875 * 0.09923 + 0.125 * 0.00794 = 0.08931秒</li></ul><p>第四段</p><ul><li><strong>序列号</strong>：1</li><li><strong>发送时间</strong>：21:44:26.018268</li><li><strong>确认时间</strong>：21:44:26.221522</li><li><strong>RTT值</strong>：21:44:26.221522 - 21:44:26.018268 = 0.20325 秒</li><li><strong>EstimatedRTT值</strong>：0.875 * 0.08931 + 0.125 * 0.20325 = 0.10397秒</li></ul><p>第五段（HTTP 200 OK）</p><ul><li><strong>序列号</strong>：784</li><li><strong>发送时间</strong>：21:44:26.221522</li><li><strong>确认时间</strong>：未显示</li><li><strong>RTT值</strong>：未显示</li><li><strong>EstimatedRTT值</strong>：继续使用上一段的EstimatedRTT值，即0.10397秒</li></ul><p>第六段</p><ul><li><strong>序列号</strong>：1</li><li><strong>发送时间</strong>：21:44:26.221522</li><li><strong>确认时间</strong>：未显示</li><li><strong>RTT值</strong>：未显示</li><li><strong>EstimatedRTT值</strong>：继续使用上一段的EstimatedRTT值，即0.10397秒</li></ul><blockquote><p>8.前六个TCP段的长度是多少？</p></blockquote><figure><img src="./image-20240610015408184.png" alt="image-20240610015408184" /><figcaption aria-hidden="true">image-20240610015408184</figcaption></figure><p>第一个段（HTTP POST命令段）：104字节</p><p>第二个段：60字节</p><p>第三个段：60字节</p><p>第四个段：60字节</p><p>第五个段（HTTP 200 OK）：784字节</p><p>第六个段：54字节</p><blockquote><p>9.在整个跟踪记录中，接收方广告的最小可用缓冲区空间是多少？接收方缓冲区空间的不足是否曾经限制了发送方？</p></blockquote><figure><img src="./image-20240610015711835.png" alt="image-20240610015711835" /><figcaption aria-hidden="true">image-20240610015711835</figcaption></figure><p>我找到的最小的缓冲空间大小为5840，没有窗口大小为0的情况，因此接收方缓冲区空间未曾限制发送方。</p><blockquote><p>10.跟踪文件中是否有任何重传的段？你检查了（在跟踪中）什么来回答这个问题？</p></blockquote><p>选择一个标记为“[TCP Retransmission]”的段，查看其详细信息。确认该段的序列号与之前的段相同，表示这是一个重传段。</p><p>但我没有找到含有“[TCP Retransmission]”的段，因此没有任何重传的段</p><blockquote><p>11.接收方通常在一个ACK中确认多少数据？你能识别出接收方每接收两个段就确认一次的情况吗？</p></blockquote><figure><img src="./image-20240610020552227.png" alt="image-20240610020552227" /><figcaption aria-hidden="true">image-20240610020552227</figcaption></figure><p>还是根据之前的截图，得出结论</p><ol type="1"><li>第一个ACK段<ul><li>确认号：159389</li></ul></li><li>第二个ACK段<ul><li>确认号：162309</li><li>确认的数据量：162309 - 159389 = 2920字节</li></ul></li><li>第三个ACK段<ul><li>确认号：164041</li><li>确认的数据量：164041 - 162309 = 1732字节</li></ul></li><li>第四个ACK段<ul><li>确认号：164091</li><li>确认的数据量：164091 - 164041 = 50字节</li></ul></li><li>第五个ACK段<ul><li>确认号：164091（没有变化）</li><li>确认的数据量：0字节</li></ul></li></ol><p><strong>是否存在每接收两个段就确认一次的情况</strong>：</p><p>通过检查确认号，可以看到ACK段的确认号在大多数情况下是递增的，每个ACK段确认不同数量的数据。并且可以看到每个ACK段并不一定是每接收两个段就确认一次，而是依据接收的数据量和具体的传输情况。</p><blockquote><p>12.TCP连接的吞吐量（每单位时间传输的字节数）是多少？解释你是如何计算这个值的。</p></blockquote><p>第一个TCP数据段</p><figure><img src="./image-20240610021412345.png" alt="image-20240610021412345" /><figcaption aria-hidden="true">image-20240610021412345</figcaption></figure><figure><img src="./image-20240610021450522.png" alt="image-20240610021450522" /><figcaption aria-hidden="true">image-20240610021450522</figcaption></figure><p>可以看到其序列号是566</p><p>最后一个TCP数据段</p><figure><img src="./image-20240610021530636.png" alt="image-20240610021530636" /><figcaption aria-hidden="true">image-20240610021530636</figcaption></figure><p>可以看到其序列号是164091</p><ul><li>第一个数据段：<ul><li>序列号：566</li><li>发送时间：2004-08-21 21:44:20.612118</li></ul></li><li>最后一个数据段：<ul><li>序列号：164091</li><li>发送时间：2004-08-21 21:44:26.221522</li></ul></li></ul><p>计算方法：</p><ol type="1"><li><strong>确定传输的数据量</strong>：<ul><li>传输的数据量 = 最后一个数据段的序列号 - 第一个数据段的序列号 + 最后一个数据段的长度</li><li>传输的数据量 = 164091 - 566 + 54（假设最后一个数据段的长度为54字节）</li><li>传输的数据量 = 164091 - 566 + 54 = 163579字节</li></ul></li><li><strong>确定传输的时间</strong>：<ul><li>传输的时间 = 最后一个数据段的时间 - 第一个数据段的时间</li><li>传输的时间 = 21:44:26.221522 - 21:44:20.612118</li><li>传输的时间 = 5.609404秒</li></ul></li><li><strong>计算吞吐量</strong>：<ul><li>吞吐量（字节/秒）= 传输的数据量 / 传输的时间</li><li>吞吐量 = 163579字节 / 5.609404秒</li><li>吞吐量 ≈ 29166.61 字节/秒</li></ul></li></ol><p>结果：</p><p>TCP连接的吞吐量约为 29166.61 字节/秒。</p><h2 id="三-tcp拥塞控制的实际应用">三、 TCP拥塞控制的实际应用</h2><p><img src="./image-20240610023619971.png" alt="image-20240610023619971" style="zoom:50%;" /></p><blockquote><p>13.使用时间序列图（Stevens）绘图工具查看从客户端发送到gaia.cs.umass.edu服务器的段的序列号与时间的关系图。你能识别出TCP的慢启动阶段开始和结束的位置，以及拥塞避免接管的位置吗？评论测量数据与我们在教材中研究的TCP理想化行为的不同之处。</p></blockquote><p><font color = "blue"><strong>慢启动阶段</strong></font></p><ol type="1"><li><strong>开始位置</strong>：慢启动阶段始于TCP连接的开始，也就是三次握手完成后的第一个数据包发送。</li><li>特征：<ul><li>发送窗口大小从一个段开始，并以指数级增长。</li><li>每次接收到一个ACK，发送窗口大小加倍。</li></ul></li></ol><p><font color = "blue"><strong>拥塞避免阶段</strong></font></p><ol type="1"><li><strong>结束位置</strong>：慢启动阶段结束时，拥塞窗口大小达到慢启动阈值（ssthresh）。</li><li><strong>开始位置</strong>：拥塞避免阶段开始于慢启动阶段结束之后。</li><li>特征：<ul><li>发送窗口大小以线性增长（每个RTT增加一个MSS）。</li><li>每次接收到一个ACK，发送窗口大小增加一个MSS/MSS。</li></ul></li></ol><p><font color = "blue"><strong>测量数据与理想化TCP行为的不同之处</strong></font></p><ol type="1"><li>丢包和重传：<ul><li>在实际网络中，由于网络拥塞、线路质量等原因，数据包可能会丢失或延迟，导致重传。</li><li>在理想化的TCP模型中，假设网络没有丢包且传输是连续的。</li></ul></li><li>网络拥塞：<ul><li>实际网络中，网络拥塞会影响RTT和吞吐量，导致拥塞窗口大小的调整。</li><li>理想化模型中，假设网络拥塞情况较少。</li></ul></li><li>ACK延迟：<ul><li>实际中，接收方可能会延迟发送ACK，从而影响发送方的拥塞窗口调整。</li><li>理想化模型假设ACK立即返回。</li></ul></li></ol><blockquote><p>14.在你从计算机向gaia.cs.umass.edu传输文件时，回答上述两个问题。</p></blockquote><p>识别方法和上面类似，具体来讲</p><p>实际数据中的识别</p><ol type="1"><li><strong>慢启动阶段</strong>：<ul><li>在Wireshark的时间序列图中，从数据包发送的开始（例如，时间点为21:44:20）到某个时间点（例如，21:44:25），可以看到序列号随时间以指数级增长。</li><li>具体来说，如果在第一个RTT内（假设RTT为100ms）发送了1个数据包，第二个RTT内发送了2个数据包，第三个RTT内发送了4个数据包，这表明这是慢启动阶段。</li></ul></li><li><strong>拥塞避免阶段</strong>：<ul><li>当时间序列图中的增长趋势从指数级变为线性（例如，从21:44:25到21:44:30），可以看到每个RTT内发送的数据包数量增长变得较慢。</li><li>例如，在这个阶段，每个RTT内发送的数据包数量增加一个固定的数量（例如，每个RTT增加一个MSS）。</li></ul></li></ol><p>比较实际测量数据与理想化TCP行为的不同之处</p><ol type="1"><li><strong>丢包和重传</strong>：<ul><li>实际网络中，由于网络拥塞、线路质量等原因，数据包可能会丢失或延迟，导致重传。这会导致拥塞窗口的调整和传输速率的波动。</li><li>理想化模型中，假设网络没有丢包且传输是连续的。</li></ul></li><li><strong>网络拥塞</strong>：<ul><li>实际网络中，网络拥塞会影响RTT和吞吐量，导致拥塞窗口大小的调整。</li><li>理想化模型假设网络拥塞情况较少，传输更为平稳。</li></ul></li><li><strong>ACK延迟</strong>：<ul><li>实际中，接收方可能会延迟发送ACK，从而影响发送方的拥塞窗口调整。</li><li>理想化模型假设ACK立即返回，传输过程更加顺畅。</li></ul></li></ol><p>实际测量数据示例：</p><ul><li><strong>慢启动阶段</strong>：<ul><li>起始时间：21:44:20</li><li>结束时间：21:44:25</li><li>特征：序列号随时间以指数级增长。</li></ul></li><li><strong>拥塞避免阶段</strong>：<ul><li>起始时间：21:44:25</li><li>结束时间：21:45:25</li><li>特征：序列号随时间以线性增长。</li></ul></li></ul><h1 id="实验四dhcp">实验四、DHCP</h1><p><img src="./image-20240610134508643.png" alt="image-20240610134508643" style="zoom:50%;" /></p><blockquote><p>1.DHCP 消息是通过 UDP 还是 TCP 发送的？</p></blockquote><p><img src="./image-20240610140802667.png" alt="image-20240610140802667" style="zoom:50%;" /></p><p>DHCP 消息是通过 UDP（用户数据报协议）发送的。具体来说，DHCP 客户端和服务器使用 UDP 端口 67 和 68 进行通信。客户端发送的请求使用端口 68，服务器发送的响应使用端口 67。</p><blockquote><p>2.画一个时间数据报图，说明客户端和服务器之间的第一个四包发现/提供/请求/确认 DHCP 交换的顺序。对于每个包，指出源和目标端口号。端口号是否与本实验中给出的示例相同？</p></blockquote><p><img src="./output.png" alt="output" style="zoom:50%;" /></p><p>上图展示了客户端和服务器之间的第一个四包发现/提供/请求/确认 DHCP 交换的顺序：</p><ol type="1"><li><strong>DHCP Discover（发现包）</strong><ul><li>源端口号：68</li><li>目标端口号：67</li></ul></li><li><strong>DHCP Offer（提供包）</strong><ul><li>源端口号：67</li><li>目标端口号：68</li></ul></li><li><strong>DHCP Request（请求包）</strong><ul><li>源端口号：68</li><li>目标端口号：67</li></ul></li><li><strong>DHCP ACK（确认包）</strong><ul><li>源端口号：67</li><li>目标端口号：68</li></ul></li></ol><blockquote><p>3.你的主机的链路层（例如以太网）地址是什么？</p></blockquote><p><img src="./image-20240610135221115.png" alt="image-20240610135221115" style="zoom:50%;" /></p><p>主机的链路层地址是 <strong>00:08:74:4f:36:23</strong></p><blockquote><p>4.DHCP 发现消息中的哪些值与 DHCP 请求消息不同？</p></blockquote><p>发现消息</p><p><img src="./image-20240610135716809.png" alt="image-20240610135716809" style="zoom: 67%;" /></p><p>请求消息</p><p><img src="./image-20240610135650346.png" alt="image-20240610135650346" style="zoom:50%;" /></p><p><font color = "blue">DHCP 发现消息（Discover Message）</font></p><ul><li><strong>消息类型</strong>：Discover (Message Type = 1)</li><li><strong>事务 ID</strong>：0xb310</li><li><strong>源地址</strong>：0.0.0.0</li><li><strong>目标地址</strong>：255.255.255.255</li><li><strong>UDP 源端口</strong>：68</li><li><strong>UDP 目标端口</strong>：67</li></ul><p><font color = "blue">DHCP 请求消息（Request Message）</font></p><ul><li><strong>消息类型</strong>：Request (Message Type = 3)</li><li><strong>事务 ID</strong>：0xb311</li><li><strong>源地址</strong>：0.0.0.0</li><li><strong>目标地址</strong>：255.255.255.255</li><li><strong>UDP 源端口</strong>：68</li><li><strong>UDP 目标端口</strong>：67</li></ul><p><font color = "blue">主要区别：</font></p><ol type="1"><li><strong>消息类型 (Message Type)</strong>：<ul><li>发现消息的消息类型为 1。</li><li>请求消息的消息类型为 3。</li></ul></li><li><strong>事务 ID (Transaction ID)</strong>：<ul><li>发现消息的事务 ID 为 0xb310。</li><li>请求消息的事务 ID 为 0xb311。</li></ul></li></ol><p>这两个字段的值是区分 DHCP 发现消息和请求消息的主要因素。其他字段，如源和目标地址、端口号等，在这两个消息中是相同的。</p><blockquote><ol start="5" type="1"><li>第一个四个（发现/提供/请求/确认）DHCP 消息中的事务 ID 值是什么？第二组（请求/确认）DHCP 消息中的事务 ID 值是什么？事务 ID 字段的目的是什么？</li></ol></blockquote><p><font color = "blue">第一个四个 DHCP 消息中的事务 ID 值：</font></p><ol type="1"><li><p><strong>DHCP Discover</strong> - Transaction ID: 0x3e5e0ce3</p></li><li><p><strong>DHCP Offer</strong> - Transaction ID: 0x3e5e0ce3</p></li><li><p><strong>DHCP Request</strong> - Transaction ID: 0x3e5e0ce3</p></li><li><p><strong>DHCP ACK</strong> - Transaction ID: 0x3e5e0ce3</p></li></ol><p><font color = "blue">第二组（请求/确认）DHCP 消息中的事务 ID 值：</font></p><ol type="1"><li><strong>DHCP Request</strong> - Transaction ID: 0x257e55a3</li><li><strong>DHCP ACK</strong> - Transaction ID: 0x257e55a3</li></ol><p><font color = "blue">事务 ID 字段的目的：</font></p><p>事务 ID (Transaction ID) 字段的目的是用于匹配客户端和服务器之间的 DHCP 消息交换。它是一个随机生成的值，用于区分不同的 DHCP 事务，确保每个客户端请求能够与相应的服务器响应正确匹配。这个 ID 由客户端生成，并在每个 DHCP 消息中包含，以便服务器可以识别和处理来自特定客户端的请求。</p><blockquote><p>6.主机使用 DHCP 获取 IP 地址等信息。但主机的 IP 地址直到四消息交换结束时才被确认！如果 IP 地址在四消息交换结束之前未设置，那么四消息交换中的 IP 数据报中使用了哪些值？对于每个 DHCP 消息（发现/提供/请求/确认），指出封装的 IP 数据报中携带的源和目标 IP 地址。</p></blockquote><figure><img src="./image-20240610140614018.png" alt="image-20240610140614018" /><figcaption aria-hidden="true">image-20240610140614018</figcaption></figure><p><font color = "blue">DHCP 消息和相应的 IP 地址：</font></p><ol type="1"><li><strong>DHCP Discover 消息</strong><ul><li><strong>源 IP 地址</strong>：0.0.0.0</li><li><strong>目标 IP 地址</strong>：255.255.255.255</li></ul></li><li><strong>DHCP Offer 消息</strong><ul><li><strong>源 IP 地址</strong>：192.168.1.1</li><li><strong>目标 IP 地址</strong>：255.255.255.255</li></ul></li><li><strong>DHCP Request 消息</strong><ul><li><strong>源 IP 地址</strong>：0.0.0.0</li><li><strong>目标 IP 地址</strong>：255.255.255.255</li></ul></li><li><strong>DHCP ACK 消息</strong><ul><li><strong>源 IP 地址</strong>：192.168.1.1</li><li><strong>目标 IP 地址</strong>：255.255.255.255</li></ul></li></ol><blockquote><p>7.你的 DHCP 服务器的 IP 地址是什么？</p></blockquote><p>根据上一题的截图可知，我的DHCP 服务器的 IP 地址是 <strong>192.168.1.1</strong></p><blockquote><p>8.DHCP 服务器在 DHCP 提供消息中向你的主机提供了什么 IP 地址？指出包含提供的 DHCP 地址的 DHCP 消息。</p></blockquote><p><img src="./image-20240610141106206.png" alt="image-20240610141106206" style="zoom:80%;" /></p><p><strong>提供的 IP 地址</strong>：192.168.1.101</p><p><strong>包含提供的 DHCP 地址的消息</strong>：DHCP Offer 消息</p><blockquote><p>9.在本作业的示例截图中，主机和 DHCP 服务器之间没有中继代理。追踪中的哪些值表明没有中继代理？你的实验中是否有中继代理？如果有，中继代理的 IP 地址是什么？</p></blockquote><p><img src="./image-20240610141601599.png" alt="image-20240610141601599" style="zoom: 67%;" /></p><p><strong>没有中继代理的标志</strong>：<code>giaddr</code> 字段的值为 0.0.0.0。这表明没有中继代理参与 DHCP 消息的传输。在我的实验中<code>giaddr</code> 字段的值为 0.0.0.0，因此也没有中继代理</p><blockquote><p>10.解释 DHCP 提供消息中的路由器和子网掩码行的目的。</p></blockquote><p><font color = "blue">路由器（Router）：</font></p><p>在 DHCP 提供（Offer）消息中，路由器字段（通常也称为默认网关）包含了分配给客户端的默认网关 IP 地址。这是客户端将使用的网关 IP 地址，用于在本地子网之外发送流量。这是客户端能够与外部网络通信的关键参数。</p><ul><li><strong>目的</strong>：提供客户端连接外部网络（如互联网）所需的默认网关地址。</li></ul><p><font color = "blue">子网掩码（Subnet Mask）：</font></p><p>在 DHCP 提供消息中，子网掩码字段包含了分配给客户端的子网掩码。这定义了网络部分和主机部分的界限，使客户端能够确定哪些 IP 地址在本地子网中，哪些不在。</p><ul><li><strong>目的</strong>：帮助客户端识别同一子网内的其他设备，并决定是否需要通过网关发送数据包。</li></ul><blockquote><p>11.在 DHCP 追踪文件中，DHCP 服务器向客户端提供了一个特定的 IP 地址。在客户端响应第一个服务器 OFFER 消息时，客户端是否接受了这个 IP 地址？客户端响应中哪里有客户端请求的地址？</p></blockquote><p>在 DHCP Request 消息的选项部分，找到如下信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Option: (<span class="number">50</span>) Requested IP <span class="title function_">Address</span> <span class="params">(<span class="number">192.168</span><span class="number">.1</span><span class="number">.101</span>)</span></span><br></pre></td></tr></table></figure><p>这表明客户端在 DHCP Request 消息中明确请求了服务器在 DHCP Offer 消息中提供的 IP 地址 <strong>192.168.1.101</strong>。</p><ol type="1"><li><strong>客户端接受了 DHCP 服务器提供的 IP 地址</strong>：192.168.1.101。</li><li><strong>客户端请求的地址位置</strong>：在 DHCP Request 消息的 <code>Option: (50) Requested IP Address</code> 字段中。</li></ol><blockquote><p>12.解释租赁时间的目的。在你的实验中，租赁时间是多少？</p></blockquote><p><font color = "blue">租赁时间的目的：</font></p><p>租赁时间（Lease Time）是在 DHCP 协议中，指的是 DHCP 服务器分配给客户端的 IP 地址的有效使用期限。租赁时间决定了客户端可以使用分配的 IP 地址的时长。在租赁时间到期之前，客户端需要向 DHCP 服务器请求续约，以继续使用当前的 IP 地址。如果客户端未能在租赁时间到期前续约，DHCP 服务器可以收回该 IP 地址并分配给其他客户端。</p><p><strong>主要目的</strong>：</p><ol type="1"><li><strong>动态分配 IP 地址</strong>：通过设置租赁时间，DHCP 服务器可以更高效地管理和分配 IP 地址，确保网络资源的合理利用。</li><li><strong>防止 IP 地址冲突</strong>：通过控制租赁时间，可以减少 IP 地址冲突的风险，确保每个客户端在网络中有一个唯一的 IP 地址。</li><li><strong>资源回收和重新分配</strong>：如果设备离开网络或关闭，在租赁时间到期后，IP 地址可以被回收并重新分配给其他设备。</li></ol><p><font color = "blue">在你的实验中，租赁时间是多少？</font></p><p>在你提供的 DHCP Offer 消息截图中，租赁时间在 <code>IP Address Lease Time</code> 选项中，选项代码为 51,86400 秒，即 1 天。。</p><p><img src="./image-20240611125130352.png" alt="image-20240611125130352" style="zoom:50%;" /></p><blockquote><p>13.DHCP 释放消息的目的是什么？DHCP 服务器是否会发出确认收到客户端的 DHCP 释放请求的确认？如果客户端的 DHCP 释放消息丢失会发生什么？</p></blockquote><p><font color = "blue">DHCP 释放消息的目的：</font></p><p>DHCP 释放（Release）消息是由客户端发送给 DHCP 服务器的，用于通知服务器客户端不再需要分配给它的 IP 地址。通过发送 DHCP 释放消息，客户端可以主动释放其 IP 地址，使该地址可以立即被 DHCP 服务器回收并重新分配给其他客户端。</p><p><strong>主要目的</strong>：</p><ol type="1"><li><strong>主动释放 IP 地址</strong>：客户端通过发送 DHCP 释放消息来通知服务器，它不再需要当前的 IP 地址。</li><li><strong>提高资源利用率</strong>：通过主动释放 IP 地址，服务器可以更快地将该地址分配给其他需要的设备，从而提高网络资源的利用率。</li></ol><p><font color = "blue">DHCP 服务器是否会发出确认收到客户端的 DHCP 释放请求的确认？</font></p><ul><li><strong>不</strong>，DHCP 服务器不会对收到的 DHCP 释放消息发出确认。DHCP 释放消息是一个单向通知，客户端发送释放消息后，服务器会更新其内部状态，但不会向客户端发送任何确认消息。</li></ul><p><font color = "blue">如果客户端的 DHCP 释放消息丢失会发生什么？</font></p><p>如果客户端的 DHCP 释放消息丢失，服务器不会收到该通知，可能会继续认为客户端仍然在使用该 IP 地址。这种情况下：</p><ol type="1"><li><strong>服务器的 IP 地址不会立即被回收</strong>：服务器可能需要等待租赁时间到期后，才能收回并重新分配该 IP 地址。</li><li><strong>资源利用效率降低</strong>：因为服务器没有收到释放消息，IP 地址会在租赁时间到期前保持分配状态，即使客户端已经不再使用该地址，从而降低资源利用效率。</li></ol><p>不过，丢失释放消息不会导致严重的问题，因为 DHCP 服务器在租赁时间到期后会自动回收 IP 地址，只是这个过程会稍微延迟。</p><blockquote><p>14.从 Wireshark 窗口中清除 bootp 过滤器。在 DHCP 包交换期间是否发送或接收了任何 ARP 包？如果有，解释这些 ARP 包的目的。</p></blockquote><figure><img src="./image-20240611125457251.png" alt="image-20240611125457251" /><figcaption aria-hidden="true">image-20240611125457251</figcaption></figure><p><font color = "blue">ARP 请求包：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Who has <span class="number">192.168</span><span class="number">.1</span><span class="number">.101</span>? Tell <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><ul><li><strong>目的</strong>：LinksysGroup 发出的 ARP 请求，询问网络中哪个设备拥有 IP 地址 192.168.1.101。</li><li><strong>来源</strong>：LinksysGroup_da:af:...</li><li><strong>目标</strong>：Broadcast（广播）</li><li><strong>时间</strong>：2004-08-30 00:57:22.615714</li></ul><p><font color = "blue">ARP Announcement 包：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARP Announcement <span class="keyword">for</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.101</span></span><br></pre></td></tr></table></figure><ul><li><strong>目的</strong>：Dell_4f:36:23 发出的 ARP 公告，宣布自己使用了 IP 地址 192.168.1.101。</li><li><strong>来源</strong>：Dell_4f:36:23</li><li><strong>目标</strong>：Broadcast（广播）</li><li><strong>时间</strong>：2004-08-30 00:57:23.312590 等多次</li></ul><p><font color = "blue">ARP 包的目的：</font></p><ol type="1"><li><strong>确认 IP 地址是否唯一</strong>：<ul><li>当 DHCP 服务器提供一个新的 IP 地址给客户端时，客户端会发送 ARP 请求包，确认网络中没有其他设备正在使用这个 IP 地址。这是为了确保分配的 IP 地址是唯一的，没有冲突。</li></ul></li><li><strong>更新 ARP 缓存和宣布 IP 地址</strong>：<ul><li>客户端获取并确认 IP 地址后，会通过 ARP Announcement 包在网络中广播自己的 IP 地址和 MAC 地址映射。这有助于更新其他设备的 ARP 缓存，确保它们可以正确地与新获取 IP 地址的设备通信。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 计网实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openGauss-lab5</title>
      <link href="/2024/05/24/openGauss-lab5/"/>
      <url>/2024/05/24/openGauss-lab5/</url>
      
        <content type="html"><![CDATA[<p><font color = "red" size = "6">本次实验由于华为云服务器欠费，没有使用openGauss数据库，而使用的是自己电脑的postgresql</font></p><h1 id="一实验介绍">一、实验介绍</h1><p>与日志和恢复机制相同，并发控制与锁机制是 openGauss 数据库实现事务处理 ACID 特性的另一重要部分。目前数据库原理教学中对于并发控制与锁机制模块缺乏行之有效的实践教学手段，部分原因归咎于并发控制与锁机制在数据库管理系统中涉及到的相关代码复杂繁复。本实验旨在借助 openGauss 的开源代码，一方面对于并发控制与锁机制的原理进行落地的代码工程实践，另一方面最大限度地减小源代码繁复程度的影响。本章实验原理主要包括 openGauss 的事务处理和锁机制。首先，通过实验查看 openGauss 数据库中表上的加锁信息；然后，通过复现的方式分别验证 Share 锁、Access Share 锁、Row Exclusive 锁和 Access Exclusive 锁。</p><p>并发控制与锁机制也是数据库管理系统实现中最为复杂和精妙部分之一。与日志和恢复部分类似，会涉及到若干系统层面的实现代码。希望通过本实验的实践内容，提升对于并发控制与锁机制的理解程度，更好地认识系统软件在工程实现方面的复杂性。</p><h1 id="二实验目的">二、实验目的</h1><ol type="1"><li><p>理解 openGauss 事务处理原理。</p></li><li><p>了解 openGauss 事务处理模块的实现机制。</p></li><li><p>理解 openGauss 锁机制原理。</p></li><li><p>了解 openGauss 锁机制的若干实现过程。</p></li><li><p>掌握 openGauss 中 Share 锁的复现方法。</p></li><li><p>掌握 openGauss 中 Access Share 锁的复现方法。</p></li><li><p>掌握 openGauss 中 Row Exclusive 锁的复现方法。</p></li><li><p>掌握 openGauss 中 Access Exclusive 锁的复现方法。</p></li><li><p>了解与本实验相关的函数与结构体的源代码。</p></li></ol><h1 id="三实验步骤和结果">三、实验步骤和结果</h1><h2 id="一查看锁信息">（一）查看锁信息</h2><p>1.创建表</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users</span><br><span class="line">(</span><br><span class="line"> u_id <span class="type">varchar</span>(<span class="number">20</span>), <span class="comment">-- 用户 id，用于系统登录账户名（主键）</span></span><br><span class="line"> u_passwd <span class="type">varchar</span>(<span class="number">20</span>), <span class="comment">-- 密码，用于系统登录密码</span></span><br><span class="line"> u_name <span class="type">varchar</span>(<span class="number">10</span>), <span class="comment">-- 真实姓名</span></span><br><span class="line"> u_idnum <span class="type">varchar</span>(<span class="number">20</span>), <span class="comment">-- 证件号码</span></span><br><span class="line"> u_regtime <span class="type">timestamp</span>, <span class="comment">-- 注册时间</span></span><br><span class="line"> <span class="keyword">CONSTRAINT</span> pk_users <span class="keyword">PRIMARY KEY</span> (u_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>2.插入一些随机数据（postgresql版）</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users <span class="keyword">VALUES</span> (</span><br><span class="line"> to_char(generate_series(<span class="number">100</span>, <span class="number">199</span>), <span class="string">&#x27;FM999&#x27;</span>),</span><br><span class="line"> to_char(floor(random() * <span class="number">100000000</span>), <span class="string">&#x27;09999999&#x27;</span>),</span><br><span class="line"> to_char(<span class="number">10000</span> + floor(random() * <span class="number">10000</span>), <span class="string">&#x27;09999&#x27;</span>),</span><br><span class="line"> to_char(<span class="number">10000000000</span> + floor(random() * <span class="number">10000000000</span>), <span class="string">&#x27;09999999999&#x27;</span>),</span><br><span class="line"> <span class="built_in">CURRENT_DATE</span> + floor(random() * <span class="number">15</span>)::<span class="type">int</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>3.首先通过 SELECT pg_backend_pid();命令，我们可以查看当前会话的会话 id，实验结果如下；</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pg_backend_pid( );</span><br></pre></td></tr></table></figure><p><img src="./image-20240524010323857.png" alt="image-20240524010323857" style="zoom:80%;" /></p><p>4.再从系统表中查找到当前会话所添加的锁</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> locktype,<span class="keyword">database</span>,relation,pid,mode <span class="keyword">FROM</span> pg_locks <span class="keyword">WHERE</span> pid= <span class="number">27384</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20240524010413363.png" alt="image-20240524010413363" style="zoom:80%;" /></p><p>5.接下来找到我们所创建的表 users 的 relation id。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="type">oid</span> <span class="keyword">FROM</span> pg_class <span class="keyword">WHERE</span> relname=<span class="string">&#x27;users&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20240524010452402.png" alt="image-20240524010452402" style="zoom:80%;" /></p><p>Users表对应的id为16736</p><h2 id="二复现share锁">（二）复现Share锁</h2><p>1.生成事务，添加 Share 锁。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_idnum <span class="keyword">ON</span> users(u_idnum);</span><br><span class="line"><span class="keyword">SELECT</span> locktype,<span class="keyword">database</span>,relation,pid,mode <span class="keyword">FROM</span> pg_locks <span class="keyword">WHERE</span> pid= <span class="number">27384</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20240524010800429.png" alt="image-20240524010800429" style="zoom:80%;" /></p><p>2.进行 INSERT 操作</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users <span class="keyword">VALUES</span> (<span class="string">&#x27;1234&#x27;</span>,<span class="string">&#x27;1234&#x27;</span>,<span class="string">&#x27;asdzxc&#x27;</span>,<span class="string">&#x27;1234&#x27;</span>,<span class="string">&#x27;2000-04-20&#x27;</span>);</span><br></pre></td></tr></table></figure><p>打开另一个会话窗口，进行 INSERT 操作，发现该命令<strong>被堵塞</strong>，无法执行完成。如下：</p><p><img src="./image-20240524011428902.png" alt="image-20240524011428902" style="zoom:80%;" /></p><p>打开另一个会话窗口，进行 SELECT 操作，执行结果如下：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> u_id=<span class="string">&#x27;100&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20240524011333904.png" alt="image-20240524011333904" style="zoom:80%;" /></p><p>4.提交事务，释放 Share 锁</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>第二个会话INSERT操作执行成功</p><p><img src="./image-20240524011533824.png" alt="image-20240524011533824" style="zoom:80%;" /></p><h2 id="三复现access-share锁">（三）复现Access Share锁</h2><p>1.生成锁</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> u_id=<span class="string">&#x27;100&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> locktype,<span class="keyword">database</span>,relation,pid,mode <span class="keyword">FROM</span> pg_locks <span class="keyword">WHERE</span> pid= <span class="number">27384</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20240524011828576.png" alt="image-20240524011828576" style="zoom:80%;" /></p><p>2.进行 SELECT 操作</p><p>打开另一个会话窗口，进行 SELECT 操作，顺利执行完成。执行结果如下</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> u_id = <span class="string">&#x27;120&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="./image-20240524011906190.png" alt="image-20240524011906190" /><figcaption aria-hidden="true">image-20240524011906190</figcaption></figure><p>3.进行 ALTER 操作</p><p>打开另一个会话窗口，进行 ALTER 操作，发现该命令<strong>被堵塞</strong>，无法执行完成。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> address <span class="type">varchar</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="./image-20240524012034129.png" alt="image-20240524012034129" style="zoom:80%;" /></p><p>4.提交事务，释放锁</p><p>在第一个会话中提交事务，发现第三个会话中的 ALTER 成功执行。执行结果如下</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20240524012121580.png" alt="image-20240524012121580" style="zoom:80%;" /></p><h2 id="四复现row-exclusive锁">（四）复现Row Exclusive锁</h2><p>1.生成锁</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> users <span class="keyword">SET</span> u_passwd=<span class="string">&#x27;123asd&#x27;</span> <span class="keyword">WHERE</span> u_id=<span class="string">&#x27;120&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> locktype,<span class="keyword">database</span>,relation,pid,mode <span class="keyword">FROM</span> pg_locks <span class="keyword">WHERE</span> pid= <span class="number">27384</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20240524012315829.png" alt="image-20240524012315829" style="zoom:80%;" /></p><p>2.此时打开另一个会话窗口，进行 CREATE INDEX 操作，发现该命令<strong>被堵塞</strong>，无法执行完成。执行结果如下：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_name <span class="keyword">ON</span> users(u_name);</span><br></pre></td></tr></table></figure><p><img src="./image-20240524012436900.png" alt="image-20240524012436900" style="zoom:80%;" /></p><p>3.再在第一个会话中提交事务，发现第二个会话中的 CREATE INDEX 操作成功执行。第二个会话执行结果如下：</p><p><img src="./image-20240524012527876.png" alt="image-20240524012527876" style="zoom:80%;" /></p><h2 id="五复现-access-exclusive-锁">（五）复现 Access Exclusive 锁</h2><p>1.生成锁执行结果如下</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> sex <span class="type">varchar</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">SELECT</span> locktype,<span class="keyword">database</span>,relation,pid,mode <span class="keyword">FROM</span> pg_locks <span class="keyword">WHERE</span> pid= <span class="number">27384</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20240524012731003.png" alt="image-20240524012731003" style="zoom:80%;" /></p><p>2.此时打开另一个会话窗口，进行 SELECT 操作，发现该命令<strong>被堵塞</strong>，无法执行完成</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure><p>执行结果如下</p><p><img src="./image-20240524012831395.png" alt="image-20240524012831395" style="zoom:80%;" /></p><p>3.再在第一个会话中提交事务，发现第二个会话中的 SELECT 操作成功执行。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>提交第一个会话执行结果如下：</p><figure><img src="./image-20240524012912900.png" alt="image-20240524012912900" /><figcaption aria-hidden="true">image-20240524012912900</figcaption></figure><h2 id="六添加代码输出获取与释放锁的信息">（六）添加代码：输出获取与释放锁的信息</h2><p><font color = "red">由于华为云欠费，本部分暂未完成</font></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openGauss-lab3</title>
      <link href="/2024/05/23/openGauss-lab3/"/>
      <url>/2024/05/23/openGauss-lab3/</url>
      
        <content type="html"><![CDATA[<p><font color = "red" size = "6">本次实验由于华为云服务器欠费，没有使用openGauss数据库，而借用同学的服务器完成实验</font></p><h1 id="一实验介绍">一、实验介绍</h1><p>日志与恢复是 openGauss 数据库实现事务处理和确保 ACID 特性的重要组成部分。本实验尝试打通目前数据库日志与恢复模块在原理学习与系统实现上的鸿沟。通过 openGauss数据库中日志与恢复部分的实现源代码，分析与验证相关原理与机制，包括：WAL 日志文件、XLOG 日志记录、日志写入过程、检查点机制、数据库恢复、数据库备份与 PITR 恢复。</p><p>首先，通过实验查看 WAL 日志文件的基本信息与命名方式；然后，通过“立即”关闭模式验证数据库在重启时的恢复过程；通过添加代码的方法，在数据库恢复过程中输出调试信息，结合源代码阅读，更加详细地分析 WAL 日志恢复过程；最后，验证数据库备份与 PITR恢复机制。</p><p>日志与恢复机制是数据库系统最为繁杂的功能模块之一，数据库日志与恢复功能的实现需要考虑众多原理中忽略的细节，大量涉及较为底层的系统机制。本实验的实践内容包括较多的源代码阅读与分析，具有较大的挑战性。</p><h1 id="二实验目的">二、实验目的</h1><ol type="1"><li><p>理解 WAL 日志文件的工作原理。</p></li><li><p>理解 XLOG 日志记录的组织。</p></li><li><p>理解 WAL 日志写入过程。</p></li><li><p>理解 WAL 日志检查点机制。</p></li><li><p>理解利用 WAL 日志重做 XLOG 记录进行数据库恢复的原理。</p></li><li><p>掌握数据库备份与 PITR 恢复方法。</p></li><li><p>了解与本实验相关的函数与结构体的源代码。</p></li></ol><h1 id="三实验步骤和结果">三、实验步骤和结果</h1><p>（一）查看WAL日志文件</p><p>1.查看默认日志大小</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> wal_segment_size;</span><br></pre></td></tr></table></figure><p><img src="./image-20240611134721915.png" alt="image-20240611134721915" style="zoom:80%;" /></p><p>2.查看当前日志的 LSN</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pg_current_xlog_insert_location();</span><br></pre></td></tr></table></figure><p><img src="./image-20240611134815177.png" alt="image-20240611134815177" style="zoom:80%;" /></p><p>3.查看当前日志文件名</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pg_xlogfile_name(<span class="string">&#x27;0/1497E7B0&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="./image-20240611134845262.png" alt="image-20240611134845262" style="zoom:80%;" /></p><p>4.查看当前日志文件名和 LSN 在 WAL 段文件中的字节偏移量</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pg_xlogfile_name_offset(<span class="string">&#x27;0/1497E7B0&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="./image-20240611134916606.png" alt="image-20240611134916606" style="zoom:80%;" /></p><p>5.查看 openGauss 的 WAL 日志文件目录</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll $GAUSSHOME/data/pg_xlog</span><br></pre></td></tr></table></figure><p><img src="./image-20240611135509546.png" alt="image-20240611135509546" style="zoom:80%;" /></p><p>（二）验证数据库恢复</p><p>1.通过 immediate 关闭模式触发数据库恢复</p><p>新建一个 SSH 会话，用 gsql 客户端连接数据库服务器。执行下面语句：</p><p><img src="./image-20240611140028076.png" alt="image-20240611140028076" style="zoom:80%;" /></p><p>用 fast 模式关闭数据库服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gs_ctl stop -D $GAUSSHOME/data -m fast</span><br></pre></td></tr></table></figure><figure><img src="./image-20240611140049374.png" alt="image-20240611140049374" /><figcaption aria-hidden="true">image-20240611140049374</figcaption></figure><p>查看 gaussdb 进程输出日志文件（位于$GAUSSHOME/data/pg_log 目录），其中</p><p>部分日志行如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LOG: received fast shutdown request</span><br><span class="line">LOG: aborting any active transactions</span><br><span class="line">FATAL: terminating connection due to administrator command</span><br><span class="line">LOG: shutting down</span><br><span class="line">LOG: will do full checkpoint, need flush 0 pages.</span><br><span class="line">LOG: pagewriter thread shut down, id is 2</span><br><span class="line">LOG: pagewriter thread shut down, id is 1</span><br><span class="line">LOG: pagewriter thread shut down, id is 4</span><br><span class="line">LOG: pagewriter thread shut down, id is 3</span><br><span class="line">LOG: pagewriter thread shut down, id is 0</span><br><span class="line">LOG: will update control file (create checkpoint), shutdown:1</span><br><span class="line">LOG: database system is shut down</span><br><span class="line">LOG: Gaussdb exit(0)</span><br></pre></td></tr></table></figure><p>重启数据库服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gs_ctl start -D $GAUSSHOME/data -Z single_node -l logfile</span><br></pre></td></tr></table></figure><p>查看表数据，发现未提交的事务被回滚，INSERT 语句插入的数据没有出现在表中。</p><p><img src="./image-20240611140437098.png" alt="image-20240611140437098" style="zoom:80%;" /></p><p>下面通过实验观察 immediate 关闭模式。</p><p>新建一个 SSH 会话，用 gsql 客户端连接数据库服务器。执行下面语句：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_b <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;abc&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="./image-20240611140521188.png" alt="image-20240611140521188" style="zoom:80%;" /></p><p>用 immediate 模式关闭数据库服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gs_ctl stop -D $GAUSSHOME/data -m immediate</span><br></pre></td></tr></table></figure><p>查看 gaussdb 进程的输出日志文件（位于$GAUSSHOME/data/pg_log 目录），其</p><p>中部分日志行如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOG: received immediate shutdown request</span><br><span class="line">LOG: Gaussdb exit(0)</span><br></pre></td></tr></table></figure><p>重启数据库服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gs_ctl start -D $GAUSSHOME/data -Z single_node -l logfile</span><br></pre></td></tr></table></figure><p>查看 gaussdb 进程输出日志文件（位于$GAUSSHOME/data/pg_log 目录），其中部分日志行如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LOG: database system was not properly shut down; automatic recovery in progress</span><br><span class="line">LOG: redo starts at 0/15E87F98</span><br><span class="line">[REDO] LOG: pagerepair started</span><br><span class="line">[BACKEND] LOG: redo done at 0/15E88170, end at 0/15E881B8</span><br><span class="line">[REDO] LOG: [PR]: Recoverying elapsed: 100631 us,</span><br><span class="line">redoTotalBytes:544,EndRecPtr:367559096, redoStartPtr:367558552,speed:0 MB/s,</span><br><span class="line">totalTime:100631</span><br><span class="line">[BACKEND] LOG: last completed transaction was at log time 2023-02-23</span><br><span class="line">00:25:32.978453+08</span><br><span class="line">LOG: database system is ready to accept connections</span><br><span class="line">[BACKEND] LOG: database first startup and recovery finish,so do checkpointer</span><br></pre></td></tr></table></figure><p>查看表数据，发现 INSERT 语句插入的数据在表中，表明数据库已恢复到正常状态。</p><p><img src="./image-20240611140716309.png" alt="image-20240611140716309" style="zoom:80%;" /></p><p>（二）查看 pg_control 文件</p><p>pg_control 文件位于在数据目录的 global 子目录中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd $GAUSSHOME/data/single_node/global/</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_controldata /home/omm/opengauss/data/single_node/</span><br></pre></td></tr></table></figure><p><img src="./image-20240611141138018.png" alt="image-20240611141138018" style="zoom:80%;" /></p><h1 id="四实验讨论与总结">四、实验讨论与总结</h1><p>日志与恢复是数据库管理系统中至关重要的部分，确保了事务处理的完整性和数据库的ACID特性。在本实验中，通过openGauss数据库中的日志与恢复机制，我们深入理解了WAL日志文件的工作原理、XLOG日志记录的组织及其写入过程、日志检查点机制，以及利用WAL日志进行数据库恢复的原理。此外，我们还掌握了数据库备份与PITR恢复的方法。本实验结合源代码阅读和分析，帮助我们在理论与实践之间架起桥梁，深化了对数据库日志与恢复机制复杂实现的理解。这些知识和技能对于保障数据库在系统故障情况下的稳定性和数据完整性具有重要意义。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openGauss-lab4</title>
      <link href="/2024/05/23/openGauss-lab4/"/>
      <url>/2024/05/23/openGauss-lab4/</url>
      
        <content type="html"><![CDATA[<p><font color = "red" size = "6">本次实验由于华为云服务器欠费，没有使用openGauss数据库，而使用的是自己电脑的postgresql</font></p><h1 id="一实验介绍">一、实验介绍</h1><p>本实验通过阅读和分析 openGauss 中与 B+树索引构建相关的实现源代码，理解和验证索引的构建流程、使用方法与系统开销。首先回顾索引结构与 B+树索引的原理，总结 CREATE INDEX 语句的用法，通过浏览 openGauss 中 btree 索引构建的相关源代码，实践 btree 索引的具体工程实现。通过一系列实验，对 btree 索引构建、索引与查询执行计划的关联、索引相关系统表、索引的作用与开销有更加深刻的认识和理解。通过添加代码的方法，对 btree索引构建过程中的关键环节信息进行输出，进一步理解索引结构的原理与实现。</p><p>本实验的实践内容涉及到 B+树索引在 openGauss 中的具体实现，实验内容较多且综合性较强。如添加的代码引入错误，需要通过“编辑——编译——测试——调试”的迭代步骤进行耐心排错，查找问题所在，增强系统软件的调试能力。</p><h1 id="二实验目的">二、实验目的</h1><ol type="1"><li><p>理解索引结构与 B+树索引的原理。</p></li><li><p>掌握在 openGauss 中用 CREATE INDEX 语句构建索引的基本方法。</p></li><li><p>理解在 openGauss 中 btree 索引的构建流程及其在源代码中的实现。</p></li><li><p>理解索引构建与查询执行计划的关联。</p></li><li><p>了解在 openGauss 中与索引构建相关的系统表信息。</p></li><li><p>理解索引的作用与开销。</p></li><li><p>掌握在 openGauss 中添加代码输出 btree 索引相关信息的方法。</p></li><li><p>掌握使用 pageinspect 插件分析索引页面的方法。</p></li><li><p>了解与本实验相关的函数与结构体的源代码。</p></li></ol><h1 id="三实验步骤和结果">三、实验步骤和结果</h1><h2 id="一构建btree索引"><a id = "index">（一）构建btree索引</a></h2><p>1.2.3.准备工作</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users</span><br><span class="line">(</span><br><span class="line"> u_id <span class="type">varchar</span>(<span class="number">20</span>), <span class="comment">-- 用户 id</span></span><br><span class="line"> u_passwd <span class="type">varchar</span>(<span class="number">20</span>), <span class="comment">-- 密码</span></span><br><span class="line"> u_name <span class="type">varchar</span>(<span class="number">10</span>), <span class="comment">-- 真实姓名</span></span><br><span class="line"> u_idnum <span class="type">varchar</span>(<span class="number">20</span>), <span class="comment">-- 证件号码</span></span><br><span class="line"> u_regtime <span class="type">timestamp</span> <span class="comment">-- 注册时间</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>4.创建函数 gen_hanzi，用于生成随机汉字。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR REPLACE</span> <span class="keyword">FUNCTION</span> gen_hanzi(<span class="type">INT</span>) <span class="keyword">RETURNS</span> <span class="type">TEXT</span> <span class="keyword">AS</span> $$<span class="language-pgsql"> </span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">DECLARE</span> </span></span><br><span class="line"><span class="language-pgsql">res <span class="type">TEXT</span>; </span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">BEGIN</span> </span></span><br><span class="line"><span class="language-pgsql"> <span class="keyword">IF</span> <span class="meta">$1</span> &gt;=<span class="number">1</span> <span class="keyword">THEN</span> </span></span><br><span class="line"><span class="language-pgsql"> <span class="keyword">SELECT</span> string_agg(chr(<span class="number">19968</span>+(random()*<span class="number">20901</span>)::<span class="type">int</span>), <span class="string">&#x27;&#x27;</span>) <span class="keyword">INTO</span> res</span></span><br><span class="line"><span class="language-pgsql"> <span class="keyword">FROM</span> generate_series(<span class="number">1</span>,<span class="meta">$1</span>); </span></span><br><span class="line"><span class="language-pgsql"> <span class="keyword">RETURN</span> res; </span></span><br><span class="line"><span class="language-pgsql"> <span class="keyword">END</span> <span class="keyword">IF</span>;</span></span><br><span class="line"><span class="language-pgsql"> <span class="keyword">RETURN</span> <span class="keyword">NULL</span>; </span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span>; </span></span><br><span class="line"><span class="language-pgsql">$$</span> <span class="keyword">LANGUAGE</span> plpgsql <span class="keyword">STRICT</span>;</span><br></pre></td></tr></table></figure><p>5.设置随机数种子</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> setseed(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>6.向 users 表中插入 100 行随机生成的元组。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR REPLACE</span> <span class="keyword">FUNCTION</span> gen_hanzi(n <span class="type">INT</span>) <span class="keyword">RETURNS</span> <span class="type">TEXT</span> <span class="keyword">AS</span> $$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">DECLARE</span> </span></span><br><span class="line"><span class="language-pgsql">    res <span class="type">TEXT</span>; </span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">BEGIN</span> </span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">IF</span> n &gt;= <span class="number">1</span> <span class="keyword">THEN</span> </span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">SELECT</span> string_agg(chr(<span class="number">19968</span> + (random() * <span class="number">20901</span>)::<span class="type">int</span>), <span class="string">&#x27;&#x27;</span>) <span class="keyword">INTO</span> res</span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">FROM</span> generate_series(<span class="number">1</span>, n); </span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">RETURN</span> res; </span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">RETURN</span> <span class="keyword">NULL</span>; </span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span>; </span></span><br><span class="line"><span class="language-pgsql">$$</span> <span class="keyword">LANGUAGE</span> plpgsql <span class="keyword">STRICT</span>;</span><br></pre></td></tr></table></figure><p>7.查看 users 表中的数据，结果显示如下。</p><figure><img src="./image-20240523161338924.png" alt="image-20240523161338924" /><figcaption aria-hidden="true">image-20240523161338924</figcaption></figure><p>9.执行 SQL，查询指定姓名的 users 表元组。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> u_name = <span class="string">&#x27;筟潟蠻&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="./image-20240523161519438.png" alt="image-20240523161519438" /><figcaption aria-hidden="true">image-20240523161519438</figcaption></figure><p>10.查看上述查询语句的查询执行计划以及执行时间。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">ANALYZE</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> u_name = <span class="string">&#x27;筟潟蠻&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="./image-20240523161634956.png" alt="image-20240523161634956" /><figcaption aria-hidden="true">image-20240523161634956</figcaption></figure><p>总时间为0.039+0.025=0.064ms</p><p>11.执行 CREATE INDEX 语句，在 users 表上对于 u_name 列构建 btree 索引。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> usersidx <span class="keyword">ON</span> users <span class="keyword">USING</span> btree (u_name);</span><br></pre></td></tr></table></figure><p>12.再次执行上述 EXPLAIN ANALYZE 语句。</p><figure><img src="./image-20240523162034370.png" alt="image-20240523162034370" /><figcaption aria-hidden="true">image-20240523162034370</figcaption></figure><p>发现查询执行计划没有发生任何变化。仍然采用顺序扫描而没有利用 u_name 上刚创建的索引 usersidx 进行查找。请思考这是为什么？</p><p>原因：<font color = "red">可能是因为表太小了，对于非常小的表，顺序扫描的开销可能比使用索引更低，因此优化器会选择顺序扫描。</font></p><h2 id="二索引相关的系统表">（二）索引相关的系统表</h2><p>1.查看 pg_class 系统表。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> pg_class <span class="keyword">WHERE</span> relname = <span class="string">&#x27;usersidx&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="./image-20240523162400100.png" alt="image-20240523162400100" /><figcaption aria-hidden="true">image-20240523162400100</figcaption></figure><p>2.查看表 users 和索引 usersidx 对应的磁盘文件信息。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pg_relation_filepath(<span class="type">oid</span>), relpages, reltuples <span class="keyword">FROM</span> pg_class <span class="keyword">WHERE</span> relname = <span class="string">&#x27;users&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20240523162530924.png" alt="image-20240523162530924" style="zoom:80%;" /></p><p>可以看到，表 users 存储在数据文件夹的 base/16722/16723 文件中，占用一个磁盘页面，有 100 条元组。</p><p>可以用同样方法查看索引 usersidx 的磁盘文件信息。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pg_relation_filepath(<span class="type">oid</span>), relpages, reltuples <span class="keyword">FROM</span> pg_class <span class="keyword">WHERE</span> relname = <span class="string">&#x27;usersidx&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20240523162717636.png" alt="image-20240523162717636" style="zoom:80%;" /></p><p>可以看到，索引 usersidx 的对应文件是 base/16722/16723，占用 2 个页面，有100 个索引项，与表 users 中的元组数量相同。</p><p>3.查看 pg_attribute 系统表。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.* <span class="keyword">FROM</span> pg_class c, pg_attribute a <span class="keyword">WHERE</span> c.relname=<span class="string">&#x27;usersidx&#x27;</span> <span class="keyword">and</span> c.oid = a.attrelid;</span><br></pre></td></tr></table></figure><figure><img src="./image-20240523163012464.png" alt="image-20240523163012464" /><figcaption aria-hidden="true">image-20240523163012464</figcaption></figure><p>4.查看 pg_index 系统表。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> i.* <span class="keyword">FROM</span> pg_index i, pg_class c <span class="keyword">WHERE</span> c.relname=<span class="string">&#x27;usersidx&#x27;</span> <span class="keyword">and</span> c.oid = i.indexrelid;</span><br></pre></td></tr></table></figure><figure><img src="./image-20240523163124659.png" alt="image-20240523163124659" /><figcaption aria-hidden="true">image-20240523163124659</figcaption></figure><p>5.查看 pg_depend 系统表。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> pg_depend <span class="keyword">WHERE</span> objid = <span class="number">16727</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20240523163311545.png" alt="image-20240523163311545" style="zoom:80%;" /></p><p>6.查看 pg_am 系统表。</p><p><font color = "red">这里pg的am表中的属性有所不同</font></p><p><font color = "red"><code>oid</code>: 索引访问方法的对象ID、<code>amname</code>: 访问方法名称、<code>amhandler</code>: 处理函数、<code>amtype</code>: 访问方法类型</font></p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="type">oid</span>, amname, amhandler, amtype <span class="keyword">FROM</span> pg_am;</span><br></pre></td></tr></table></figure><p><img src="./image-20240523163712023.png" alt="image-20240523163712023" style="zoom:80%;" /></p><h2 id="三索引的作用与开销">（三）索引的作用与开销</h2><p>1.2.删除和重新创建users表</p><p>3.向users表中插入 1000 行随机生成的元组。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DO</span> $$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">DECLARE</span></span></span><br><span class="line"><span class="language-pgsql">    i <span class="type">INT</span>;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">BEGIN</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="comment">-- Set the seed for the random number generator</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">PERFORM</span> setseed(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">    <span class="comment">-- Loop through the desired range to insert 1000 rows</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">FOR</span> i <span class="keyword">IN</span> <span class="number">1000.</span><span class="number">.1999</span> <span class="keyword">LOOP</span></span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (u_id, u_passwd, u_name, u_idnum, u_regtime) <span class="keyword">VALUES</span> (</span></span><br><span class="line"><span class="language-pgsql">            i,</span></span><br><span class="line"><span class="language-pgsql">            to_char(floor(random() * <span class="number">100000000</span>)::<span class="type">bigint</span>, <span class="string">&#x27;FM09999999&#x27;</span>),</span></span><br><span class="line"><span class="language-pgsql">            gen_hanzi(<span class="number">3</span>),</span></span><br><span class="line"><span class="language-pgsql">            to_char(<span class="number">10000000000</span> + floor(random() * <span class="number">10000000000</span>)::<span class="type">bigint</span>, <span class="string">&#x27;FM09999999999&#x27;</span>),</span></span><br><span class="line"><span class="language-pgsql">            <span class="built_in">CURRENT_DATE</span> + floor(random() * <span class="number">15</span>)::<span class="type">int</span></span></span><br><span class="line"><span class="language-pgsql">        );</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">END</span> <span class="keyword">LOOP</span>;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span> $$</span>;</span><br></pre></td></tr></table></figure><p>4.查看 users 表中的数据，结果显示如下。</p><figure><img src="./image-20240523164930892.png" alt="image-20240523164930892" /><figcaption aria-hidden="true">image-20240523164930892</figcaption></figure><p>5.执行 EXPLAIN ANALYZE 语句。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">ANALYZE</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> u_name = <span class="string">&#x27;癐鮴膎&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20240523165038653.png" alt="image-20240523165038653" style="zoom:80%;" /></p><p>6.执行 CREATE INDEX 语句，在 users 表上对于 u_name 列构建 btree 索引。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> usersidx <span class="keyword">ON</span> users (u_name);</span><br></pre></td></tr></table></figure><p>7.再执行 EXPLAIN ANALYZE 语句。</p><p><img src="./image-20240523165203575.png" alt="image-20240523165203575" style="zoom:80%;" /></p><p>思考：为什么在<a href="#index">第一部分</a>中 100 行元组的表上建立的索引在查询中没有发挥作用，而这里在 1000 行元组的表上建立的索引在查询中就被使用呢？</p><p>显然前面的猜想是正确的：<font color = "red">因为表太小了，顺序扫描的开销可能比使用索引更低，因此优化器会选择顺序扫描。</font></p><p>8.增加表的数据规模</p><p>删除并重建users表</p><p>向 users 表中插入 100000 行随机生成的元组。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DO</span> $$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">DECLARE</span></span></span><br><span class="line"><span class="language-pgsql">    i <span class="type">INT</span>;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">BEGIN</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="comment">-- Set the seed for the random number generator</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">PERFORM</span> setseed(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">    <span class="comment">-- Loop through the desired range to insert 1000 rows</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">FOR</span> i <span class="keyword">IN</span> <span class="number">1.</span><span class="number">.100000</span> <span class="keyword">LOOP</span></span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (u_id, u_passwd, u_name, u_idnum, u_regtime) <span class="keyword">VALUES</span> (</span></span><br><span class="line"><span class="language-pgsql">            i,</span></span><br><span class="line"><span class="language-pgsql">            to_char(floor(random() * <span class="number">100000000</span>)::<span class="type">bigint</span>, <span class="string">&#x27;FM09999999&#x27;</span>),</span></span><br><span class="line"><span class="language-pgsql">            gen_hanzi(<span class="number">3</span>),</span></span><br><span class="line"><span class="language-pgsql">            to_char(<span class="number">10000000000</span> + floor(random() * <span class="number">10000000000</span>)::<span class="type">bigint</span>, <span class="string">&#x27;FM09999999999&#x27;</span>),</span></span><br><span class="line"><span class="language-pgsql">            <span class="built_in">CURRENT_DATE</span> + floor(random() * <span class="number">15</span>)::<span class="type">int</span></span></span><br><span class="line"><span class="language-pgsql">        );</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">END</span> <span class="keyword">LOOP</span>;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span> $$</span>;</span><br></pre></td></tr></table></figure><p>9.查看 users 表中的数据，结果显示如下。</p><p><img src="./image-20240523170057128.png" alt="image-20240523170057128" style="zoom:80%;" /></p><p>10.执行 EXPLAIN ANALYZE 语句。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">ANALYZE</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> u_name = <span class="string">&#x27;呼戲妬&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20240523170027046.png" alt="image-20240523170027046" style="zoom:80%;" /></p><p>11.执行 CREATE INDEX 语句，在 users 表上对于 u_name 列构建 btree 索引。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> usersidx <span class="keyword">ON</span> users (u_name);</span><br></pre></td></tr></table></figure><p>12.再执行 EXPLAIN ANALYZE 语句。</p><p><img src="./image-20240523170157066.png" alt="image-20240523170157066" style="zoom:80%;" /></p><p>与直接顺序扫描的5.287ms相比，建立索引的查询时间为0.298ms，提升了17倍</p><p>13.查看索引的空间开销。</p><p>pg_relation_size 函数可以查看关系表所占用空间的大小。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pg_size_pretty(pg_relation_size(<span class="string">&#x27;usersidx&#x27;</span>)) <span class="keyword">AS</span> size;</span><br></pre></td></tr></table></figure><p><img src="./image-20240523170308109.png" alt="image-20240523170308109" style="zoom:80%;" /></p><p>再看 users 关系表的空间大小。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pg_size_pretty(pg_relation_size(<span class="string">&#x27;users&#x27;</span>)) <span class="keyword">AS</span> size;</span><br></pre></td></tr></table></figure><p><img src="./image-20240523170523230.png" alt="image-20240523170523230" style="zoom:80%;" /></p><p>14.删除users表，为后面实验步骤做准备。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> users;</span><br></pre></td></tr></table></figure><h2 id="四添加代码分析-btree-索引构建过程">（四）添加代码：分析 btree 索引构建过程</h2><p><font color = "red">华为云欠费，此部分暂未完成</font></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库原理复习</title>
      <link href="/2024/05/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/"/>
      <url>/2024/05/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="事务">事务</h1><p>定义：多个操作构成，完整的单元来进行管理</p><p>事务的四个特性：</p><p>原子性：都做或都不做</p><p>持久性（恢复机制保证）：事务成功提交，事务对数据库的影响必须永久生效</p><p>一致性：约束关系不变</p><p>隔离性（并发控制保证）：单个事务的执行，不受其他事务的影响</p><p>事务的状态：</p><p>活跃的</p><p>部分提交：执行完最后一条语句（系统还要做一些事）</p><p>失败</p><p>终止</p><p>提交</p><p><img src="./image-20240520223021629.png" alt="image-20240520223021629" style="zoom:50%;" /></p><p>事务的并发执行</p><p>1.增加处理器和磁盘利用率</p><p>2.减少平均响应时间</p><p>调度：安排操作的执行顺序</p><p>调度包含所有事务的指令，保留单个事务内指令的执行顺序</p><p>串行调度（以事务为单位）和并发调度（以操作为单位）</p><p>可串行化</p><p>n个事务，有n！个串行调度的方案</p><h2 id="冲突可串行化">冲突可串行化</h2><figure><img src="./image-20240520224801686.png" alt="image-20240520224801686" /><figcaption aria-hidden="true">image-20240520224801686</figcaption></figure><p><img src="./image-20240520225141511.png" alt="image-20240520225141511" style="zoom:80%;" /></p><p><strong>一个调度是冲突可串行化的当且仅当前驱图没有环</strong></p><figure><img src="./image-20240520232334861.png" alt="image-20240520232334861" /><figcaption aria-hidden="true">image-20240520232334861</figcaption></figure><p>等价的串行化就是对该图进行拓扑排序</p><p><strong>可恢复调度</strong>：如果Tj读了被Ti修改过的数据项，Tj的提交操作必须在Ti的提交操作之后</p><p><strong>级联回滚</strong>：一个事务的回滚会引起多个事务的回滚，会产生大量的开销</p><p><strong>无级联回滚的调度</strong>：如果Tj读了被Ti修改过的数据项，Tj的读操作必须在Ti提交之后</p><p>无级联回滚一定是可恢复的</p><p>并发时不同的隔离级别：可串行化、可重复读、已提交读、未提交读</p><h1 id="并发控制">并发控制</h1><p>基于锁的协议</p><p>1.互斥锁</p><p>2.共享锁</p><p><img src="./image-20240521163542509.png" alt="image-20240521163542509" style="zoom:50%;" /></p><p>第一行是一个事务已经有的锁，第一列式另一个事务要加的锁，true表示不冲突，false表示冲突</p><p>两阶段锁有三个阶段：</p><p>两阶段锁协议、严格两阶段锁协议和强两阶段锁协议。</p><p>这三个阶段是不断增强的，目的是解决并发过程中出现的各种问题。</p><p>两阶段锁协议：指所有事务分两个阶段提出加锁和解锁申请</p><p>· 增长阶段：对任何数据进行读写操作之前，首先申请并获得该数据的封锁。</p><p>· 收缩阶段：在释放一个封锁后，事务不再申请和获得其他的任何封锁。</p><p>严格两阶段锁协议：</p><p>除了满足两阶段锁协议规定外，还要求事务的排它锁必须在事务提交之后释放。</p><p>强两阶段锁协议：</p><p>除了满足两阶段锁协议外，还要求所有锁都必须在事务提交之后释放。</p><p>关于三种两阶段锁的作用分析：</p><p>·两阶段锁：是保证冲突可串行化的充分条件。</p><p>举例：当一个调度中有连续的R1（A）W2（A）时，说明事务1已经UNLOCK A的锁了，（因为W2（A）需要申请排它锁，必须等事务1释放A的锁）并且不再申请其他锁，则事务1和2不会有冲突的动作，即冲突可串行化。</p><p>·严格两阶段锁：解决了级联回滚的问题；避免了脏读和丢失修改的问题。</p><p>级联回滚一般是由脏读引起的，所以解决脏读问题也就解决了级联回滚问题。</p><p>脏读是由于读了由其他事务更新得到的数据，而这个数据的更新还没有提交。</p><p>严格两阶段锁要求排它锁在事务提交后释放锁。而对于数据的更新要申请排它锁，对数据更新后提交事务再释放排它锁，这时其他事务才能申请锁来进行数据读取，而此时读取的数据就不再是脏数据。</p><p>解决丢失修改问题也是同理，在一个事务更新数据并提交后，其他事务才能申请锁进行更新提交，即前一个更新虽然被覆盖，但是并不是丢失。</p><p><strong>两阶段锁协议</strong></p><p>申请锁阶段：只能申请，不能释放</p><p>释放锁阶段：只能释放，不能申请</p><p>两阶段锁协议能保证冲突可串行化，但不能避免死锁</p><p>严格两阶段锁协议：所有事务的互斥锁保持到该事务提交/退出（无级联回滚）</p><p>强两阶段锁协议：所有事务的所有锁保持到该事务提交/退出</p><p><img src="./image-20240521165132397.png" alt="image-20240521165132397" style="zoom:80%;" /></p><figure><img src="./image-20240521165619346.png" alt="image-20240521165619346" /><figcaption aria-hidden="true">image-20240521165619346</figcaption></figure><p>多粒度锁</p><p>粒度越小（如数据项），并发程度高，锁的管理复杂</p><p>粒度越大（如整个数据库），锁的管理简单</p><p>意向锁</p><figure><img src="./image-20240521171800301.png" alt="image-20240521171800301" /><figcaption aria-hidden="true">image-20240521171800301</figcaption></figure><p>相容性矩阵</p><figure><img src="./image-20240521185644621.png" alt="image-20240521185644621" /><figcaption aria-hidden="true">image-20240521185644621</figcaption></figure><figure><img src="./image-20240521190126284.png" alt="image-20240521190126284" /><figcaption aria-hidden="true">image-20240521190126284</figcaption></figure><p>解决死锁：</p><p>1.申请到所有资源</p><p>2.按照优先级申请资源</p><p><img src="./image-20240521191140956.png" alt="image-20240521191140956" style="zoom:80%;" /></p><p>死锁检测</p><p>图中有环说明有死锁</p><p>死锁恢复</p><h1 id="恢复">恢复</h1><p><img src="./image-20240521194638188.png" alt="image-20240521194638188" style="zoom:80%;" /></p><p>undo撤销事务，改到更新前的状态</p><p>redo重做事务，改到更新后的状态</p><p>幂等性：undo或redo多次的影响是一样的</p><p>回滚算法示例</p><figure><img src="./image-20240521195805395.png" alt="image-20240521195805395" /><figcaption aria-hidden="true">image-20240521195805395</figcaption></figure><p>监测点</p><p>1.所有日志都被安全的保存</p><p>2.将所有的缓冲块都OUTPUT到磁盘上了</p><p>3.记录一个&lt;CHECKPOINT&gt;</p><div><img src="./image-20240521200544934.png" alt="image-20240521200544934" style="zoom:50%;" /><img src="./image-20240521200724332.png" alt="image-20240521200724332" style="zoom: 50%;" /></div><p>redo和undo</p><div><img src="./image-20240521201127783.png" alt="image-20240521201127783" style="zoom:55%;" /><img src="./image-20240521201144632.png" alt="image-20240521201144632" style="zoom:50%;" /></div><figure><img src="./image-20240521201354602.png" alt="image-20240521201354602" /><figcaption aria-hidden="true">image-20240521201354602</figcaption></figure><figure><img src="./image-20240521202147452.png" alt="image-20240521202147452" /><figcaption aria-hidden="true">image-20240521202147452</figcaption></figure><h1 id="er模型">ER模型</h1><p>实体集、联系集、属性</p><p>实体集（矩形）</p><p>属性（简单属性、复合属性、单值属性、多值属性（大括号）、导出属性）</p><p>联系集（菱形）：实体集与实体集的某种语义关系</p><p>二元联系和三元联系，联系集也有可能有属性</p><p>映射关系：1.一对一 2.一对多 3.多对一 4.多对多</p><p>弱实体集（双矩形框）：没有主键的实体集，依赖于强实体集</p><p>角色：课程与先修课</p><p><img src="./image-20240521220531323.png" alt="image-20240521220531323" style="zoom:50%;" /></p><p>箭头表示1，无箭头表示多</p><p><img src="./image-20240521220641020.png" alt="image-20240521220641020" style="zoom:50%;" /></p><p>单线表示部分参与，双线表示全参与</p><p><img src="./image-20240521221255357.png" alt="image-20240521221255357" style="zoom:50%;" /></p><figure><img src="./image-20240521222049310.png" alt="image-20240521222049310" /><figcaption aria-hidden="true">image-20240521222049310</figcaption></figure><p>弱实体集：没有主键的实体集(员工和家属，家属是弱实体集，弱实体集一定依赖强/标识实体集)</p><p><img src="./image-20240521222247999.png" alt="image-20240521222247999" style="zoom:50%;" /></p><figure><img src="./image-20240521222526373.png" alt="image-20240521222526373" /><figcaption aria-hidden="true">image-20240521222526373</figcaption></figure><p>构造顺序：实体集-&gt;联系集-&gt;属性</p><p>联系集的度是指它所关联的实体集的个数，ER模型一般度数为2</p><p>扩展ER</p><p>高层实体集、低层实体集（正交、重叠）</p><p><img src="./image-20240603225334888.png" alt="image-20240603225334888" style="zoom:80%;" /></p><p>两者之间的关系：完全演绎、部分演绎</p><p>将多元联系转换为二元联系</p><p><img src="./image-20240529005142120.png" alt="image-20240529005142120" style="zoom:50%;" /></p><figure><img src="./image-20240529005325841.png" alt="image-20240529005325841" /><figcaption aria-hidden="true">image-20240529005325841</figcaption></figure><figure><img src="./image-20240529005507443.png" alt="image-20240529005507443" /><figcaption aria-hidden="true">image-20240529005507443</figcaption></figure><div><img src="./image-20240529005627278.png" alt="image-20240529005627278" style="zoom:50%;" /><img src="./image-20240529005716728.png" alt="image-20240529005716728" style="zoom:50%;" /></div><blockquote><p>实体集的转换</p></blockquote><p><img src="./image-20240529162522056.png" alt="image-20240529162522056" style="zoom:50%;" /></p><p>强实体集的转换，只取所有复合属性的叶子属性，多值属性要另外建一张表（该表的主键由原表主键和多值属性同时构成），导出属性要去掉</p><p>弱实体集的主键由它所依赖的强实体集的主键和弱实体集的部分键</p><blockquote><p>联系集的转换</p></blockquote><p>联系集的主键由所关联的两个实体集的主键构成，还要加上联系集的属性</p><p><img src="./image-20240529163457973.png" alt="image-20240529163457973" style="zoom:80%;" /></p><p>一对多联系集的转换：可以把dept_name加入到instructor并看做是department的外键</p><h1 id="函数依赖">函数依赖</h1><p>a-&gt;b，a决定b，b依赖于a</p><p>超键：K-&gt;R</p><p>候选键：K-&gt;R and不存在K的真子集a ,a -&gt; R，必须推出R中的所有关系</p><p>主属性：所有候选键中的属性的集合都属于主属性</p><p><strong>平凡依赖</strong></p><p>一定成立的依赖，如：ID,name -&gt; ID</p><p><strong>传递依赖</strong></p><p><img src="./image-20240529171041018.png" alt="image-20240529171041018" style="zoom:50%;" /></p><p>注意b -\-&gt;a是前提（id-&gt;schoolNo-&gt;name)</p><p><strong>部分依赖</strong></p><p><img src="./image-20240529171511109.png" alt="image-20240529171511109" style="zoom:50%;" /></p><p><strong>完全依赖</strong></p><p>不存在上面的真子集</p><p>函数依赖集闭包</p><p>由已知F能推出来的，在R上成立的包含所有依赖关系的集合，记为F+</p><p><strong>1NF</strong></p><p>原子性，每一个属性都不可再分</p><p><strong>2NF</strong></p><p>在1NF的基础上，消除了非主属性对于主属性部分的函数依赖。</p><p>表中的非主属性必须完全依赖于候选键</p><p>判断方法：</p><p>1.找出数据表中的所有候选键</p><p>2.找出所有主属性和非主属性</p><p>3.判断所有的非主属性对候选键的部分函数依赖</p><figure><img src="./image-20240529173314000.png" alt="image-20240529173314000" /><figcaption aria-hidden="true">image-20240529173314000</figcaption></figure><figure><img src="./image-20240529173544505.png" alt="image-20240529173544505" /><figcaption aria-hidden="true">image-20240529173544505</figcaption></figure><p><strong>3NF</strong></p><p>表中的所有数据元素不但要能唯一地被主关键字所标识，而且它们之间还必须相互独立，不存在其他的函数关系</p><p>在2NF基础之上，消除传递函数依赖</p><p>在2NF基础之上，不存在非主属性对候选键的传递函数依赖</p><p>任何一个关系模型都要满足</p><p>1.要么是平凡依赖</p><p>2.要么左边是超键</p><p>3.要么右边是键属性（主属性）</p><figure><img src="./image-20240529173837037.png" alt="image-20240529173837037" /><figcaption aria-hidden="true">image-20240529173837037</figcaption></figure><figure><img src="./image-20240529173853058.png" alt="image-20240529173853058" /><figcaption aria-hidden="true">image-20240529173853058</figcaption></figure><p><strong>BCNF</strong></p><p>消除主属性对主键的部分和传递依赖</p><p>不存在主属性对候选键的部分和传递依赖</p><p>所有函数依赖关系满足</p><p>1.要么是平凡依赖</p><p>2.要么左边全是超键</p><p><strong>4NF</strong></p><p>消除表中的多值依赖</p><p><strong>无损连接的判定</strong></p><figure><img src="./image-20240601135005392.png" alt="image-20240601135005392" /><figcaption aria-hidden="true">image-20240601135005392</figcaption></figure><p><strong>函数依赖保持的判定</strong></p><figure><img src="./image-20240601135507034.png" alt="image-20240601135507034" /><figcaption aria-hidden="true">image-20240601135507034</figcaption></figure><p><img src="./image-20240601135714455.png" alt="image-20240601135714455" style="zoom:80%;" /></p><p><strong>第三范式分解算法</strong></p><figure><img src="./image-20240601140831057.png" alt="image-20240601140831057" /><figcaption aria-hidden="true">image-20240601140831057</figcaption></figure><p><strong>BCNF分解算法</strong></p><figure><img src="./image-20240601141214071.png" alt="image-20240601141214071" /><figcaption aria-hidden="true">image-20240601141214071</figcaption></figure><h1 id="索引">索引</h1><h3 id="聚集索引clustered-index">1. 聚集索引（Clustered Index）</h3><ul><li><strong>定义</strong>：聚集索引决定了表中数据的物理存储顺序。一个表只能有一个聚集索引，因为数据只能按照一种顺序存储。</li><li>特点：<ul><li>数据的物理顺序和索引顺序相同。</li><li>通常用于主键或频繁查询的列。</li><li>查询效率高，特别是范围查询。</li><li>插入、删除、更新操作可能会比较慢，因为需要保持物理顺序。</li></ul></li></ul><h3 id="主索引primary-index">2. 主索引（Primary Index）</h3><ul><li><strong>定义</strong>：主索引通常指的是在主键列上创建的索引。主键是唯一标识每一行记录的列或列的组合。</li><li>特点：<ul><li>主索引通常是聚集索引，但并不一定非要是聚集索引。</li><li>主键值必须唯一且非空。</li><li>主索引确保表中每一行的唯一性。</li></ul></li></ul><h3 id="辅助索引secondary-index">3. 辅助索引（Secondary Index）</h3><ul><li><strong>定义</strong>：辅助索引是指除了主索引之外的其他索引，也称为非聚集索引（Non-Clustered Index）。</li><li>特点：<ul><li>一个表可以有多个辅助索引。</li><li>辅助索引不会影响数据的物理存储顺序。</li><li>辅助索引存储指向数据记录的指针。</li><li>对于查询优化非常有用，尤其是涉及多个列的查询。</li></ul></li></ul><h3 id="唯一索引unique-index">4. 唯一索引（Unique Index）</h3><ul><li><strong>定义</strong>：唯一索引确保索引列中的所有值都是唯一的，没有重复值。</li><li>特点：<ul><li>强制列中的每个值都是唯一的。</li><li>可以在多个列上创建唯一索引。</li><li>自动用于主键，但也可以用于非主键列。</li><li>有助于确保数据完整性。</li></ul></li></ul><p>稠密索引：数据文件中所有search-key的值在索引文件中都出现</p><p>稀疏索引</p><p>聚集索引：数据文件中的数据记录的排列顺序与索引文件中的索引项的排列顺序一致</p><figure><img src="./image-20240601145509184.png" alt="image-20240601145509184" /><figcaption aria-hidden="true">image-20240601145509184</figcaption></figure><p>辅助索引一定是稠密的，否则可能找不到记录</p><p>索引的SQL语句</p><p><img src="./image-20240601150103537.png" alt="image-20240601150103537" style="zoom:80%;" /></p><figure><img src="./image-20240601150404456.png" alt="image-20240601150404456" /><figcaption aria-hidden="true">image-20240601150404456</figcaption></figure><h1 id="关系代数">关系代数</h1><figure><img src="./image-20240601154806113.png" alt="image-20240601154806113" /><figcaption aria-hidden="true">image-20240601154806113</figcaption></figure><figure><img src="./image-20240601154940380.png" alt="image-20240601154940380" /><figcaption aria-hidden="true">image-20240601154940380</figcaption></figure><p>θ连接</p><figure><img src="./image-20240601201214343.png" alt="image-20240601201214343" /><figcaption aria-hidden="true">image-20240601201214343</figcaption></figure><figure><img src="./image-20240601201458476.png" alt="image-20240601201458476" /><figcaption aria-hidden="true">image-20240601201458476</figcaption></figure><p>自然连接：属性名相同、值相等</p><figure><img src="./image-20240601201737086.png" alt="image-20240601201737086" /><figcaption aria-hidden="true">image-20240601201737086</figcaption></figure><figure><img src="./image-20240601202323365.png" alt="image-20240601202323365" /><figcaption aria-hidden="true">image-20240601202323365</figcaption></figure><p>除</p><figure><img src="./image-20240601202931280.png" alt="image-20240601202931280" /><figcaption aria-hidden="true">image-20240601202931280</figcaption></figure><figure><img src="./image-20240601203143292.png" alt="image-20240601203143292" /><figcaption aria-hidden="true">image-20240601203143292</figcaption></figure><figure><img src="./image-20240601203416054.png" alt="image-20240601203416054" /><figcaption aria-hidden="true">image-20240601203416054</figcaption></figure><p>外连接</p><figure><img src="./image-20240601203827121.png" alt="image-20240601203827121" /><figcaption aria-hidden="true">image-20240601203827121</figcaption></figure><h1 id="sql语句">SQL语句</h1><figure><img src="./image-20240601160221344.png" alt="image-20240601160221344" /><figcaption aria-hidden="true">image-20240601160221344</figcaption></figure><figure><img src="./image-20240601160357265.png" alt="image-20240601160357265" /><figcaption aria-hidden="true">image-20240601160357265</figcaption></figure><h1 id="视图">视图</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW v AS &lt;query expression&gt;</span><br></pre></td></tr></table></figure><h1 id="权限">权限</h1><p>User-Role-Privilege</p><p>设置权限</p><figure><img src="./image-20240601164122325.png" alt="image-20240601164122325" /><figcaption aria-hidden="true">image-20240601164122325</figcaption></figure><p>收回权限</p><figure><img src="./image-20240601164201658.png" alt="image-20240601164201658" /><figcaption aria-hidden="true">image-20240601164201658</figcaption></figure><figure><img src="./image-20240601164449470.png" alt="image-20240601164449470" /><figcaption aria-hidden="true">image-20240601164449470</figcaption></figure><h1 id="触发器">触发器</h1><figure><img src="./image-20240601165419656.png" alt="image-20240601165419656" /><figcaption aria-hidden="true">image-20240601165419656</figcaption></figure><p>for each statement/row</p><p>referencing old/new table</p><p>referencing old/new row as...</p><figure><img src="./image-20240601165853357.png" alt="image-20240601165853357" /><figcaption aria-hidden="true">image-20240601165853357</figcaption></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openGauss-lab2</title>
      <link href="/2024/05/20/openGauss-lab2/"/>
      <url>/2024/05/20/openGauss-lab2/</url>
      
        <content type="html"><![CDATA[<p><font color = "red" size = "6">本次实验由于华为云服务器欠费，没有使用openGauss数据库，而使用的是自己电脑的postgresql</font></p><h1 id="一实验介绍">一、实验介绍</h1><p>本章将实践 openGauss 数据库的高级数据管理功能，涉及各类数据库对象，包括：视图、索引、存储过程、触发器、事务管理、权限管理等。视图可用于简化查询和保护数据，索引用于提高查询效率，存储过程用于封装复杂业务逻辑，触发器可以自动化数据操作以维护完整性，事务管理确保数据库系统的 ACID 特性，权限管理确保数据库系统的安全性。在本章中，将通过实验操作，掌握这些 openGauss 数据库对象的使用，以验证这几类数据库对象所实现的数据库原理。</p><h1 id="二实验目的">二、实验目的</h1><ol type="1"><li><p>掌握 openGauss 数据库中视图的使用方法。</p></li><li><p>掌握 openGauss 数据库中索引的使用方法。</p></li><li><p>掌握 openGauss 数据库中存储过程的使用方法。</p></li><li><p>掌握 openGauss 数据库中触发器的使用方法。</p></li><li><p>掌握 openGauss 数据库中的事务管理机制。</p></li><li><p>掌握 openGauss 数据库中的权限机制。</p></li></ol><h1 id="三实验步骤和结果">三、实验步骤和结果</h1><h2 id="一使用视图">（一）使用视图</h2><h3 id="定义视图">1.定义视图</h3><p>【查询 1】建立 CS 系学生的视图。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> student_cs <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> sno, sname, sgender, sbirth, sdept</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> sdept = <span class="string">&#x27;CS&#x27;</span>;</span><br></pre></td></tr></table></figure><p>选取CS系学生的所有属性建立视图，然后对视图进行查询</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student_cs;</span><br></pre></td></tr></table></figure><p><img src="./image-20240520190929528.png" alt="image-20240520190929528" style="zoom:80%;" /></p><p>【查询 2】建立 CS 系学生的视图，且要求修改和插入数据时保证该视图只有 CS 系的学生。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> student_cs_2 <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> sno, sname, sgender, sbirth, sdept</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> sdept = <span class="string">&#x27;CS&#x27;</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>;</span><br></pre></td></tr></table></figure><p>加入了<code>WITH CHECK OPTION</code>，插入和修改数据时必须满足<code>sdept = 'CS'</code>的条件</p><p>查看该视图</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student_cs_2</span><br></pre></td></tr></table></figure><p><img src="./image-20240520191441919.png" alt="image-20240520191441919" style="zoom:80%;" /></p><p>【查询 3】建立 CS 系选修了数据库系统课程的学生的视图。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> student_cs_3(sno, sname, score) <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> student.sno, sname, score</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">INNER</span> <span class="keyword">JOIN</span> sc <span class="keyword">ON</span> student.sno = sc.sno</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> course <span class="keyword">on</span> sc.cno = course.cno</span><br><span class="line"><span class="keyword">WHERE</span> sdept = <span class="string">&#x27;CS&#x27;</span> <span class="keyword">AND</span> cname = <span class="string">&#x27;数据库系统&#x27;</span>;</span><br></pre></td></tr></table></figure><p>将student表和sc表中学生学号相同的内连接，同时把sc表和course表中课程号相同的内连接，相当于把三个表连在一起</p><p>查看该视图</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student_cs_3</span><br></pre></td></tr></table></figure><p><img src="./image-20240520191834529.png" alt="image-20240520191834529" style="zoom:80%;" /></p><p>【查询 4】建立 CS 系选修了数据库系统课程且成绩在 90 分以上的学生的视图。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> student_cs_4 <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> sno, sname, score</span><br><span class="line"><span class="keyword">FROM</span> student_cs_3</span><br><span class="line"><span class="keyword">WHERE</span> score &gt;= <span class="number">90</span>;</span><br></pre></td></tr></table></figure><p>查看该视图</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student_cs_4</span><br></pre></td></tr></table></figure><p><img src="./image-20240520192140981.png" alt="image-20240520192140981" style="zoom:80%;" /></p><p>【查询 5】定义一个反映学生年龄的视图。</p><p>这里调用了AGE函数计算出从出生到现在之间的时间，然后从中提取年份就是现在的年龄</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> student_age(sno, sname, sage) <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> sno, sname, EXTRACT(&#x27;<span class="type">YEAR</span>&#x27; <span class="keyword">FROM</span> AGE(<span class="built_in">CURRENT_DATE</span>, sbirth))</span><br><span class="line"><span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p>查看该视图</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student_age</span><br></pre></td></tr></table></figure><p><img src="./image-20240520192523865.png" alt="image-20240520192523865" style="zoom:80%;" /></p><h3 id="查询视图">2.查询视图</h3><p>【查询 6】在视图 student_age 中查找年龄小于 22 岁的学生。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno, sname, sage</span><br><span class="line"><span class="keyword">FROM</span> student_age</span><br><span class="line"><span class="keyword">WHERE</span> sage &lt; <span class="number">22</span>;</span><br></pre></td></tr></table></figure><p>查询结果</p><p><img src="./image-20240520193037831.png" alt="image-20240520193037831" style="zoom:80%;" /></p><p>【查询 7】查询 CS 系中选修了 2 号课程的学生。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.sno, sname</span><br><span class="line"><span class="keyword">FROM</span> student_cs s <span class="keyword">INNER</span> <span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno = sc.sno</span><br><span class="line"><span class="keyword">WHERE</span> cno = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>查询结果</p><p><img src="./image-20240520193148960.png" alt="image-20240520193148960" style="zoom:80%;" /></p><h3 id="修改视图">3.修改视图</h3><p>【查询 8】向 CS 系学生视图 student_cs 中插入一条新记录。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student_cs <span class="keyword">VALUES</span> (<span class="string">&#x27;22005&#x27;</span>, <span class="string">&#x27;孙七&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;2001-11-01&#x27;</span>, <span class="string">&#x27;CE&#x27;</span>);</span><br></pre></td></tr></table></figure><p>查询视图student_cs</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student_cs</span><br></pre></td></tr></table></figure><p><img src="./image-20240520193515579.png" alt="image-20240520193515579" style="zoom:80%;" /></p><p>没有任何变化，查询student表</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure><p><img src="./image-20240520193557785.png" alt="image-20240520193557785" style="zoom:80%;" /></p><p>发现多出来了孙七。但是如果想student_cs_2中插入孙七则会报错，因为student_cs_2已经加入了<code>WIHH CHEKC OPTION</code></p><p><img src="./image-20240520193905090.png" alt="image-20240520193905090" style="zoom:80%;" /></p><p>【查询 9】通过视图 student_cs 将学号为 22001 的学生姓名改为“张小明”。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> student_cs</span><br><span class="line"><span class="keyword">SET</span> sname = <span class="string">&#x27;张小明&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> sno = <span class="string">&#x27;22001&#x27;</span>;</span><br></pre></td></tr></table></figure><p>等价于对原表进行操作</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> student</span><br><span class="line"><span class="keyword">SET</span> sname = <span class="string">&#x27;张小明&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> sno = <span class="string">&#x27;22001&#x27;</span> <span class="keyword">AND</span> sdept=<span class="string">&#x27;CS&#x27;</span>;</span><br></pre></td></tr></table></figure><p>查看student表，结果如下</p><p><img src="./image-20240520194146219.png" alt="image-20240520194146219" style="zoom:80%;" /></p><p>【查询 10】通过视图 student_cs 将学号为 22002 的学生记录删除。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> student_cs</span><br><span class="line"><span class="keyword">WHERE</span> sno = <span class="string">&#x27;22002&#x27;</span>;</span><br></pre></td></tr></table></figure><p>等价于对原表进行操作</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> sno = <span class="string">&#x27;22002&#x27;</span> <span class="keyword">AND</span> sdept = <span class="string">&#x27;CS&#x27;</span>;</span><br></pre></td></tr></table></figure><p>因为键值对(sno)=(22002)仍然是从表"sc"引用的.在 "student" 上的更新或删除操作违反了在 "sc" 上的外键约束 "fk_student" ，所以删除不成功。</p><h3 id="删除视图">4.删除视图</h3><p>【查询 11】删除 student_cs_2 视图，同时删除所有依赖该视图的视图。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> student_cs_2 <span class="keyword">CASCADE</span>;</span><br></pre></td></tr></table></figure><h3 id="物化视图">5.物化视图</h3><p>【查询 12】建立 CS 系选修了数据库系统课程的学生的物化视图。</p><p>在student_cs_3的基础之上</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> student_cs_3m(sno, sname, score) <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> student.sno, sname, score</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">INNER</span> <span class="keyword">JOIN</span> sc <span class="keyword">ON</span> student.sno = sc.sno</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> course <span class="keyword">on</span> sc.cno = course.cno</span><br><span class="line"><span class="keyword">WHERE</span> sdept = <span class="string">&#x27;CS&#x27;</span> <span class="keyword">AND</span> cname = <span class="string">&#x27;数据库系统&#x27;</span>;</span><br></pre></td></tr></table></figure><p>查询该视图</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student_cs_3m</span><br></pre></td></tr></table></figure><p><img src="./image-20240520194715671.png" alt="image-20240520194715671" style="zoom:80%;" /></p><p>将 student 表中学生张小明的姓名改为张三，再次查询物化视图</p><p><img src="./image-20240520195042342.png" alt="image-20240520195042342" style="zoom:80%;" /></p><p>结果不变</p><p>【查询 13】刷新物化视图 student_cs_3m。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REFRESH</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> student_cs_3m;</span><br></pre></td></tr></table></figure><p>再次查询，结果发生改变</p><p><img src="./image-20240520195149369.png" alt="image-20240520195149369" style="zoom:80%;" /></p><p>【查询 14】删除物化视图 student_cs_3m。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> student_cs_3m;</span><br></pre></td></tr></table></figure><h2 id="二使用索引">（二）使用索引</h2><h3 id="准备工作">1.准备工作</h3><p>创建函数 gen_hanzi 用于生成随机汉字</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR REPLACE</span> <span class="keyword">FUNCTION</span> gen_hanzi(<span class="type">INT</span>) <span class="keyword">RETURNS</span> <span class="type">TEXT</span> <span class="keyword">AS</span> $$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">DECLARE</span></span></span><br><span class="line"><span class="language-pgsql">res <span class="type">TEXT</span>;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">BEGIN</span></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">IF</span> <span class="meta">$1</span> &gt;=<span class="number">1</span> <span class="keyword">THEN</span></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">SELECT</span> string_agg(chr(<span class="number">19968</span>+(random()*<span class="number">20901</span>)::<span class="type">int</span>), <span class="string">&#x27;&#x27;</span>) <span class="keyword">INTO</span> res</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">FROM</span> generate_series(<span class="number">1</span>,<span class="meta">$1</span>);</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">RETURN</span> res;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span> <span class="keyword">IF</span>;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">RETURN</span> <span class="keyword">NULL</span>;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span>;</span></span><br><span class="line"><span class="language-pgsql">$$</span> <span class="keyword">LANGUAGE</span> plpgsql <span class="keyword">STRICT</span>;</span><br></pre></td></tr></table></figure><h3 id="装载数据">2.装载数据</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span> (</span><br><span class="line">generate_series(<span class="number">30000</span>, <span class="number">99999</span>)::<span class="type">text</span>,<span class="comment">--在postgresql中使用::text来把数字转换为字符</span></span><br><span class="line">gen_hanzi(<span class="number">3</span>),</span><br><span class="line"><span class="string">&#x27;男&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;2001-09-01&#x27;</span>::<span class="type">date</span> + floor((random() * <span class="number">365</span>))::<span class="type">int</span>,</span><br><span class="line"><span class="string">&#x27;CS&#x27;</span>);</span><br></pre></td></tr></table></figure><p>查找student表行数</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> COUNT(*) <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure><p><img src="./image-20240520200206683.png" alt="image-20240520200206683" style="zoom: 80%;" /></p><h3 id="创建索引">3.创建索引</h3><p>【查询 15】查询 student 表中 sname 值为“墐膫進”的记录：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sname = <span class="string">&#x27;墐膫進&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20240520200743213.png" alt="image-20240520200743213" style="zoom:80%;" /></p><p>执行结果为107ms</p><p>使用 EXPLAIN 语句查看查询执行计划</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sname = <span class="string">&#x27;墐膫進&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20240520200917369.png" alt="image-20240520200917369" style="zoom:80%;" /></p><p>在 sname 列上创建索引</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> sname_idx <span class="keyword">ON</span> student(sname);</span><br></pre></td></tr></table></figure><p>通过查询系统表 pg_indexes，查看表 student 上建立的全部索引</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> indexname, indexdef</span><br><span class="line"><span class="keyword">FROM</span> pg_indexes</span><br><span class="line"><span class="keyword">WHERE</span> tablename = <span class="string">&#x27;student&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20240520201203069.png" alt="image-20240520201203069" style="zoom:80%;" /></p><h3 id="使用索引">4.使用索引</h3><p>再次执行上面的查询</p><p><img src="./image-20240520201321440.png" alt="image-20240520201321440" style="zoom:80%;" /></p><p>结果是65ms，是之前查询耗时的60.74%</p><p>再次查询执行计划</p><p><img src="./image-20240520201425549.png" alt="image-20240520201425549" style="zoom:80%;" /></p><h3 id="删除索引">5.删除索引</h3><p>【查询 16】删除索引 sname_idx。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> sname_idx;</span><br></pre></td></tr></table></figure><h3 id="多列索引">6.多列索引</h3><p>【查询 17】在 student 表的 sname 和 sbirth 列上创建多列索引。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sname = <span class="string">&#x27;墐膫進&#x27;</span><span class="keyword">AND</span> sbirth = <span class="string">&#x27;2001-10-13&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20240520202019236.png" alt="image-20240520202019236" style="zoom:80%;" /></p><p>因为前面 sname 上的索引已删除，该查询只能使用顺序扫描。</p><p><img src="./image-20240520202043090.png" alt="image-20240520202043090" style="zoom:80%;" /></p><p>查询耗时86ms</p><p>在 student 表的 sname 和 sbirth 列上创建多列索引</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> sname_sbirth_idx <span class="keyword">ON</span> student(sname, sbirth);</span><br></pre></td></tr></table></figure><p>再次查看执行计划</p><p><img src="./image-20240520202214321.png" alt="image-20240520202214321" style="zoom:80%;" /></p><p>再次执行查询，查询耗时83ms</p><p><img src="./image-20240520202318981.png" alt="image-20240520202318981" style="zoom:80%;" /></p><p>创建多列索引要考虑列的顺序</p><p>查询以下查询的查询计划</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sname = <span class="string">&#x27;墐膫進&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="./image-20240520202620113.png" alt="image-20240520202620113" style="zoom:80%;" /></p><p>查询以下查询的查询计划</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student sbirth = <span class="string">&#x27;2001-10-13&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20240520202751153.png" alt="image-20240520202751153" style="zoom:80%;" /></p><p>删除该索引</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> sname_sbirth_idx;</span><br></pre></td></tr></table></figure><h2 id="三使用存储过程">（三）使用存储过程</h2><h3 id="创建存储过程">1.创建存储过程</h3><p><font color = "red">这一部分在postgresql中语法有所不同</font></p><p>【查询 18】创建一个存储过程，用于向 sc 表中插入一条记录。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR REPLACE</span> <span class="keyword">PROCEDURE</span> insert_sc(param1 <span class="type">CHAR</span>(<span class="number">5</span>), param2 <span class="type">SMALLINT</span>, param3 <span class="type">SMALLINT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>)</span><br><span class="line"><span class="keyword">LANGUAGE</span> plpgsql</span><br><span class="line"><span class="keyword">AS</span> $$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">BEGIN</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc (sno, cno, score) <span class="keyword">VALUES</span> (param1, param2, param3);</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span>;</span></span><br><span class="line"><span class="language-pgsql">$$</span>;</span><br></pre></td></tr></table></figure><p>【查询 19】创建一个存储过程，用于删除 sc 表中一条指定学号和课号的记录。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建存储过程</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR REPLACE</span> <span class="keyword">PROCEDURE</span> delete_sc(param1 <span class="type">CHAR</span>(<span class="number">5</span>), param2 <span class="type">SMALLINT</span>)</span><br><span class="line"><span class="keyword">LANGUAGE</span> plpgsql</span><br><span class="line"><span class="keyword">AS</span> $$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">BEGIN</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">DELETE</span> <span class="keyword">FROM</span> sc</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">WHERE</span> sc.sno = param1 <span class="keyword">AND</span> sc.cno = param2;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span>;</span></span><br><span class="line"><span class="language-pgsql">$$</span>;</span><br></pre></td></tr></table></figure><h3 id="调用存储过程">2.调用存储过程</h3><p>【查询 20】调用存储过程 insert_sc，向 sc 表中插入记录： '22003', 1, 86</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> insert_sc(<span class="string">&#x27;22003&#x27;</span>::<span class="type">CHAR</span>(<span class="number">5</span>), <span class="number">1</span>::<span class="type">SMALLINT</span>, <span class="number">86</span>::<span class="type">SMALLINT</span>);</span><br></pre></td></tr></table></figure><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> sc</span><br></pre></td></tr></table></figure><p><img src="./image-20240520204442936.png" alt="image-20240520204442936" style="zoom:80%;" /></p><p>【查询 21】调用存储过程 delete_sc，将'22003'选修 1 号课程的记录删除。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> delete_sc(<span class="string">&#x27;22003&#x27;</span>::<span class="type">CHAR</span>(<span class="number">5</span>), <span class="number">1</span>::<span class="type">SMALLINT</span>);</span><br></pre></td></tr></table></figure><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> sc</span><br></pre></td></tr></table></figure><p><img src="./image-20240520204611357.png" alt="image-20240520204611357" style="zoom:80%;" /></p><h3 id="输出参数与返回值">3.输出参数与返回值</h3><p>【查询 22】创建一个存储过程，根据指定的学号返回学生姓名。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建带有输入和输出参数的存储过程</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR REPLACE</span> <span class="keyword">PROCEDURE</span> get_sname(<span class="keyword">IN</span> stu_num <span class="type">TEXT</span>, <span class="keyword">OUT</span> stu_name <span class="type">TEXT</span>)</span><br><span class="line"><span class="keyword">LANGUAGE</span> plpgsql</span><br><span class="line"><span class="keyword">AS</span> $$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">BEGIN</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">SELECT</span> sname <span class="keyword">INTO</span> stu_name</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">FROM</span> student</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">WHERE</span> sno = stu_num;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span>;</span></span><br><span class="line"><span class="language-pgsql">$$</span>;</span><br></pre></td></tr></table></figure><p>可以把 OUT 参数传出来的值保存到变量中。如下面代码段</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DO</span> $$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">DECLARE</span></span></span><br><span class="line"><span class="language-pgsql">    var_out <span class="type">TEXT</span>;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">BEGIN</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="comment">-- 调用存储过程并获取输出参数的值</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">CALL</span> get_sname(<span class="string">&#x27;22001&#x27;</span>, var_out);</span></span><br><span class="line"><span class="language-pgsql">    <span class="comment">-- 输出结果</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">RAISE</span> <span class="keyword">NOTICE</span> <span class="string">&#x27;姓名: %&#x27;</span>, var_out;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span>;</span></span><br><span class="line"><span class="language-pgsql">$$</span>;</span><br></pre></td></tr></table></figure><p>结果如下</p><p><img src="./image-20240520205336365.png" alt="image-20240520205336365" style="zoom:80%;" /></p><p>其中DO表示的是执行的匿名代码块，可以忽略</p><p>【查询 23】创建一个函数，返回指定学号学生的平均成绩。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR REPLACE</span> <span class="keyword">FUNCTION</span> get_avg_score(num <span class="type">CHAR</span>(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">NUMERIC</span>(<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">$$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">DECLARE</span></span></span><br><span class="line"><span class="language-pgsql">    avg_score <span class="type">NUMERIC</span>(<span class="number">5</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">BEGIN</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">SELECT</span> AVG(score)</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">INTO</span> avg_score</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">FROM</span> sc</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">WHERE</span> sc.sno = num;</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">RETURN</span> avg_score;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span>;</span></span><br><span class="line"><span class="language-pgsql">$$</span> <span class="keyword">LANGUAGE</span> plpgsql;</span><br></pre></td></tr></table></figure><p>调用函数</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> get_avg_score(<span class="string">&#x27;22001&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="./image-20240520205807700.png" alt="image-20240520205807700" style="zoom:80%;" /></p><h3 id="定义变量">4.定义变量</h3><p>【查询 24】创建一个存储过程，根据指定的学号，输出学生的全部信息。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR REPLACE</span> <span class="keyword">PROCEDURE</span> get_student(stu_num <span class="type">TEXT</span>)</span><br><span class="line"><span class="keyword">LANGUAGE</span> plpgsql</span><br><span class="line"><span class="keyword">AS</span> $$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">DECLARE</span></span></span><br><span class="line"><span class="language-pgsql">    stu_name student.sname<span class="meta">%TYPE</span>;</span></span><br><span class="line"><span class="language-pgsql">    stu_row student<span class="meta">%ROWTYPE</span>;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">BEGIN</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="comment">-- 查询并输出学生姓名</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">SELECT</span> sname</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">INTO</span> stu_name</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">FROM</span> student</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">WHERE</span> sno = stu_num;</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">RAISE</span> <span class="keyword">NOTICE</span> <span class="string">&#x27;学号: %, 姓名: %&#x27;</span>, stu_num, stu_name;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">    <span class="comment">-- 查询并输出学生的所有信息</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">SELECT</span> *</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">INTO</span> stu_row</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">FROM</span> student</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">WHERE</span> sno = stu_num;</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">RAISE</span> <span class="keyword">NOTICE</span> <span class="string">&#x27;学号: %, 姓名: %, 性别: %, 生日: %, 系别: %&#x27;</span>,</span></span><br><span class="line"><span class="language-pgsql">                 stu_row.sno, stu_row.sname, stu_row.sgender, stu_row.sbirth, stu_row.sdept;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span>;</span></span><br><span class="line"><span class="language-pgsql">$$</span>;</span><br></pre></td></tr></table></figure><h3 id="条件判断">5.条件判断</h3><p>【查询 25】创建一个函数，返回指定学号的学生是否选修了至少一门选课，是返回1，否返回 0。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR REPLACE</span> <span class="keyword">FUNCTION</span> is_in_sc(stu_num <span class="type">TEXT</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">BIT</span></span><br><span class="line"><span class="keyword">AS</span> $$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">DECLARE</span></span></span><br><span class="line"><span class="language-pgsql">    ret <span class="type">BIT</span>;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">BEGIN</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">IF</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> sno = stu_num) <span class="keyword">THEN</span></span></span><br><span class="line"><span class="language-pgsql">        ret := B<span class="string">&#x27;1&#x27;</span>;</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">ELSE</span></span></span><br><span class="line"><span class="language-pgsql">        ret := B<span class="string">&#x27;0&#x27;</span>;</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">RETURN</span> ret;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span>;</span></span><br><span class="line"><span class="language-pgsql">$$</span> <span class="keyword">LANGUAGE</span> plpgsql;</span><br></pre></td></tr></table></figure><p>调用该函数</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> is_in_sc(<span class="string">&#x27;22001&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="./image-20240520210359844.png" alt="image-20240520210359844" style="zoom:80%;" /></p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> is_in_sc(<span class="string">&#x27;22003&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="./image-20240520210425619.png" alt="image-20240520210425619" style="zoom:80%;" /></p><h3 id="异常处理">6.异常处理</h3><p>【查询 26】使用 RAISE 语句输出所有级别的消息。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DO</span> $$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">BEGIN</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">RAISE</span> <span class="keyword">DEBUG</span> <span class="string">&#x27;debug message %&#x27;</span>, now();</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">RAISE</span> <span class="keyword">LOG</span> <span class="string">&#x27;log message %&#x27;</span>, now();</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">RAISE</span> <span class="keyword">INFO</span> <span class="string">&#x27;information message %&#x27;</span>, now();</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">RAISE</span> <span class="keyword">NOTICE</span> <span class="string">&#x27;notice message %&#x27;</span>, now();</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">RAISE</span> <span class="built_in">WARNING</span> <span class="string">&#x27;warning message %&#x27;</span>, now();</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">RAISE</span> <span class="keyword">EXCEPTION</span> <span class="string">&#x27;exception message %&#x27;</span>, now();</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span>;</span></span><br><span class="line"><span class="language-pgsql">$$</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20240520210700680.png" alt="image-20240520210700680" style="zoom:80%;" /></p><p>【查询 27】编写一个存储过程，根据学号查找选课记录，对于没有选课的和选修了两门以上课的情况进行异常处理。</p><p>在 PostgreSQL 中，内置异常处理的功能稍有不同，不会自动引发 <code>no_data_found</code> 和 <code>too_many_rows</code> 异常。相反，你需要手动处理这些情况。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR REPLACE</span> <span class="keyword">PROCEDURE</span> handle_exception_test(stu_num <span class="type">TEXT</span>)</span><br><span class="line"><span class="keyword">LANGUAGE</span> plpgsql</span><br><span class="line"><span class="keyword">AS</span> $$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">DECLARE</span></span></span><br><span class="line"><span class="language-pgsql">    rec <span class="type">RECORD</span>;</span></span><br><span class="line"><span class="language-pgsql">    count_result <span class="type">INTEGER</span>;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">BEGIN</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="comment">-- 尝试查询学生记录</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">BEGIN</span></span></span><br><span class="line"><span class="language-pgsql">        <span class="comment">-- 检查是否找到多行数据</span></span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">SELECT</span> count(*)</span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">INTO</span> count_result</span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">FROM</span> sc</span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">WHERE</span> sno = stu_num;</span></span><br><span class="line"><span class="language-pgsql">        </span></span><br><span class="line"><span class="language-pgsql">        <span class="comment">-- 检查是否没有找到数据</span></span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">IF</span> count_result = <span class="number">0</span> <span class="keyword">THEN</span></span></span><br><span class="line"><span class="language-pgsql">            <span class="keyword">RAISE</span> <span class="keyword">EXCEPTION</span> <span class="string">&#x27;学号为 % 的学生记录未找到&#x27;</span>, stu_num;</span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">END</span> <span class="keyword">IF</span>;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">        <span class="comment">-- 检查是否找到多于一行数据</span></span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">IF</span> count_result &gt; <span class="number">1</span> <span class="keyword">THEN</span></span></span><br><span class="line"><span class="language-pgsql">            <span class="keyword">RAISE</span> <span class="keyword">EXCEPTION</span> <span class="string">&#x27;学号为 % 的学生选了多门课程&#x27;</span>, stu_num;</span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">END</span> <span class="keyword">IF</span>;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">        <span class="comment">-- 如果只有一行数据，则将其选择到 rec 中</span></span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">SELECT</span> *</span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">INTO</span> rec</span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">FROM</span> sc</span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">WHERE</span> sno = stu_num;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">EXCEPTION</span></span></span><br><span class="line"><span class="language-pgsql">        <span class="comment">-- 捕获并处理异常</span></span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span></span><br><span class="line"><span class="language-pgsql">            <span class="keyword">RAISE</span>;</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">END</span>;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span>;</span></span><br><span class="line"><span class="language-pgsql">$$</span>;</span><br></pre></td></tr></table></figure><p>调用该存储过程</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> handle_exception_test(<span class="string">&#x27;22001&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="./image-20240520211557688.png" alt="image-20240520211557688" style="zoom:80%;" /></p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> handle_exception_test(<span class="string">&#x27;22003&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="./image-20240520211620179.png" alt="image-20240520211620179" style="zoom:80%;" /></p><p>调用 insert_sc 存储过程插入一条选课数据</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> insert_sc (<span class="string">&#x27;22003&#x27;</span>::<span class="type">CHAR</span>(<span class="number">5</span>), <span class="number">1</span>::<span class="type">SMALLINT</span>, <span class="number">86</span>::<span class="type">SMALLINT</span>);</span><br></pre></td></tr></table></figure><p>在调用该存储过程</p><p><img src="./image-20240520211847796.png" alt="image-20240520211847796" style="zoom:80%;" /></p><h3 id="游标与循环">7.游标与循环</h3><p>【查询 28】创建一个存储过程，获取大于等于指定成绩的学生学号、姓名、课程名称和成绩记录，并将每条记录逐行输出。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR REPLACE</span> <span class="keyword">PROCEDURE</span> get_student_by_score(p_score <span class="type">SMALLINT</span>)</span><br><span class="line"><span class="keyword">LANGUAGE</span> plpgsql</span><br><span class="line"><span class="keyword">AS</span> $$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">DECLARE</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="comment">-- 定义游标</span></span></span><br><span class="line"><span class="language-pgsql">    cur <span class="type">REFCURSOR</span>;</span></span><br><span class="line"><span class="language-pgsql">    <span class="comment">-- 定义 RECORD 类型的变量来存储每行的返回值</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">row</span> <span class="type">RECORD</span>;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">BEGIN</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="comment">-- 打开游标</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">OPEN</span> cur <span class="keyword">FOR</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">SELECT</span> s.sno, s.sname, c.cname, sc.score</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">FROM</span> sc</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> student s <span class="keyword">ON</span> sc.sno = s.sno</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> course c <span class="keyword">ON</span> sc.cno = c.cno</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">WHERE</span> sc.score &gt;= p_score;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">    <span class="comment">-- 获取并打印每行返回值</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">LOOP</span></span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">FETCH NEXT</span> <span class="keyword">FROM</span> cur <span class="keyword">INTO</span> <span class="keyword">row</span>;</span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">EXIT</span> <span class="keyword">WHEN</span> <span class="keyword">NOT</span> <span class="built_in">FOUND</span>; <span class="comment">-- 当找不到时退出</span></span></span><br><span class="line"><span class="language-pgsql">        <span class="comment">-- 打印每行的返回值</span></span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">RAISE</span> <span class="keyword">NOTICE</span> <span class="string">&#x27;学号: %, 姓名: %, 课程: %, 成绩: %&#x27;</span>, <span class="keyword">row</span>.sno, <span class="keyword">row</span>.sname, <span class="keyword">row</span>.cname, <span class="keyword">row</span>.score;</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">END</span> <span class="keyword">LOOP</span>;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">    <span class="comment">-- 关闭游标</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">CLOSE</span> cur;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span>;</span></span><br><span class="line"><span class="language-pgsql">$$</span>;</span><br></pre></td></tr></table></figure><p>调用该存储过程，获取成绩大于等于 90 的学生选课记录</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> get_student_by_score(<span class="number">90</span>::<span class="type">SMALLINT</span>);</span><br></pre></td></tr></table></figure><p><img src="./image-20240520212450508.png" alt="image-20240520212450508" style="zoom:80%;" /></p><h3 id="删除存储过程">8.删除存储过程</h3><p>【查询 29】删除本节创建的所有存储过程。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> insert_sc;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> delete_sc;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> get_sname;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> get_avg_score;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> get_student;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> is_in_sc;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> handle_exception_test;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> get_student_by_score;</span><br></pre></td></tr></table></figure><h2 id="四使用触发器">（四）使用触发器</h2><h3 id="创建触发器">1.创建触发器</h3><p>【查询 30】在 sc 表上创建一个触发器，该触发器的作用是对分数 score 列的更新操作进行审计记录，即对 UPDATE 语句所更新的每一行，均记录用户名、操作时间、学号、课号、score 列的旧值和新值。</p><p>首先，创建 sc_audit 表，用于保存该触发器产生的审计记录</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sc_audit</span><br><span class="line">(</span><br><span class="line">log_id <span class="type">SERIAL</span>, <span class="comment">-- IDENTITY 属性</span></span><br><span class="line">login_name <span class="type">VARCHAR</span>(<span class="number">256</span>), <span class="comment">-- 登录名</span></span><br><span class="line">update_date <span class="type">TIMESTAMP</span>, <span class="comment">-- 修改时间</span></span><br><span class="line">sno <span class="type">CHAR</span>(<span class="number">5</span>), <span class="comment">-- 学号</span></span><br><span class="line">cno <span class="type">SMALLINT</span>, <span class="comment">-- 课程号</span></span><br><span class="line">score_old <span class="type">SMALLINT</span>, <span class="comment">-- 成绩的旧值</span></span><br><span class="line">score_new <span class="type">SMALLINT</span>, <span class="comment">-- 成绩的新值</span></span><br><span class="line"><span class="keyword">CONSTRAINT</span> sc_audit_pk <span class="keyword">PRIMARY KEY</span>(log_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>创建触发器函数 sc_update_audit</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR REPLACE</span> <span class="keyword">FUNCTION</span> sc_update_audit() <span class="keyword">RETURNS</span> <span class="type">TRIGGER</span> <span class="keyword">AS</span> $$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">BEGIN</span></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">IF</span> <span class="built_in">OLD</span>.score &lt;&gt; <span class="built_in">NEW</span>.score <span class="keyword">THEN</span></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc_audit(login_name, update_date, sno, cno, score_old, score_new)</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_USER</span>, <span class="built_in">CURRENT_TIMESTAMP</span>, <span class="built_in">OLD</span>.sno, <span class="built_in">OLD</span>.cno, <span class="built_in">OLD</span>.score, <span class="built_in">NEW</span>.score;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span> <span class="keyword">IF</span>;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">RETURN</span> <span class="built_in">NEW</span>;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span>;</span></span><br><span class="line"><span class="language-pgsql">$$</span> <span class="keyword">LANGUAGE</span> plpgsql;</span><br></pre></td></tr></table></figure><p>创建 sc 表上的触发器 tr_sc_update_audit，绑定触发器函数 sc_update_audit</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> tr_sc_update_audit</span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">UPDATE</span> <span class="keyword">ON</span> sc</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">EXECUTE</span> <span class="keyword">PROCEDURE</span> sc_update_audit();</span><br></pre></td></tr></table></figure><h3 id="使用触发器">2.使用触发器</h3><p>执行 UPDATE 语句，给学号为 22001 的学生的每门课程成绩加 1 分</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> sc <span class="keyword">SET</span> score = score + <span class="number">1</span> <span class="keyword">WHERE</span> sno = <span class="string">&#x27;22001&#x27;</span>;</span><br></pre></td></tr></table></figure><p>查看sc表</p><p><img src="./image-20240520213157505.png" alt="image-20240520213157505" style="zoom:80%;" /></p><p>查看sc_audit表</p><p><img src="./image-20240520213254080.png" alt="image-20240520213254080" style="zoom:80%;" /></p><p>执行 UPDATE 语句，给学号为 22001 的学生的每门课程成绩减 1 分，即恢复为每门课程原来的成绩</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> sc <span class="keyword">SET</span> score = score - <span class="number">1</span> <span class="keyword">WHERE</span> sno = <span class="string">&#x27;22001&#x27;</span>;</span><br></pre></td></tr></table></figure><p>查看sc表</p><p><img src="./image-20240520213425020.png" alt="image-20240520213425020" style="zoom:80%;" /></p><p>再查看 sc_audit 表</p><p><img src="./image-20240520213454419.png" alt="image-20240520213454419" style="zoom:80%;" /></p><h3 id="修改触发器名称">3.修改触发器名称</h3><p>【查询 31】将触发器 tr_sc_update_audit 的名称修改为 tr_score_audit。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TRIGGER</span> tr_sc_update_audit <span class="keyword">ON</span> sc <span class="keyword">RENAME</span> <span class="keyword">TO</span> tr_score_audit;</span><br></pre></td></tr></table></figure><h3 id="删除触发器及相关数据库对象">4.删除触发器及相关数据库对象</h3><p>【查询 32】将前面建立的触发器及相关的数据库对象删除。</p><p>删除触发器 tr_score_audit</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> tr_score_audit <span class="keyword">ON</span> sc;</span><br></pre></td></tr></table></figure><p>删除触发器函数 sc_update_audit</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> sc_update_audit;</span><br></pre></td></tr></table></figure><p>删除 sc_audit 表</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> sc_audit;</span><br></pre></td></tr></table></figure><h2 id="五使用事务机制">（五）使用事务机制</h2><p><font color = "red">此部分和操作手册里很不相同，局限于本机状态只有pdAdmin4</font></p><h3 id="验证事务原子性">1.验证事务原子性</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向 sc 表中插入一条数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span> (<span class="string">&#x27;22004&#x27;</span>, <span class="number">1</span>, <span class="number">86</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询表中的数据以确认插入</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> sno = <span class="string">&#x27;22004&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 回滚事务</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 再次查询表中的数据以确认回滚</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> sno = <span class="string">&#x27;22004&#x27;</span>;</span><br></pre></td></tr></table></figure><p>插入后</p><p><img src="./image-20240520214656091.png" alt="image-20240520214656091" style="zoom:80%;" /></p><p>回滚后</p><p><img src="./image-20240520214717416.png" alt="image-20240520214717416" style="zoom:80%;" /></p><p><font color = "red">后面的部分需要用到SSH连接数据库进行相应的操作，故没有做</font></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vendmachine</title>
      <link href="/2024/05/20/vendmachine/"/>
      <url>/2024/05/20/vendmachine/</url>
      
        <content type="html"><![CDATA[<h1 id="实验三自动贩售机的设计和实现">实验三、自动贩售机的设计和实现</h1><h2 id="一-实验目的"><strong>一． 实验目的</strong></h2><ol type="1"><li><p>掌握有限状态机的设计方法。；</p></li><li><p>能够使用 SystemVerilog 进行三段式状态机的建模。</p></li></ol><h2 id="二-实验环境"><strong>二． 实验环境</strong></h2><ol type="1"><li><p>操作系统：Windows 10 或 Ubuntu 16.04</p></li><li><p>开发环境：Xilinx Vivado 2018.2</p></li><li><p>硬件平台：远程 FPGA 云平台</p></li></ol><h2 id="三-实验原理"><strong>三． 实验原理</strong></h2><p>有限状态机分为 Moore 型状态机和 Mealy 型状态机。前者，状态机的输出仅由当前状态决定，如图 4-1 所示，在状态转换图的绘制中，输出信息标在状态（圆圈）中。</p><figure><img src="./image-20240520144102043.png" alt="image-20240520144102043" /><figcaption aria-hidden="true">image-20240520144102043</figcaption></figure><p>采用硬件描述语言进行状态机建模时，建议使用 3 段式。第一段描述状态的转换（即对状态机中的寄存器进行建模），采用时序逻辑实现；第二段描述状态转换条件和规律（即对状态机中的次态逻辑进行建模），采用组合逻辑实现；第三段描述输出逻辑，根据实际设计需要可采用组合逻辑或时序逻辑实现。三段式状态机建模的模板如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//第一段，同步时序 always 模块，描述状态的转换</span><br><span class="line">always_ff (posedge clk) begin //同步复位</span><br><span class="line">if(!rst_n)</span><br><span class="line">current_state &lt;= S0;</span><br><span class="line">else</span><br><span class="line">current_state &lt;= next_state; //注意，使用的是非阻塞赋值</span><br><span class="line">end</span><br><span class="line">//第二段，组合逻辑 always 模块，描述状态转移条件判断</span><br><span class="line">always_comb begin</span><br><span class="line">case(current_state)</span><br><span class="line">S1: if(...)</span><br><span class="line">next_state = S2; //阻塞赋值</span><br><span class="line">...</span><br><span class="line">endcase</span><br><span class="line">end</span><br><span class="line">//第三段，同步时序 always 模块（组合逻辑也可以），描述状态机的输出</span><br><span class="line">always @ (posedge clk) begin</span><br><span class="line">...//初始化</span><br><span class="line">case(next_state)</span><br><span class="line">S1: out1 &lt;= 1&#x27;b1; //注意是非阻塞逻辑</span><br><span class="line">S2: out2 &lt;= 1&#x27;b1;</span><br><span class="line">default:... //default 的作用是免除综合工具综合出锁存器</span><br><span class="line">endcase</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="四-实验内容"><strong>四． 实验内容</strong></h2><p>采用有限状态机，基于 SystemVerilog HDL 设计并实现一个报纸自动贩售机。整个工程的顶层模块如图 4-3 所示，输入/输出端口如表 4-1 所示。使用 <strong>4 个七段数码管</strong>实时显示已付款和找零情况。其中，两个数码管对应“已付款”，另两个数码管对应“找零”，单位为分。通过 <strong>1 个拨动开关</strong>对数字钟进行复位控制。使用<strong>两个按键</strong>模拟投币，其中一个按键对应 5 分，另一个按键对应 1 角。使用 <strong>1 个LED 灯</strong>标识出售是否成功，灯亮表示出售成功，否则表示已付款不够，出售失败。</p><p>假设报纸价格为 15 分，合法的投币组合包括：</p><p>⚫ 1 个 5 分的硬币和一个 1 角的硬币，不找零</p><p>⚫ 3 个五分的硬币，不找零</p><p>⚫ 1 个 1 角的硬币和一个 5 分的硬币，不找零</p><p>⚫ 两个 1 角的硬币是合法的，找零 5 分。</p><p>当投入硬币的组合为上面 4 种之一时，则购买成功，LED 灯亮。<strong>购买成功后，LED灯持续亮 10 秒，然后自动熄灭，同时 4 个数码管也恢复为 0</strong>。</p><figure><img src="./image-20240520144232012.png" alt="image-20240520144232012" /><figcaption aria-hidden="true">image-20240520144232012</figcaption></figure><p>报纸自动贩售机由 4 部分构成。</p><p>⚫ 第一部分是<strong>计时器模块</strong>，该模块又由 3 个子模块构成，分别是计数器电路、使能时钟生成电路和边沿检测电路。</p><p>⚫ 第二部分是整个自动贩售机电路的核心——<strong>贩售机状态机</strong>。状态机根据投币情况产生“已付款”和“找零”输出。此外，如果已付款超过 15 分，则将 LED 灯点亮，表示出售成功。</p><p>⚫ 第三部分是两个 <strong>8 位二进制转 BCD 模块</strong>，分别将二进制的“已付款”和“找零”值转化为 BCD 编码，即 10 进制数。<strong>本实验中，该模块不需要实现，由教师直接提供 IP 使用</strong>。</p><p>⚫ 第四部分是 <strong>7 段数码管动态扫描显示模块</strong>，它实现“已付款”和“找零”值的最终显示。</p><figure><img src="./image-20240520144412271.png" alt="image-20240520144412271" /><figcaption aria-hidden="true">image-20240520144412271</figcaption></figure><p><strong>完成上述分秒数字钟的设计，需要有以下几点需要注意：</strong></p><ol type="1"><li><p>7 段数码管动态扫描必须采用<strong>使能时钟</strong>实现，扫描频率为 <strong>1KHz</strong>（1ms）。</p></li><li><p>必须通过边沿检测电路识别<strong>“5 分”和“1 角”</strong>按键按下产生的上升沿，以用于后续处理。</p></li><li><p>用于计时的时钟频率为 <strong>25MHz</strong>（40ns）。</p></li><li><p>由于 7 段数码管扫描周期是 1ms，购买成功后需要等待 10s，从而造成仿真时间过长。<strong>为了加快仿真速度，可以在仿真的时候使用较大的计时单位和扫描速度</strong>。</p></li></ol><h2 id="五.-实验步骤">五. 实验步骤</h2><h3 id="第一部分计时器模块">第一部分、计时器模块</h3><h4 id="使能时钟生成器"><a id = "enable_1ms">1.使能时钟生成器</a></h4><p>首先系统的时钟主频为25MHz，所以时钟周期为1/25MHz = 40ns</p><p>我们要产生1ms的使能信号，只需经过1ms/40ns = 25000个时钟周期</p><p>因此可以定义一个计时器，每当counter == 24999时，就产生一个使能信号，并把counter重置为0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">module enable_clock(</span><br><span class="line">    input logic sys_clk,</span><br><span class="line">    input logic sys_rst_n,</span><br><span class="line">    output logic enable_1ms</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    logic [14:0] counter;</span><br><span class="line">    //为了加快仿真速度，从25000调整到24</span><br><span class="line">    parameter integer ONE_MS = 25000;       //输入时钟频率为25MHz</span><br><span class="line">    </span><br><span class="line">    always_ff @(posedge sys_clk)</span><br><span class="line">        if(~sys_rst_n)</span><br><span class="line">            counter &lt;= 15&#x27;d0;</span><br><span class="line">        else if(counter == ONE_MS -1)</span><br><span class="line">            counter &lt;= 15&#x27;d0;</span><br><span class="line">        else</span><br><span class="line">            counter &lt;= counter + 1;</span><br><span class="line">            </span><br><span class="line">    assign enable_1ms = (counter == ONE_MS -1);</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h4 id="边沿检测电路">2.边沿检测电路</h4><p>在头歌中已经联系过了边沿检测的书写，主要的原理就是保存上一时刻的信号值，如果上一时刻的信号为0，下一时刻的信号为1，那么就可以检测到一个上升沿。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">module edge_detection(</span><br><span class="line">    input logic sys_clk,</span><br><span class="line">    input logic sys_rst_n,</span><br><span class="line">    input logic signal_in,</span><br><span class="line">    output logic edge_detection</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    logic signal_in_d;          //上一时刻的signal_in</span><br><span class="line">    </span><br><span class="line">    always_ff @(posedge sys_clk)</span><br><span class="line">        if(~sys_rst_n)</span><br><span class="line">            signal_in_d &lt;= 0;</span><br><span class="line">        else</span><br><span class="line">            signal_in_d &lt;= signal_in;</span><br><span class="line">     </span><br><span class="line">     assign edge_detection = ~signal_in_d &amp; signal_in;          //上升沿</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><p>通过边沿检测电路，我们可以检测到硬币被投入的时机，并且防止投币被多次计算</p><h4 id="计数器">3.计数器</h4><p>这一部分主要是为了在售出成功后保持10s的LED灯亮起，所以要设计一个10s的计数器。我们可以借鉴上面的1ms使能信号的产生，这里无非是250000000个时钟周期。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">module timer_10s(</span><br><span class="line">    input logic sys_clk,</span><br><span class="line">    input logic sys_rst_n,</span><br><span class="line">    input logic start,</span><br><span class="line">    output logic done</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    logic[31:0] count;</span><br><span class="line">    parameter integer TEN_SECONDS = 250000000;</span><br><span class="line">    </span><br><span class="line">    always_ff @(posedge sys_clk)</span><br><span class="line">        if(~sys_rst_n)</span><br><span class="line">            count &lt;= 0;</span><br><span class="line">        else if(start)</span><br><span class="line">            count &lt;= (count == TEN_SECONDS-1) ? 0 : count + 1;</span><br><span class="line">        else</span><br><span class="line">            count &lt;= 0;</span><br><span class="line">    </span><br><span class="line">    assign done = (count == TEN_SECONDS-1);</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h3 id="第二部分贩售状态机">第二部分、贩售状态机</h3><p>我们首先定义如下几个状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedef enum logic [2:0] &#123;</span><br><span class="line">        IDLE = 3&#x27;b000,      //空闲</span><br><span class="line">        PAID5 = 3&#x27;b001,</span><br><span class="line">        PAID10 = 3&#x27;b010,</span><br><span class="line">        PAID15 = 3&#x27;b011,</span><br><span class="line">        PAID20 = 3&#x27;b100,</span><br><span class="line">        WAIT_RESET = 3&#x27;b101</span><br><span class="line">    &#125; state_t;</span><br></pre></td></tr></table></figure><p>首先我们根据题目的描述，给出贩售状态机的状态转换图</p><p><img src="./image-20240520145948080.png" alt="image-20240520145948080" style="zoom:50%;" /></p><p>状态转移比较简单，每一次都是从次态变为现态，代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// State transition</span><br><span class="line">always_ff @(posedge sys_clk) begin</span><br><span class="line">    if (~sys_rst_n)</span><br><span class="line">        state &lt;= IDLE;</span><br><span class="line">    else</span><br><span class="line">        state &lt;= next_state;        //次态变为现态</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>次态逻辑里面定义了每种状态下的下一时刻的状态，代码如下</p><p>其中timer_done表示10s已经到了，那么就把PAID15和PAID20下一时刻的状态设置为WAIT_RESET</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">// Next state logic</span><br><span class="line">always_comb begin</span><br><span class="line">    case (state)</span><br><span class="line">        IDLE: begin</span><br><span class="line">            if (edge_detected_coin5)</span><br><span class="line">                next_state = PAID5;</span><br><span class="line">            else if (edge_detected_coin10)</span><br><span class="line">                next_state = PAID10;</span><br><span class="line">            else</span><br><span class="line">                next_state = state;</span><br><span class="line">        end</span><br><span class="line">        PAID5: begin</span><br><span class="line">            if (edge_detected_coin5)</span><br><span class="line">                next_state = PAID10;</span><br><span class="line">            else if (edge_detected_coin10)</span><br><span class="line">                next_state = PAID15;</span><br><span class="line">            else</span><br><span class="line">                next_state = state;</span><br><span class="line">        end</span><br><span class="line">        PAID10: begin</span><br><span class="line">            if (edge_detected_coin5)</span><br><span class="line">                next_state = PAID15;</span><br><span class="line">            else if (edge_detected_coin10)</span><br><span class="line">                next_state = PAID20;</span><br><span class="line">            else</span><br><span class="line">                next_state = state;</span><br><span class="line">        end</span><br><span class="line">        PAID15: begin</span><br><span class="line">            // 保持住现在的状态</span><br><span class="line">            if(timer_done)</span><br><span class="line">                next_state = WAIT_RESET;</span><br><span class="line">            else</span><br><span class="line">                next_state = state;</span><br><span class="line">        end</span><br><span class="line">        PAID20: begin</span><br><span class="line">            // 保持住现在的状态</span><br><span class="line">            if(timer_done)</span><br><span class="line">                next_state = WAIT_RESET;</span><br><span class="line">            else</span><br><span class="line">                next_state = state;</span><br><span class="line">        end</span><br><span class="line">        WAIT_RESET: next_state = IDLE;</span><br><span class="line">        default: next_state = IDLE;</span><br><span class="line">    endcase</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>输出逻辑分别定义了price，change，open（表示LED灯是否亮起），这里我多定义了一个LED状态，用led表示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Output logic</span><br><span class="line">assign price =  (state == WAIT_RESET) ? 8&#x27;d0 : total_paid; // Price represents the total paid amount</span><br><span class="line">assign change = (state == WAIT_RESET) ? 8&#x27;d0 : change_amount;</span><br><span class="line">assign open = (state == PAID15 || state == PAID20);</span><br><span class="line">assign led = (state == PAID15 || state == PAID20); // LED on for 10 seconds after successful purchase</span><br></pre></td></tr></table></figure><p>然后再分别定义total_paid和change_amount</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// Total paid logic</span><br><span class="line">always_ff @(posedge sys_clk) begin</span><br><span class="line">    if (~sys_rst_n)</span><br><span class="line">        total_paid &lt;= 8&#x27;d0;</span><br><span class="line">    else if(state == WAIT_RESET)//这句话保证了在出售成功后10s能够自动清零</span><br><span class="line">        total_paid &lt;= 8&#x27;d0;</span><br><span class="line">    else if (edge_detected_coin5)</span><br><span class="line">        total_paid &lt;= total_paid + 8&#x27;d5;</span><br><span class="line">    else if (edge_detected_coin10)</span><br><span class="line">        total_paid &lt;= total_paid + 8&#x27;d10;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">// Change calculation logic</span><br><span class="line">always_ff @(posedge sys_clk) begin</span><br><span class="line">    if (~sys_rst_n)</span><br><span class="line">        change_amount &lt;= 8&#x27;d0;</span><br><span class="line">    else if (state == PAID20)//因为只有PAID20状态为合法状态，所以只需要定义固定的找零值为5</span><br><span class="line">        change_amount &lt;= 8&#x27;d5;</span><br><span class="line">    else</span><br><span class="line">        change_amount &lt;= 8&#x27;d0;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>vending_machine_fsm模块代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">module vending_machine_fsm(</span><br><span class="line">    input logic sys_clk,</span><br><span class="line">    input logic sys_rst_n,</span><br><span class="line">    input logic coin5,</span><br><span class="line">    input logic coin10,</span><br><span class="line">    output logic [7:0] change,</span><br><span class="line">    output logic [7:0] price,</span><br><span class="line">    output logic open,</span><br><span class="line">    output logic led</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    // 定义枚举类——状态</span><br><span class="line">    typedef enum logic [2:0] &#123;</span><br><span class="line">        IDLE = 3&#x27;b000,      //空闲</span><br><span class="line">        PAID5 = 3&#x27;b001,</span><br><span class="line">        PAID10 = 3&#x27;b010,</span><br><span class="line">        PAID15 = 3&#x27;b011,</span><br><span class="line">        PAID20 = 3&#x27;b100,</span><br><span class="line">        WAIT_RESET = 3&#x27;b101</span><br><span class="line">    &#125; state_t;</span><br><span class="line"></span><br><span class="line">    state_t state, next_state;</span><br><span class="line">    logic [7:0] total_paid;</span><br><span class="line">    logic [7:0] change_amount;</span><br><span class="line">    logic timer_done;</span><br><span class="line">    logic enable_1ms;</span><br><span class="line">    logic edge_detected_coin5, edge_detected_coin10;</span><br><span class="line">    </span><br><span class="line">    timer_10s timer_10s_inst(</span><br><span class="line">        .sys_clk(sys_clk),</span><br><span class="line">        .sys_rst_n(sys_rst_n),</span><br><span class="line">        .start(state == PAID15 || state == PAID20),</span><br><span class="line">        .done(timer_done)</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    // Instantiate timer module for edge detection and 1ms enable signal</span><br><span class="line">    timer_module timer_module_inst(</span><br><span class="line">        .sys_clk(sys_clk),</span><br><span class="line">        .sys_rst_n(sys_rst_n),</span><br><span class="line">        .coin5(coin5),</span><br><span class="line">        .coin10(coin10),</span><br><span class="line">        .enable_1ms(enable_1ms),</span><br><span class="line">        .edge_detected_coin5(edge_detected_coin5),</span><br><span class="line">        .edge_detected_coin10(edge_detected_coin10)</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    // Output logic</span><br><span class="line">    assign price =  (state == WAIT_RESET) ? 8&#x27;d0 : total_paid; // Price represents the total paid amount</span><br><span class="line">    assign change = (state == WAIT_RESET) ? 8&#x27;d0 : change_amount;</span><br><span class="line">    assign open = (state == PAID15 || state == PAID20);</span><br><span class="line">    assign led = (state == PAID15 || state == PAID20); // LED on for 10 seconds after successful purchase</span><br><span class="line"></span><br><span class="line">    // State transition</span><br><span class="line">    always_ff @(posedge sys_clk) begin</span><br><span class="line">        if (~sys_rst_n)</span><br><span class="line">            state &lt;= IDLE;</span><br><span class="line">        else</span><br><span class="line">            state &lt;= next_state;        //次态变为现态</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    // Next state logic</span><br><span class="line">    always_comb begin</span><br><span class="line">        case (state)</span><br><span class="line">            IDLE: begin</span><br><span class="line">                if (edge_detected_coin5)</span><br><span class="line">                    next_state = PAID5;</span><br><span class="line">                else if (edge_detected_coin10)</span><br><span class="line">                    next_state = PAID10;</span><br><span class="line">                else</span><br><span class="line">                    next_state = state;</span><br><span class="line">            end</span><br><span class="line">            PAID5: begin</span><br><span class="line">                if (edge_detected_coin5)</span><br><span class="line">                    next_state = PAID10;</span><br><span class="line">                else if (edge_detected_coin10)</span><br><span class="line">                    next_state = PAID15;</span><br><span class="line">                else</span><br><span class="line">                    next_state = state;</span><br><span class="line">            end</span><br><span class="line">            PAID10: begin</span><br><span class="line">                if (edge_detected_coin5)</span><br><span class="line">                    next_state = PAID15;</span><br><span class="line">                else if (edge_detected_coin10)</span><br><span class="line">                    next_state = PAID20;</span><br><span class="line">                else</span><br><span class="line">                    next_state = state;</span><br><span class="line">            end</span><br><span class="line">            PAID15: begin</span><br><span class="line">                // 保持住现在的状态</span><br><span class="line">                if(timer_done)</span><br><span class="line">                    next_state = WAIT_RESET;</span><br><span class="line">                else</span><br><span class="line">                    next_state = state;</span><br><span class="line">            end</span><br><span class="line">            PAID20: begin</span><br><span class="line">                // 保持住现在的状态</span><br><span class="line">                if(timer_done)</span><br><span class="line">                    next_state = WAIT_RESET;</span><br><span class="line">                else</span><br><span class="line">                    next_state = state;</span><br><span class="line">            end</span><br><span class="line">            WAIT_RESET: next_state = IDLE;</span><br><span class="line">            default: next_state = IDLE;</span><br><span class="line">        endcase</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    // Total paid logic</span><br><span class="line">    always_ff @(posedge sys_clk) begin</span><br><span class="line">        if (~sys_rst_n)</span><br><span class="line">            total_paid &lt;= 8&#x27;d0;</span><br><span class="line">        else if(state == WAIT_RESET)</span><br><span class="line">            total_paid &lt;= 8&#x27;d0;</span><br><span class="line">        else if (edge_detected_coin5)</span><br><span class="line">            total_paid &lt;= total_paid + 8&#x27;d5;</span><br><span class="line">        else if (edge_detected_coin10)</span><br><span class="line">            total_paid &lt;= total_paid + 8&#x27;d10;</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    // Change calculation logic</span><br><span class="line">    always_ff @(posedge sys_clk) begin</span><br><span class="line">        if (~sys_rst_n)</span><br><span class="line">            change_amount &lt;= 8&#x27;d0;</span><br><span class="line">        else if (state == PAID20)</span><br><span class="line">            change_amount &lt;= 8&#x27;d5;</span><br><span class="line">        else</span><br><span class="line">            change_amount &lt;= 8&#x27;d0;</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h3 id="第三部分8为二进制转bcd模块">第三部分、8为二进制转BCD模块</h3><p><strong>本实验中，该模块不需要实现，由教师直接提供 IP 使用</strong>。</p><p>IP核实例化后结构如下</p><p><img src="./image-20240520152501255.png" alt="image-20240520152501255" style="zoom:50%;" /></p><h3 id="第四部分7段数码管动态扫描显示模块">第四部分、7段数码管动态扫描显示模块</h3><p>为了实现动态扫描，还是要利用到之前定义的<a href="#enable_1ms">使能时钟生成器</a>。</p><p>此外，还需要实现七段数码管的译码器，即把十进制0~9翻译成对应的8位数码管电路（本实验是8位，最高位始终无效），注意是共阳极低电平有效，代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">module seven_segment_decoder(</span><br><span class="line">    input logic [3:0] digit,</span><br><span class="line">    output logic [7:0] seg</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    always_comb begin</span><br><span class="line">        case (digit)</span><br><span class="line">            4&#x27;d0: seg = 8&#x27;b11000000; // 0</span><br><span class="line">            4&#x27;d1: seg = 8&#x27;b11111001; // 1</span><br><span class="line">            4&#x27;d2: seg = 8&#x27;b10100100; // 2</span><br><span class="line">            4&#x27;d3: seg = 8&#x27;b10110000; // 3</span><br><span class="line">            4&#x27;d4: seg = 8&#x27;b10011001; // 4</span><br><span class="line">            4&#x27;d5: seg = 8&#x27;b10010010; // 5</span><br><span class="line">            4&#x27;d6: seg = 8&#x27;b10000010; // 6</span><br><span class="line">            4&#x27;d7: seg = 8&#x27;b11111000; // 7</span><br><span class="line">            4&#x27;d8: seg = 8&#x27;b10000000; // 8</span><br><span class="line">            4&#x27;d9: seg = 8&#x27;b10010000; // 9</span><br><span class="line">            default: seg = 8&#x27;b11111111; // Blank</span><br><span class="line">        endcase</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><p>在实现4位七段数码管显示模块时，应当实例化上面的两个模块。由于是4位需要来回扫描，因此可以定义一个scan_state来表示扫描到的位置，每次扫描到对应的位置，都使能相应的数码管，从而显示不同位置上的数字。这些数字从左到右分别是change_bcd[7:4], change_bcd[3:0], paid_bcd[7:4], paid_bcd[3:0]。</p><p>模块代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">module seven_segment_display(</span><br><span class="line">    input logic sys_clk,</span><br><span class="line">    input logic sys_rst_n,</span><br><span class="line">    input logic [7:0] paid_bcd,</span><br><span class="line">    input logic [7:0] change_bcd,</span><br><span class="line">    output logic [7:0] a_to_g,</span><br><span class="line">    output logic [3:0] an</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    // Internal signals</span><br><span class="line">    logic [1:0] scan_state;</span><br><span class="line">    logic [3:0] digit;</span><br><span class="line">    logic [7:0] seg;</span><br><span class="line">    logic enable_1ms;</span><br><span class="line">    </span><br><span class="line">    // Instantiate the enable clock module to generate 1ms enable signal</span><br><span class="line">    enable_clock enable_clock_inst (</span><br><span class="line">        .sys_clk(sys_clk),</span><br><span class="line">        .sys_rst_n(sys_rst_n),</span><br><span class="line">        .enable_1ms(enable_1ms)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    // Instantiate the segment decoder</span><br><span class="line">    seven_segment_decoder decoder (</span><br><span class="line">        .digit(digit),</span><br><span class="line">        .seg(seg)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    // Scan state machine</span><br><span class="line">    always_ff @(posedge sys_clk) begin</span><br><span class="line">        if (~sys_rst_n)</span><br><span class="line">            scan_state &lt;= 2&#x27;d0;</span><br><span class="line">            //为了加快仿真速度，这里调整为50个时钟周期（1/10 时间）</span><br><span class="line">        else if (enable_1ms) // 25MHz clock / 1KHz = 25000   如果计数器 counter 达到24999（即1ms），则将 scan_state 加1。</span><br><span class="line">            scan_state &lt;= (scan_state == 2&#x27;d3) ? 2&#x27;d0 : scan_state + 2&#x27;d1;//该变量用于跟踪当前正在扫描的数码管，2&#x27;d0到2&#x27;d3分别表示4个数码管。</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    // Digit and anode control</span><br><span class="line">    always_comb begin</span><br><span class="line">        case (scan_state)</span><br><span class="line">            2&#x27;d0: begin</span><br><span class="line">                digit = paid_bcd[3:0];</span><br><span class="line">                an = 4&#x27;b0001; // Enable AN0</span><br><span class="line">            end</span><br><span class="line">            2&#x27;d1: begin</span><br><span class="line">                digit = paid_bcd[7:4];</span><br><span class="line">                an = 4&#x27;b0010; // Enable AN1</span><br><span class="line">            end</span><br><span class="line">            2&#x27;d2: begin</span><br><span class="line">                digit = change_bcd[3:0];</span><br><span class="line">                an = 4&#x27;b0100; // Enable AN2</span><br><span class="line">            end</span><br><span class="line">            2&#x27;d3: begin</span><br><span class="line">                digit = change_bcd[7:4];</span><br><span class="line">                an = 4&#x27;b1000; // Enable AN3</span><br><span class="line">            end</span><br><span class="line">            default: begin</span><br><span class="line">                digit = 4&#x27;d0;</span><br><span class="line">                an = 4&#x27;b0000;</span><br><span class="line">            end</span><br><span class="line">        endcase</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    // Assign segment output</span><br><span class="line">    assign a_to_g = seg;</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><p>以上，便完成了所有子模块的实现，现在可以构造顶层模块vend</p><h3 id="第五部分顶层模块">第五部分、顶层模块</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">module vend(</span><br><span class="line">    input sys_clk, sys_rst_n,</span><br><span class="line">    input coin5, coin10,</span><br><span class="line">    output [3 : 0] an,</span><br><span class="line">    output [7 : 0] a_to_g,</span><br><span class="line">    output open</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    logic led;</span><br><span class="line">    logic [7:0] paid_bin, change_bin;</span><br><span class="line">    logic [7:0] paid_bcd, change_bcd;</span><br><span class="line"></span><br><span class="line">    // Instantiate FSM</span><br><span class="line">    vending_machine_fsm fsm (</span><br><span class="line">        .sys_clk(sys_clk),</span><br><span class="line">        .sys_rst_n(sys_rst_n),</span><br><span class="line">        .coin5(coin5),</span><br><span class="line">        .coin10(coin10),</span><br><span class="line">        .change(change_bin),</span><br><span class="line">        .price(paid_bin),</span><br><span class="line">        .open(open),</span><br><span class="line">        .led(led)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    // Instantiate bin2bcd for paid and change</span><br><span class="line">    bin2bcd bin2bcd_paid (</span><br><span class="line">        .bin(paid_bin),</span><br><span class="line">        .bcd(paid_bcd)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    bin2bcd bin2bcd_change (</span><br><span class="line">        .bin(change_bin),</span><br><span class="line">        .bcd(change_bcd)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    // Instantiate 7-segment display</span><br><span class="line">    seven_segment_display display (</span><br><span class="line">        .sys_clk(sys_clk),</span><br><span class="line">        .sys_rst_n(sys_rst_n),</span><br><span class="line">        .paid_bcd(paid_bcd),</span><br><span class="line">        .change_bcd(change_bcd),</span><br><span class="line">        .a_to_g(a_to_g),</span><br><span class="line">        .an(an)</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h3 id="第六部分仿真测试">第六部分、仿真测试</h3><p>由于本实验的模块过多，所以我采用了单元测试的方法，分别测试了timer_module, vending_machine_fsm, seven_segment_display, vend模块，以下便写出测试的代码和仿真结果</p><h4 id="timer_module">1.timer_module</h4><p>为了加快仿真速度，我们把SIMULATION_CLK_PERIOD设置为4，仿真等待时间设置为20（总仿真时间仅有1000ns），把使能时钟中的25000改为24</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">`timescale 1ns / 1ps</span><br><span class="line"></span><br><span class="line">module timer_module_tb;</span><br><span class="line"></span><br><span class="line">    // Parameters for simulation</span><br><span class="line">    localparam integer SIMULATION_CLK_PERIOD = 4; // 4ns for 250MHz clock to speed up simulation</span><br><span class="line">    localparam integer SIMULATION_WAIT_TIME = 20; // 20ns for each test case observation</span><br><span class="line"></span><br><span class="line">    // Inputs</span><br><span class="line">    logic sys_clk;</span><br><span class="line">    logic sys_rst_n;</span><br><span class="line">    logic coin5;</span><br><span class="line">    logic coin10;</span><br><span class="line"></span><br><span class="line">    // Outputs</span><br><span class="line">    logic enable_1ms;</span><br><span class="line">    logic edge_detected_coin5;</span><br><span class="line">    logic edge_detected_coin10;</span><br><span class="line"></span><br><span class="line">    // Instantiate the timer module</span><br><span class="line">    timer_module uut (</span><br><span class="line">        .sys_clk(sys_clk),</span><br><span class="line">        .sys_rst_n(sys_rst_n),</span><br><span class="line">        .coin5(coin5),</span><br><span class="line">        .coin10(coin10),</span><br><span class="line">        .enable_1ms(enable_1ms),</span><br><span class="line">        .edge_detected_coin5(edge_detected_coin5),</span><br><span class="line">        .edge_detected_coin10(edge_detected_coin10)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    // Clock generation</span><br><span class="line">    initial begin</span><br><span class="line">        sys_clk = 0;</span><br><span class="line">        forever #(SIMULATION_CLK_PERIOD / 2) sys_clk = ~sys_clk;</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    // Stimulus process</span><br><span class="line">    initial begin</span><br><span class="line">        // Initialize Inputs</span><br><span class="line">        sys_rst_n = 0;</span><br><span class="line">        coin5 = 0;</span><br><span class="line">        coin10 = 0;</span><br><span class="line"></span><br><span class="line">        // Apply reset</span><br><span class="line">        #(SIMULATION_WAIT_TIME);</span><br><span class="line">        sys_rst_n = 1;</span><br><span class="line"></span><br><span class="line">        // Test edge detection for coin5</span><br><span class="line">        #(SIMULATION_WAIT_TIME);</span><br><span class="line">        coin5 = 1;</span><br><span class="line">        #(SIMULATION_WAIT_TIME);</span><br><span class="line">        coin5 = 0;</span><br><span class="line">        #(SIMULATION_WAIT_TIME * 5); // Wait to observe edge detection</span><br><span class="line"></span><br><span class="line">        // Test edge detection for coin10</span><br><span class="line">        #(SIMULATION_WAIT_TIME);</span><br><span class="line">        coin10 = 1;</span><br><span class="line">        #(SIMULATION_WAIT_TIME);</span><br><span class="line">        coin10 = 0;</span><br><span class="line">        #(SIMULATION_WAIT_TIME * 5); // Wait to observe edge detection</span><br><span class="line"></span><br><span class="line">        // Observe enable_1ms signal (accelerated to observe in short time)</span><br><span class="line">        #(SIMULATION_WAIT_TIME * 20); // Short wait to observe 1ms signal</span><br><span class="line"></span><br><span class="line">        // End of simulation</span><br><span class="line">        $stop;</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><p>仿真结果</p><p><img src="./image-20240520154650111.png" alt="image-20240520154650111" style="zoom:80%;" /></p><p>可以看到，在检测到coin5和coin10上升沿的时候，边沿检测的值为1</p><h4 id="vending_machine_fsm">2.vending_machine_fsm</h4><p>这里可以分四种情况来测，我这里只列举出一种情况（5+5+10）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">`timescale 1ns / 1ps</span><br><span class="line"></span><br><span class="line">module vending_machine_fsm_tb;</span><br><span class="line"></span><br><span class="line">    // Parameters for simulation</span><br><span class="line">    localparam integer SIMULATION_CLK_PERIOD = 4; // 4ns for 250MHz clock to speed up simulation</span><br><span class="line">    localparam integer SIMULATION_WAIT_TIME = 20; // 20ns for each test case observation</span><br><span class="line"></span><br><span class="line">    // Inputs</span><br><span class="line">    logic sys_clk;</span><br><span class="line">    logic sys_rst_n;</span><br><span class="line">    logic coin5;</span><br><span class="line">    logic coin10;</span><br><span class="line"></span><br><span class="line">    // Outputs</span><br><span class="line">    logic [7:0] change;</span><br><span class="line">    logic [7:0] price;</span><br><span class="line">    logic open;</span><br><span class="line">    logic led;</span><br><span class="line"></span><br><span class="line">    // Instantiate the vending machine FSM module</span><br><span class="line">    vending_machine_fsm uut (</span><br><span class="line">        .sys_clk(sys_clk),</span><br><span class="line">        .sys_rst_n(sys_rst_n),</span><br><span class="line">        .coin5(coin5),</span><br><span class="line">        .coin10(coin10),</span><br><span class="line">        .change(change),</span><br><span class="line">        .price(price),</span><br><span class="line">        .open(open),</span><br><span class="line">        .led(led)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    // Clock generation</span><br><span class="line">    initial begin</span><br><span class="line">        sys_clk = 0;</span><br><span class="line">        forever #(SIMULATION_CLK_PERIOD / 2) sys_clk = ~sys_clk;</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    // Stimulus process</span><br><span class="line">    initial begin</span><br><span class="line">        // Initialize Inputs</span><br><span class="line">        sys_rst_n = 0;</span><br><span class="line">        coin5 = 0;</span><br><span class="line">        coin10 = 0;</span><br><span class="line"></span><br><span class="line">        // Apply reset</span><br><span class="line">        #(SIMULATION_WAIT_TIME);</span><br><span class="line">        sys_rst_n = 1;</span><br><span class="line"></span><br><span class="line">        // Test case 4: Insert 5 cents, then another 5 cents, and then 10 cents to reach 20 cents</span><br><span class="line">        #(SIMULATION_WAIT_TIME);</span><br><span class="line">        coin5 = 1;</span><br><span class="line">        #(SIMULATION_WAIT_TIME);</span><br><span class="line">        coin5 = 0;</span><br><span class="line">        #(SIMULATION_WAIT_TIME * 2); // Short wait to observe state change</span><br><span class="line"></span><br><span class="line">        // Insert second 5 cents</span><br><span class="line">        #(SIMULATION_WAIT_TIME);</span><br><span class="line">        coin5 = 1;</span><br><span class="line">        #(SIMULATION_WAIT_TIME);</span><br><span class="line">        coin5 = 0;</span><br><span class="line">        #(SIMULATION_WAIT_TIME * 2); // Short wait to observe state change</span><br><span class="line"></span><br><span class="line">        // Insert 10 cents</span><br><span class="line">        #(SIMULATION_WAIT_TIME);</span><br><span class="line">        coin10 = 1;</span><br><span class="line">        #(SIMULATION_WAIT_TIME);</span><br><span class="line">        coin10 = 0;</span><br><span class="line">        #(SIMULATION_WAIT_TIME * 2); // Short wait to observe state change</span><br><span class="line"></span><br><span class="line">        // End of simulation</span><br><span class="line">        $stop;</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><p>仿真结果</p><p><img src="./image-20240520155139873.png" alt="image-20240520155139873" style="zoom:80%;" /></p><h4 id="seven_segment_display">3.seven_segment_display</h4><p>我分别测试了paid_bcd = 15, change_bcd = 5 和 paid_bcd = 20, change_bcd = 10，两种情况，这两种情况真实中并不能出现，该测试仅仅是为了观察动态扫描的每一位是否正常显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">`timescale 1ns / 1ps</span><br><span class="line"></span><br><span class="line">module seven_segment_display_tb;</span><br><span class="line"></span><br><span class="line">    // Parameters for simulation</span><br><span class="line">    localparam integer SIMULATION_CLK_PERIOD = 4; // 1ns for 1GHz clock to speed up simulation</span><br><span class="line">    localparam integer SIMULATION_WAIT_TIME = 20; // 10ns for each test case observation</span><br><span class="line"></span><br><span class="line">    // Inputs</span><br><span class="line">    logic sys_clk;</span><br><span class="line">    logic sys_rst_n;</span><br><span class="line">    logic [7:0] paid_bcd;</span><br><span class="line">    logic [7:0] change_bcd;</span><br><span class="line"></span><br><span class="line">    // Outputs</span><br><span class="line">    logic [7:0] a_to_g;</span><br><span class="line">    logic [3:0] an;</span><br><span class="line"></span><br><span class="line">    // Instantiate the seven segment display module</span><br><span class="line">    seven_segment_display uut (</span><br><span class="line">        .sys_clk(sys_clk),</span><br><span class="line">        .sys_rst_n(sys_rst_n),</span><br><span class="line">        .paid_bcd(paid_bcd),</span><br><span class="line">        .change_bcd(change_bcd),</span><br><span class="line">        .a_to_g(a_to_g),</span><br><span class="line">        .an(an)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    // Clock generation</span><br><span class="line">    initial begin</span><br><span class="line">        sys_clk = 0;</span><br><span class="line">        forever #(SIMULATION_CLK_PERIOD / 2) sys_clk = ~sys_clk;</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    // Stimulus process</span><br><span class="line">    initial begin</span><br><span class="line">        // Initialize Inputs</span><br><span class="line">        sys_rst_n = 0;</span><br><span class="line">        paid_bcd = 8&#x27;h00;</span><br><span class="line">        change_bcd = 8&#x27;h00;</span><br><span class="line"></span><br><span class="line">        // Apply reset</span><br><span class="line">        #(SIMULATION_WAIT_TIME);</span><br><span class="line">        sys_rst_n = 1;</span><br><span class="line"></span><br><span class="line">        // Test case: Display paid amount = 15, change amount = 5</span><br><span class="line">        #(SIMULATION_WAIT_TIME);</span><br><span class="line">        paid_bcd = 8&#x27;h15; // 15 in BCD</span><br><span class="line">        change_bcd = 8&#x27;h05; // 5 in BCD</span><br><span class="line">        #(SIMULATION_WAIT_TIME * 10); // Observe for a while</span><br><span class="line"></span><br><span class="line">        // Test case: Display paid amount = 20, change amount = 10</span><br><span class="line">        #(SIMULATION_WAIT_TIME);</span><br><span class="line">        paid_bcd = 8&#x27;h20; // 20 in BCD</span><br><span class="line">        change_bcd = 8&#x27;h10; // 10 in BCD</span><br><span class="line">        #(SIMULATION_WAIT_TIME * 10); // Observe for a while</span><br><span class="line"></span><br><span class="line">        // End of simulation</span><br><span class="line">        $stop;</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><p>仿真结果</p><figure><img src="./image-20240520155531944.png" alt="image-20240520155531944" /><figcaption aria-hidden="true">image-20240520155531944</figcaption></figure><p>将对应的a_to_g还原，可以发现这里的实现逻辑是正确的</p><h4 id="vend">4.vend</h4><p>这里我测试了两种情况，投入15分和投入20分，两种情况都能实现动态扫描（an[3:0]），且每位动态扫描的过程中都能够正确的显示，并且实现了投入15分后等待10s后（仿真时将时间加快了）会自动清零重新开始计数。</p><p>仿真结果</p><figure><img src="./image-20240520160354874.png" alt="image-20240520160354874" /><figcaption aria-hidden="true">image-20240520160354874</figcaption></figure><p>至此，所有模块的仿真测试均通过。</p><h2 id="六.-实验结果">六. 实验结果</h2><p><img src="./image-20240520161341223.png" alt="image-20240520161341223" style="zoom:50%;" /></p><p><img src="./image-20240520161355079.png" alt="image-20240520161355079" style="zoom:50%;" /></p><p><img src="./image-20240520161402310.png" alt="image-20240520161402310" style="zoom:50%;" /></p><p><img src="./image-20240520161411064.png" alt="image-20240520161411064" style="zoom:50%;" /></p><p><img src="./image-20240520161420887.png" alt="image-20240520161420887" style="zoom:50%;" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数电 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AlgorithmPractice</title>
      <link href="/2024/05/05/AlgorithmPractice/"/>
      <url>/2024/05/05/AlgorithmPractice/</url>
      
        <content type="html"><![CDATA[<h1 id="一二章-基础算法">一&amp;二章 基础算法</h1><h2 id="a.机器人模拟">A.机器人模拟</h2><p><img src="./image-20240505171330398.png" alt="image-20240505171330398" style="zoom: 67%;" /></p><blockquote><p>sample input</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line">WSDA</span><br><span class="line">AAAAA</span><br></pre></td></tr></table></figure><blockquote><p>sample output</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">0</span></span><br><span class="line">-<span class="number">5</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>solution</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    string move;</span><br><span class="line">    <span class="type">int</span>* pos = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        cin &gt;&gt; move;</span><br><span class="line">        pos[<span class="number">0</span>] = pos[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">0</span>;j&lt;move.<span class="built_in">length</span>();j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(move[j] == <span class="string">&#x27;W&#x27;</span>)&#123;</span><br><span class="line">                pos[<span class="number">1</span>]++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(move[j] == <span class="string">&#x27;S&#x27;</span>)&#123;</span><br><span class="line">                pos[<span class="number">1</span>]--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(move[j] == <span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">                pos[<span class="number">0</span>]--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pos[<span class="number">0</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; pos[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; pos[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="b.页码统计">B.页码统计</h2><p><img src="./image-20240505171534338.png" alt="image-20240505171534338" style="zoom:67%;" /></p><blockquote><p>sample input</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><blockquote><p>sample output</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>solution</p></blockquote><p><font color = "red">目前此方法过于繁琐</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    <span class="type">int</span> pageNum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>* res = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        cin &gt;&gt; pageNum;</span><br><span class="line">        <span class="keyword">while</span>(pageNum &gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pageNum&gt;<span class="number">0</span> &amp;&amp; pageNum&lt;=<span class="number">9</span>)&#123;</span><br><span class="line">                res[pageNum]++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pageNum&lt;=<span class="number">99</span>)&#123;</span><br><span class="line">                res[pageNum%<span class="number">10</span>]++;</span><br><span class="line">                res[pageNum/<span class="number">10</span>]++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pageNum&lt;=<span class="number">999</span>)&#123;</span><br><span class="line">                res[pageNum%<span class="number">10</span>]++;</span><br><span class="line">                res[(pageNum-(pageNum/<span class="number">100</span>)*<span class="number">100</span>)/<span class="number">10</span>]++;</span><br><span class="line">                res[pageNum/<span class="number">100</span>]++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pageNum&lt;=<span class="number">9999</span>)&#123;</span><br><span class="line">                res[pageNum%<span class="number">10</span>]++;</span><br><span class="line">                res[(pageNum-(pageNum/<span class="number">100</span>)*<span class="number">100</span>)/<span class="number">10</span>]++;</span><br><span class="line">                res[(pageNum-(pageNum/<span class="number">1000</span>)*<span class="number">1000</span>)/<span class="number">100</span>]++;</span><br><span class="line">                res[pageNum/<span class="number">1000</span>]++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pageNum&lt;=<span class="number">99999</span>)&#123;</span><br><span class="line">                res[pageNum%<span class="number">10</span>]++;</span><br><span class="line">                res[(pageNum-(pageNum/<span class="number">100</span>)*<span class="number">100</span>)/<span class="number">10</span>]++;</span><br><span class="line">                res[(pageNum-(pageNum/<span class="number">1000</span>)*<span class="number">1000</span>)/<span class="number">100</span>]++;</span><br><span class="line">                res[(pageNum-(pageNum/<span class="number">10000</span>)*<span class="number">10000</span>)/<span class="number">1000</span>]++;</span><br><span class="line">                res[pageNum/<span class="number">10000</span>]++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pageNum&lt;=<span class="number">999999</span>)&#123;</span><br><span class="line">                res[pageNum%<span class="number">10</span>]++;</span><br><span class="line">                res[(pageNum-(pageNum/<span class="number">100</span>)*<span class="number">100</span>)/<span class="number">10</span>]++;</span><br><span class="line">                res[(pageNum-(pageNum/<span class="number">1000</span>)*<span class="number">1000</span>)/<span class="number">100</span>]++;</span><br><span class="line">                res[(pageNum-(pageNum/<span class="number">10000</span>)*<span class="number">10000</span>)/<span class="number">1000</span>]++;</span><br><span class="line">                res[(pageNum-(pageNum/<span class="number">100000</span>)*<span class="number">100000</span>)/<span class="number">10000</span>]++;</span><br><span class="line">                res[pageNum/<span class="number">100000</span>]++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res[<span class="number">1</span>]++;</span><br><span class="line">                res[<span class="number">0</span>]+=<span class="number">6</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pageNum--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            cout &lt;&lt; res[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            res[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="d.字符串">D.字符串</h2><p><img src="./image-20240505171816397.png" alt="image-20240505171816397" style="zoom:67%;" /></p><blockquote><p>sample input</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line">abc b</span><br><span class="line">aaaab ab</span><br><span class="line">ab d</span><br></pre></td></tr></table></figure><blockquote><p>sample output</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">-<span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>solution</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> s.nextInt();</span><br><span class="line">        <span class="type">String</span> <span class="variable">qaq</span> <span class="operator">=</span> s.nextLine();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">            String[] parts = s.nextLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> parts[<span class="number">0</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">index</span> <span class="operator">=</span> parts[<span class="number">1</span>];</span><br><span class="line">            System.out.println(target.indexOf(index));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="e.高精度加法">E.高精度加法</h2><p><img src="./image-20240505171941381.png" alt="image-20240505171941381" style="zoom:67%;" /></p><blockquote><p>sample input</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1111111111111111111111111111111111</span></span><br><span class="line"><span class="number">9999999999999999999999999999999999</span></span><br></pre></td></tr></table></figure><blockquote><p>sample output</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11111111111111111111111111111111110</span></span><br></pre></td></tr></table></figure><blockquote><p>solution</p></blockquote><p>因为a和b的位数远远大于正常计算机中所能表示的整数范围，所以输入的值均为string类型，因此考虑加法也应当构造一个新的字符串，每位相加后追加到新字符串后，最后反转输出即可</p><p>注意每次相加都要有一个变量来保存余数，同时不要忘记最后一位（也就是输出后的第一位）可能存在进位</p><p><font color = "red">小技巧：将int转换为char，3+‘0’ = 3</font></p><p><font color = "red">将char转换为int，int('3'-'0') = 3</font></p><p><font color = "red">将char转换为string，<strong>string(size_type n,char c)</strong> 说明：创建一个包含n个元素的string对象，其中每个元素都被初始化为字符c</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string a,b;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    cin &gt;&gt; b;</span><br><span class="line">    string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> indexA = a.<span class="built_in">length</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> indexB = b.<span class="built_in">length</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(indexA &gt;=<span class="number">0</span> &amp;&amp; indexB &gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        res += <span class="built_in">string</span>(<span class="number">1</span>,(((<span class="built_in">int</span>(a[indexA]-<span class="string">&#x27;0&#x27;</span>)+<span class="built_in">int</span>(b[indexB]-<span class="string">&#x27;0&#x27;</span>)+r)%<span class="number">10</span>)+<span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">        r = (<span class="built_in">int</span>(a[indexA]-<span class="string">&#x27;0&#x27;</span>)+<span class="built_in">int</span>(b[indexB]-<span class="string">&#x27;0&#x27;</span>)+r)/<span class="number">10</span>;</span><br><span class="line">        indexA--;</span><br><span class="line">        indexB--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(indexA &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        res += <span class="built_in">string</span>(<span class="number">1</span>,(<span class="built_in">int</span>((a[indexA]-<span class="string">&#x27;0&#x27;</span>)+r)%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">        r = <span class="built_in">int</span>((a[indexA]-<span class="string">&#x27;0&#x27;</span>)+r)/<span class="number">10</span>;</span><br><span class="line">        indexA--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(indexB &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        res += <span class="built_in">string</span>(<span class="number">1</span>,(<span class="built_in">int</span>((b[indexB]-<span class="string">&#x27;0&#x27;</span>)+r)%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">        r = <span class="built_in">int</span>((b[indexB]-<span class="string">&#x27;0&#x27;</span>)+r)/<span class="number">10</span>;</span><br><span class="line">        indexB--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r)&#123;</span><br><span class="line">        res += <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(),res.<span class="built_in">end</span>());</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="h.汉诺塔">H.汉诺塔</h2><p><img src="./image-20240505172900075.png" alt="image-20240505172900075" style="zoom:67%;" /></p><blockquote><p>sample input</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><blockquote><p>sample output</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><blockquote><p>solution</p></blockquote><p>这个题就是输出2^n-1，但是请注意<font color = "red">不能用位移操作，如果是左移40位，正常来讲int是32位，也就是左移40%32 = 8位，所以结果不是2<sup>40-1而是2</sup>8-1</font></p><p><font color = "red">用pow函数时记得赋值为long long，否则会产生Wrong Answer</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(num)&#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="built_in">pow</span>(<span class="number">2</span>,n)<span class="number">-1</span>;</span><br><span class="line">        cout &lt;&lt; res &lt;&lt;endl;</span><br><span class="line">        num--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="m.最多水容器">M.最多水容器</h2><figure><img src="./image-20240505173330898.png" alt="image-20240505173330898" /><figcaption aria-hidden="true">image-20240505173330898</figcaption></figure><blockquote><p>sample input</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">1</span> <span class="number">8</span> <span class="number">6</span> <span class="number">2</span> <span class="number">5</span> <span class="number">4</span> <span class="number">8</span> <span class="number">3</span> <span class="number">7</span></span><br></pre></td></tr></table></figure><blockquote><p>sample output</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">49</span></span><br></pre></td></tr></table></figure><blockquote><p>solution</p></blockquote><p>这是比较经典的双指针问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; total;</span><br><span class="line">    <span class="type">int</span> j = total<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span>* sample = <span class="keyword">new</span> <span class="type">int</span>[total];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt; total;i++)&#123;</span><br><span class="line">        cin &gt;&gt; sample[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">        <span class="type">int</span> area = (j-i)*<span class="built_in">min</span>(sample[j],sample[i]);</span><br><span class="line">        res = <span class="built_in">max</span>(area,res);</span><br><span class="line">        <span class="keyword">if</span>(sample[i] &lt; sample[j])&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="o.选择排序">O.选择排序</h2><p><img src="./image-20240505173552013.png" alt="image-20240505173552013" style="zoom:67%;" /></p><blockquote><p>sample input</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">9</span> <span class="number">5</span> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">8</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><blockquote><p>sample output</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">9</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><blockquote><p>solution</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    <span class="keyword">while</span>(num)&#123;</span><br><span class="line">        <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; total;</span><br><span class="line">        <span class="type">int</span>* sample = <span class="keyword">new</span> <span class="type">int</span>[total];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;total;i++)&#123;</span><br><span class="line">            cin &gt;&gt; sample[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;total;i++)&#123;</span><br><span class="line">            <span class="type">int</span> index = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i+<span class="number">1</span>;j&lt;total;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(sample[j] &lt; sample[index])&#123;</span><br><span class="line">                    index = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">swap</span>(sample[i],sample[index]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt; total;i++)&#123;</span><br><span class="line">            cout &lt;&lt; sample[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span>[] sample;</span><br><span class="line">        num--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="x.strings-with-the-same-length">X.Strings with the Same Length</h2><p><img src="./image-20240505174857988.png" alt="image-20240505174857988" style="zoom:67%;" /></p><blockquote><p>sample input</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line">hmhmnknk uuuuuuuu</span><br></pre></td></tr></table></figure><blockquote><p>sample output</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">humuhumunukunuku</span><br></pre></td></tr></table></figure><blockquote><p>solution</p></blockquote><p>这里用到了<font color = "red">字符串插入函数insert，insert(int pos, string content)，在指定位置插入字符串</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    string str1,str2;</span><br><span class="line">    cin &gt;&gt; str1;</span><br><span class="line">    cin &gt;&gt; str2;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;a*<span class="number">2</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        str1.<span class="built_in">insert</span>(i,<span class="built_in">string</span>(<span class="number">1</span>,str2[index++]));</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奇怪的cpp作业</title>
      <link href="/2024/04/20/%E5%A5%87%E6%80%AA%E7%9A%84cpp%E4%BD%9C%E4%B8%9A/"/>
      <url>/2024/04/20/%E5%A5%87%E6%80%AA%E7%9A%84cpp%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="任务1">任务1</h1><p>阅读<code>my_list.h</code>文件，有如下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node_base</span> &#123;</span><br><span class="line">    <span class="built_in">node_base</span>() :<span class="built_in">pre</span>(<span class="literal">nullptr</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    node_iterator&lt;T&gt; pre;</span><br><span class="line">    node_iterator&lt;T&gt; next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// struct node</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> : <span class="keyword">public</span> node_base&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">// default constructor</span></span><br><span class="line">    <span class="built_in">node</span>() :<span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">node_base</span>&lt;T&gt;() &#123;&#125;</span><br><span class="line">    <span class="comment">// used for constructing a node containing value v</span></span><br><span class="line">    <span class="built_in">node</span>(T v) :<span class="built_in">val</span>(v), <span class="built_in">node_base</span>&lt;T&gt;() &#123;&#125;</span><br><span class="line">    T val;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以发现<code>node_base</code>作为基类结点，而<code>node</code>继承自<code>node_base</code>，增加了带参数的构造函数</p><p>有点反常理的是：</p><p><code>node_base&lt;T&gt;</code> 使用 <code>node_iterator&lt;T&gt;</code> 类型的 <code>pre</code> 和 <code>next</code></p><h2 id="一.node_iterator">一.<a id = "n_i">node_iterator</a></h2><p>解下来就是实现<code>struct node_iterator</code>，这个<code>node_iterator</code>结构是为了使你的自定义链表可以与标准模板库（STL）的算法框架兼容。在这里，定义了迭代器的各种特性，使其能够正常工作。</p><h3 id="operator-前置递增">1.<code>operator++()</code> 前置递增</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">self <span class="keyword">operator</span>++() &#123;</span><br><span class="line">    <span class="keyword">if</span> (ptr) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ptr = <span class="keyword">this</span>-&gt;ptr-&gt;next.ptr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前置递增操作符使迭代器向链表的下一个节点移动。这通常意味着将迭代器的内部指针更新为其当前节点的<code>next</code>指针所指向的节点。</p><h3 id="operator---前置递减">2.<code>operator--()</code> 前置递减</h3><p>和前置递增同理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">self <span class="keyword">operator</span>--() &#123;</span><br><span class="line">    <span class="keyword">if</span> (ptr) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ptr = <span class="keyword">this</span>-&gt;ptr-&gt;pre.ptr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="operatorint-后置递增">3.<code>operator++(int)</code> 后置递增</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">self <span class="keyword">operator</span>++(<span class="type">int</span>) &#123;</span><br><span class="line">    self temp = *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">operator</span>++();</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于后置递增，先要把当前this对象的值存到temp中，然后执行前置递增，返回的是temp</p><h3 id="operator--int-后置递减">4.<code>operator--(int)</code> 后置递减</h3><p>和后置递增同理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">self <span class="keyword">operator</span>--(<span class="type">int</span>) &#123;</span><br><span class="line">    self temp = *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">operator</span>--();</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二.node_const_iterator">二.node_const_iterator</h2><p><code>node_const_iterator</code>结构与前面的<code>node_iterator</code>非常类似，但主要区别在于它提供了对元素的<strong>只读</strong>访问，这是通过使用<code>const</code>关键字修饰<code>pointer</code>和<code>reference</code>类型来实现的。这意味着通过这个迭代器<strong>不能修改</strong>它所遍历到的元素的值。</p><p>具体的实现和上面的<a href="#n_i"><code>node_iterator</code></a>一致，这里就不多赘述了。</p><h2 id="三.my_list类">三.my_list类</h2><p>这个 <code>my_list</code> 类是一个模板类，用于实现自定义的双向链表。</p><h3 id="拷贝构造函数">1.拷贝构造函数</h3><p>把一个已知的my_list对象拷贝到一个新的my_list对象中，注意这里的<code>push_back</code>函数是参考第267行的函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">my_list</span>(<span class="type">const</span> my_list&lt;T&gt;&amp; other) : <span class="built_in">my_list</span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> item = other.<span class="built_in">begin</span>(); item != other.<span class="built_in">end</span>(); item++) &#123;</span><br><span class="line">        <span class="built_in">push_back</span>(*item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="赋值预算符">2.赋值预算符</h3><p>赋值运算应当清除当前列表中的所有元素，然后从另一个表中复制元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">my_list&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="type">const</span> my_list&lt;T&gt;&amp; other) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;other) &#123;</span><br><span class="line">        <span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> item = other.<span class="built_in">begin</span>(); item != other.<span class="built_in">end</span>(); item++) &#123;</span><br><span class="line">            <span class="built_in">push_back</span>(*item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="清空列表">3.清空列表</h3><p>逐个删除列表中的所有元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="built_in">pop_front</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入元素">4.插入元素</h3><p><code>insert</code> 方法在迭代器 <code>it</code> 指向的位置之前插入一个新元素，并返回新元素的迭代器。</p><p>方法的前六行如下图：</p><p><img src="./image-20240421000520449.png" alt="image-20240421000520449" style="zoom: 33%;" /></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator it, <span class="type">const</span> T&amp; val)</span> </span>&#123;</span><br><span class="line">    node&lt;T&gt;* new_node = <span class="keyword">new</span> <span class="built_in">node</span>&lt;T&gt;(val);</span><br><span class="line">    new_node-&gt;next = it.ptr;</span><br><span class="line">    new_node-&gt;pre = it.ptr-&gt;pre;</span><br><span class="line">    <span class="keyword">if</span> (it.ptr-&gt;pre.ptr) &#123;</span><br><span class="line">        it.ptr-&gt;pre.ptr-&gt;next = <span class="built_in">iterator</span>(new_node);</span><br><span class="line">    &#125;</span><br><span class="line">    it.ptr-&gt;pre = <span class="built_in">iterator</span>(new_node);</span><br><span class="line">    <span class="keyword">if</span> (it == <span class="built_in">begin</span>()) &#123;<span class="comment">//如果it一开始在第一个位置，那么重新设置head为new_node</span></span><br><span class="line">        head = <span class="built_in">iterator</span>(new_node);</span><br><span class="line">    &#125;</span><br><span class="line">    ++ele_num;<span class="comment">//增加元素数量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iterator</span>(new_node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除元素">5.删除元素</h3><p><code>erase</code> 方法删除迭代器 <code>it</code> 指向的元素，并返回指向下一个元素的迭代器。</p><p>前9行如下图：</p><p><img src="./image-20240421001307278.png" alt="image-20240421001307278" style="zoom: 33%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">iterator <span class="title function_">erase</span><span class="params">(iterator it)</span> &#123;</span><br><span class="line">    <span class="keyword">assert</span>(it != end());</span><br><span class="line">    node_base&lt;T&gt;* target = it.ptr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (target-&gt;pre.ptr) &#123;</span><br><span class="line">        target-&gt;pre.ptr-&gt;next = target-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (target-&gt;next.ptr) &#123;</span><br><span class="line">        target-&gt;next.ptr-&gt;pre = target-&gt;pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (it == begin()) &#123;<span class="comment">//如果删除的it是开头，那就把下一个元素作为开头</span></span><br><span class="line">        head = target-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (it == end()) &#123;<span class="comment">//如果删除的it是结尾，那就把上一个元素作为结尾</span></span><br><span class="line">        tail = target-&gt;pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">iterator</span> <span class="variable">next_iterator</span> <span class="operator">=</span> target-&gt;next;</span><br><span class="line">    delete static_cast&lt;node&lt;T&gt;*&gt;(target);</span><br><span class="line">    --ele_num;</span><br><span class="line">    <span class="keyword">return</span> next_iterator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="列表比较">6.列表比较</h3><p>首先比较两者的长度是否相等，然后遍历每一个元素，比较是否相等</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> my_list&amp; other) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ele_num != other.ele_num) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">auto</span> it1 = <span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">auto</span> it2 = other.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">while</span> (it1 != <span class="built_in">end</span>() &amp;&amp; it2 != other.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*it1 != *it2) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        ++it1;</span><br><span class="line">        ++it2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="任务2teris项目">任务2：Teris项目</h1><p>这个项目是一个俄罗斯方块的游戏，目录结构如下：</p><p><img src="./image-20240421181529207.png" alt="image-20240421181529207" style="zoom: 67%;" /></p><p>我们首先分别解释一下各个模块的功能，</p><h2 id="一block">一、Block</h2><blockquote><p>Block.cpp和Block.h</p></blockquote><p>在这个模块中主要是对方块的各种属性进行了定义</p><p>在注释中我们可以看到如下信息：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//block layout is : &#123;h - 1, w - 1&#125; &#123;x0, y0&#125; &#123;x1, y1&#125; &#123;x2, y2&#125; &#123;x3, y3&#125; (two bits each)</span></span><br><span class="line"><span class="comment">// e.g.:</span></span><br><span class="line"><span class="comment">// 431424: 0110 1001 0101 0100 0000 </span></span><br></pre></td></tr></table></figure><p>这表明方块的高度、宽度和每个小方块的位置信息都由20bits组成，h和w分别代表高度和宽度，<strong><code>&#123;x0, y0&#125;, &#123;x1, y1&#125;, &#123;x2, y2&#125;, &#123;x3, y3&#125;</code></strong>：这些坐标对代表了四个旋转方向中方块中每个小方块的位置。</p><p>具体示例如下图：</p><p><img src="./image-20240422012253926.png" alt="image-20240422012253926" style="zoom:50%;" /></p><p>第一个方法是<code>move</code>方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Block::move</span><span class="params">(<span class="type">const</span> Dir&amp; direction)</span> </span>&#123;        <span class="comment">//成功移动了一格返回false，被阻止是返回true</span></span><br><span class="line">    <span class="keyword">switch</span> (direction) &#123;</span><br><span class="line">    <span class="keyword">case</span> DOWN:</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">checkCollision</span>(m_x, m_y + <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        m_y++;      <span class="comment">//向下移动一格</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> LEFT:</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">checkCollision</span>(m_x - <span class="number">1</span>, m_y))</span><br><span class="line">            m_x--;      <span class="comment">//向左移动一格</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> RIGHT:</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">checkCollision</span>(m_x + <span class="number">1</span>, m_y))</span><br><span class="line">            m_x++;      <span class="comment">//向右移动一格</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举三个方向的值，有DOWN、LEFT和RIGHT，在每次移动时都由碰撞检测。<font color = "blue">注意这个方法成功移动了一格返回false，被阻止是返回true</font></p><p>第二个方法是<code>draw</code>方法，这也是你要完成的</p><p>第三个方法是<code>clear</code>方法：</p><p>这个方法的功能是在游戏的画布上清除方块的图形表现。具体来说，它用于清除方块当前所占的位置，以便方块可以移动到新的位置而不留下图像的痕迹，或者当方块被消除时从界面上移除方块。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Block::clear</span><span class="params">(<span class="type">int</span> leftX, <span class="type">int</span> leftY)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x, y, left, top;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        x = <span class="built_in">getX</span>(i);</span><br><span class="line">        y = <span class="built_in">getY</span>(i);</span><br><span class="line">        left = leftX + BLOCK_SIZE * (m_x + x);</span><br><span class="line">        top = leftY + BLOCK_SIZE * (m_y + y);</span><br><span class="line">        <span class="built_in">clearrectangle</span>(left, top, left + BLOCK_SIZE, top + BLOCK_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三个方法是<code>rotate</code>方法：</p><p>这个方法不仅处理方块的旋转，还涉及到在旋转后检查并调整位置以避免方块超出游戏区域或与其他方块碰撞。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Block::rotate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ori_ind = m_ind, ori_x = m_x;   <span class="comment">//保存旋转前的旋转状态索引和方块的水平位置</span></span><br><span class="line">    m_ind = (m_ind + <span class="number">1</span>) % <span class="number">4</span>;<span class="comment">//更新旋转索引</span></span><br><span class="line">    <span class="keyword">while</span> (m_x + <span class="built_in">blkWd</span>() &gt;= MAP_WIDTH)<span class="comment">//检测旋转后是否超出边界</span></span><br><span class="line">        m_x--;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">checkCollision</span>()) &#123;<span class="comment">//检测是否发生碰撞，如果碰撞了就回滚</span></span><br><span class="line">        m_ind = ori_ind;</span><br><span class="line">        m_x = ori_x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有关于检测碰撞的方法<code>checkCollision</code>等等，这里不多赘述了。</p><p>以下是关于Block模块中需要实现的代码</p><h3 id="getx和gety">1.getX和getY</h3><ul><li><strong>数据获取</strong>：<code>int data = BLOCK_DATA[m_type][m_ind];</code> 从<code>BLOCK_DATA</code>数组中获取当前方块的旋转状态对应的编码数据。这里<code>m_type</code>表示方块的类型，<code>m_ind</code>表示当前方块的旋转状态（通常是0到3，代表四种旋转状态）。</li><li><strong>位移计算</strong>：<code>int shift = 12 - 4 * ind;</code> 根据小方块的索引计算必要的位移量，以便将所需的坐标对齐到整数的低位端。这里从整数的第12位开始向右位移，因为前4位存储的是方块的高度和宽度信息，之后的每个小方块的坐标信息占4位（x和y坐标各2位）。</li><li><strong>坐标提取</strong>：<ul><li><code>getX(int ind)</code>中：通过<code>(data &gt;&gt; (shift + 2)) &amp; 0x3</code>操作提取x坐标。这里先将数据向右位移<code>shift + 2</code>位，<code>+2</code>是因为在4位坐标中，x坐标占据了后两位。然后，通过<code>&amp; 0x3</code>（即与<code>0011</code>进行位与运算）获取最后两位，即x坐标。</li><li><code>getY(int ind)</code>中：通过<code>(data &gt;&gt; shift) &amp; 0x3</code>操作直接提取y坐标。这里将数据向右位移<code>shift</code>位，然后同样通过<code>&amp; 0x3</code>获取最后两位，即y坐标。</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">(<span class="type">int</span> ind)</span> <span class="type">const</span> </span>&#123; </span><br><span class="line">    <span class="type">int</span> data = BLOCK_DATA[m_type][m_ind];  <span class="comment">// 获取当前方块类型和旋转状态的编码</span></span><br><span class="line">    <span class="comment">// 每个坐标由四位表示，且需要跳过前四位（h-1和w-1）</span></span><br><span class="line">    <span class="type">int</span> shift = <span class="number">12</span> - <span class="number">4</span> * ind;              <span class="comment">// 计算向右移动的位数</span></span><br><span class="line">    <span class="keyword">return</span> (data &gt;&gt; (shift + <span class="number">2</span>)) &amp; <span class="number">0x3</span>;    <span class="comment">// 提取x坐标（两位）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getY</span><span class="params">(<span class="type">int</span> ind)</span> <span class="type">const</span> </span>&#123; </span><br><span class="line">    <span class="type">int</span> data = BLOCK_DATA[m_type][m_ind];  <span class="comment">// 获取当前方块类型和旋转状态的编码</span></span><br><span class="line">    <span class="type">int</span> shift = <span class="number">12</span> - <span class="number">4</span> * ind;              <span class="comment">// 计算向右移动的位数</span></span><br><span class="line">    <span class="keyword">return</span> (data &gt;&gt; shift) &amp; <span class="number">0x3</span>;          <span class="comment">// 提取y坐标（两位）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="draw">2.draw<a id = "draw"></a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Block::draw</span><span class="params">(<span class="type">int</span> leftX, <span class="type">int</span> leftY)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="comment">// draw current block</span></span><br><span class="line">   <span class="comment">// 遍历方块的四个小方块</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 获取当前小方块的相对坐标</span></span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">getX</span>(i);</span><br><span class="line">        <span class="type">int</span> y = <span class="built_in">getY</span>(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算当前小方块在屏幕上的绝对位置</span></span><br><span class="line">        <span class="type">int</span> absX = leftX + (m_x + x) * BLOCK_SIZE;</span><br><span class="line">        <span class="type">int</span> absY = leftY + (m_y + y) * BLOCK_SIZE;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置填充颜色为当前方块的颜色</span></span><br><span class="line">        <span class="built_in">setfillcolor</span>(COLORS[m_type]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制填充的小方块</span></span><br><span class="line">        <span class="built_in">fillrectangle</span>(absX, absY, absX + BLOCK_SIZE - <span class="number">1</span>, absY + BLOCK_SIZE - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中leftX和leftY分别是左边界和上边界，这里的absX和absY的计算也是参考了<code>clear</code>函数中的方式</p><p>其中<code>setfillcolor</code>和<code>fillrectangle</code>方法是Easyx库中的函数，所以要确保引入了头文件<code>easyx.h</code></p><h3 id="randtype">3.randType</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Block::randType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// generate new type of block</span></span><br><span class="line">    <span class="comment">// 随机选择方块类型</span></span><br><span class="line">    m_type = <span class="built_in">rand</span>() % TYPE_NUM;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机选择方块的旋转状态索引</span></span><br><span class="line">    m_ind = <span class="built_in">rand</span>() % <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reset position to the top middle of the game board</span></span><br><span class="line">    m_x = (MAP_WIDTH - <span class="number">4</span>) / <span class="number">2</span>;</span><br><span class="line">    m_y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里的整个方块的位置x和y一开始被初始化为顶部的中间位置</p><h2 id="二game">二、Game</h2><blockquote><p>Game.h和Game.cpp</p></blockquote><p>阅读Game.h我们可以获取以下信息：</p><p><strong>游戏逻辑与界面</strong></p><ul><li><strong>init()</strong>：可能用于初始化游戏的设置，如图形界面等。</li><li><strong>drawLeft()</strong> 与 <strong>drawRight()</strong>：分别用于绘制游戏主界面和辅助提示界面。</li><li><strong>checkLine()</strong>：检查游戏面板上是否有满行，通常满行后需要被清除。</li><li><strong>clearLine()</strong>：清除已满的行，并可能涉及更新分数或游戏状态。</li><li><strong>processKeyDown()</strong>：处理键盘输入，控制方块移动、旋转等。</li><li><strong>updateBlk()</strong>：更新当前方块的状态，如下落等。</li><li><strong>writeMaxScore()</strong>：记录最高分数。</li><li><strong>loop()</strong>：游戏主循环，处理游戏逻辑的持续更新。</li></ul><p><strong>地图操作</strong></p><ul><li><strong>setMap()</strong> 和 <strong>getMap()</strong>：分别设置和获取地图上特定坐标的值，这通常用于记录方块的位置和状态。</li></ul><p><strong>时间控制</strong></p><ul><li><strong>addGameTime()</strong>：增加游戏时间，可能用于控制游戏难度或事件触发。</li></ul><p><strong>辅助尺寸计算函数</strong></p><p>这些函数提供了界面绘制时需要的各种尺寸计算，如左侧游戏区宽高、右侧提示区宽高等。例如：</p><ul><li><strong>leftWidth()</strong>、<strong>leftHeight()</strong>：计算游戏主面板的宽和高。</li><li><strong>rightWidth()</strong>、<strong>rightTxtHeight()</strong>、<strong>rightBlkHeight()</strong>：计算右侧提示区的相关尺寸。</li><li><strong>windowWidth()</strong>、<strong>windowHeight()</strong>：计算整个游戏窗口的尺寸。</li><li><strong>rightX()</strong>、<strong>rightY()</strong>：计算右侧提示区的位置。</li></ul><p><strong>私有变量</strong></p><ul><li><strong>map</strong>：一个整数向量，表示游戏的地图，每个元素可能代表一个方块的占位。</li><li><strong>score</strong>、<strong>gameTime</strong>：记录游戏分数和时间。</li><li><strong>m_curBlk</strong>：当前操作的方块对象。</li><li><strong>m_nextBlks</strong>：一个<code>my_list&lt;Block&gt;</code>类型的容器，存储即将使用的方块，可以替换为标准库的<code>list&lt;Block&gt;</code>。</li></ul><p><strong>辅助函数</strong></p><ul><li><strong>genNewBlks()</strong>：生成新方块并放入<code>m_nextBlks</code>。</li><li><strong>addBlkToMap()</strong>：将当前方块加入地图。</li><li><strong>drawNextBlks()</strong>：绘制即将出现的方块。</li></ul><h3 id="drawleft">1.drawLeft</h3><p>核心部分就是通过getMap函数获得当前位置的方块信息，如果为0，代表这个位置是空的；如果不为0，则绘制一个方块</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Game::drawLeft</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 清除旧的图形，为新的绘制做准备</span></span><br><span class="line">    <span class="built_in">clearrectangle</span>(<span class="built_in">leftXY</span>(), <span class="built_in">leftXY</span>(), <span class="built_in">leftXY</span>() + <span class="built_in">leftWidth</span>(), <span class="built_in">leftXY</span>() + <span class="built_in">leftHeight</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制游戏区域的外边框</span></span><br><span class="line">    <span class="built_in">rectangle</span>(<span class="number">2</span> * MARGIN, <span class="number">2</span> * MARGIN, <span class="built_in">leftWidth</span>() + <span class="number">2</span> * MARGIN, <span class="built_in">leftHeight</span>() + <span class="number">2</span> * MARGIN);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制地图上的所有方块</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; MAP_HEIGHT; y++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; MAP_WIDTH ; x++) &#123;</span><br><span class="line">            <span class="type">int</span> blockType = <span class="built_in">getMap</span>(x, y);</span><br><span class="line">            <span class="keyword">if</span> (blockType != <span class="number">0</span>) &#123;  <span class="comment">//  0 is the empty space</span></span><br><span class="line">                <span class="comment">// 根据方块类型设置颜色</span></span><br><span class="line">                COLORREF color = Block::COLORS[blockType - <span class="number">1</span>];  <span class="comment">// 0表示空白，而类型从1开始</span></span><br><span class="line">                <span class="built_in">setfillcolor</span>(color);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 计算方块在屏幕上的坐标</span></span><br><span class="line">                <span class="type">int</span> startX = <span class="built_in">leftXY</span>() + x * BLOCK_SIZE;</span><br><span class="line">                <span class="type">int</span> startY = <span class="built_in">leftXY</span>() + y * BLOCK_SIZE;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 绘制一个填充的方块</span></span><br><span class="line">                <span class="built_in">solidrectangle</span>(startX, startY, startX + BLOCK_SIZE - <span class="number">1</span>, startY + BLOCK_SIZE - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制当前活动的方块</span></span><br><span class="line">    m_curBlk.<span class="built_in">draw</span>(<span class="built_in">leftXY</span>(), <span class="built_in">leftXY</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="clearline">2.clearLine</h3><p>注意这个函数是从主界面的顶部开始依次向下检查，如果遇到满行就把当前上面的行整体向下移动一行（两层for循环），然后重置一下顶行(手动将顶行清空)，最后根据清除的行来计算得分。</p><p><font color = "red">请注意：</font><strong>重新检查</strong>：由于行被向下移动，当前行<code>j</code>可能会有新的方块填充，所以使用<code>j--</code>来重新检查这一行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Game::clearLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Rewrite this function, implement the following logic:</span></span><br><span class="line">    <span class="comment">// If (there are 1 line to clear)</span></span><br><span class="line">    <span class="comment">//     score += 10</span></span><br><span class="line">    <span class="comment">// Else if (there are 2 lines to clear)</span></span><br><span class="line">    <span class="comment">//     score += 30</span></span><br><span class="line">    <span class="comment">// Else if (there are 3 lines to clear)</span></span><br><span class="line">    <span class="comment">//     score += 50</span></span><br><span class="line">    <span class="comment">// Else if (there are 4 lines to clear)</span></span><br><span class="line">    <span class="comment">//     score += 70</span></span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> When you done this logic, please comment out </span></span><br><span class="line">    <span class="comment">//      the code after &quot;END OF YOUR CODE&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> linesCleared = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; MAP_HEIGHT; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">checkLine</span>(j)) &#123;</span><br><span class="line">            <span class="comment">// 将上一行移至满行</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = j; k &gt; <span class="number">0</span>; k--) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAP_WIDTH; i++) &#123;</span><br><span class="line">                    <span class="built_in">setMap</span>(i, k, <span class="built_in">getMap</span>(i, k - <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Reset the top line to empty after shift down</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAP_WIDTH; i++) &#123;</span><br><span class="line">                <span class="built_in">setMap</span>(i, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            linesCleared++;</span><br><span class="line">            j--; <span class="comment">// Recheck the same line index after rows are shifted down</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Calculate score based on number of lines cleared</span></span><br><span class="line">    <span class="keyword">switch</span> (linesCleared) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        score += <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        score += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        score += <span class="number">50</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        score += <span class="number">70</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// No score increment for no lines or more than 4 lines</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们来阅读一下<code>addBlkToMap</code>函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Game::addBlkToMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> bx, by;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        bx = m_curBlk.<span class="built_in">getX</span>(i);</span><br><span class="line">        by = m_curBlk.<span class="built_in">getY</span>(i);</span><br><span class="line">        <span class="built_in">setMap</span>(m_curBlk.<span class="built_in">x</span>() + bx, m_curBlk.<span class="built_in">y</span>() + by, m_curBlk.<span class="built_in">type</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环遍历每个小方块（俄罗斯方块中每个方块都由四个小方块组成），先取出每个小方块的相对位置，然后调用<code>setMap</code>来设置地图该位置处的方块类型</p><h3 id="gennewblks">3.genNewBlks</h3><p>这里只处理了如果预备方块列表为空，循环生成<code>NEXT_BLOCK_NUM</code>个新方块，使用<code>Block</code>类的构造函数和<code>randType()</code>方法随机设定方块类型，并添加到<code>m_nextBlks</code>列表中。</p><p><font color = "red">这里原来给出的模板有些问题，不知道是不是我理解有误，这里我重新实现了一下genNewBlks的逻辑</font></p><p>每次都检测当前方块是否被移动到底部（m_curBlk.moveDown()），如是，则把下一预览窗方块赋值给当前方块，并弹出在预览窗中的这个方块。</p><p>并且，当预览窗方块的数量小于3个时，产生新的方块</p><p>接下来的逻辑？？？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Game::genNewBlks</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Generate new blocks</span></span><br><span class="line">    <span class="keyword">if</span> (m_nextBlks.<span class="built_in">empty</span>() || m_curBlk.<span class="built_in">moveDown</span>()) &#123;</span><br><span class="line">        <span class="comment">// 如果当前方块被放置，将当前方块移除列表</span></span><br><span class="line">        <span class="keyword">if</span> (m_curBlk.<span class="built_in">moveDown</span>()) &#123;</span><br><span class="line">            m_curBlk = m_nextBlks.<span class="built_in">front</span>();</span><br><span class="line">            m_nextBlks.<span class="built_in">pop_front</span>(); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果需要，添加新的方块，直到有NEXT_BLOCK_NUM个</span></span><br><span class="line">        <span class="keyword">while</span> (m_nextBlks.<span class="built_in">size</span>() &lt; NEXT_BLOCK_NUM) &#123;</span><br><span class="line">            <span class="function">Block <span class="title">newBlock</span><span class="params">(map)</span></span>;</span><br><span class="line">            newBlock.<span class="built_in">randType</span>();</span><br><span class="line">            m_nextBlks.<span class="built_in">push_back</span>(newBlock);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    m_curBlk.<span class="built_in">setPos</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> x = MAP_WIDTH + <span class="number">1</span>;<span class="comment">// 这里假设显示在地图右侧的适当位置</span></span><br><span class="line">    <span class="type">int</span> y = <span class="built_in">rightTxtHeight</span>() / BLOCK_SIZE + <span class="number">1</span>;<span class="comment">// 基于右侧文字高度计算起始高度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> blk : <span class="built_in">enumerate</span>(m_nextBlks))</span><br><span class="line">        blk.item.<span class="built_in">setPos</span>(x, y + <span class="number">4</span> * <span class="built_in">int</span>(blk.index));<span class="comment">//每个方块下移4个单位距离以避免重叠</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="drawnextblks">4.drawNextBlks</h3><p>每个方块都有一个 <code>draw</code> 方法，这里调用该方法来在界面上绘制方块。<code>startX</code>和<code>startY</code>是预览窗的起始位置，<code>verticalSpacing</code>是每个方块在预览窗的间隔，这里定为4个方块，参照上面<code>genNewBlks()</code>中的<code>4 * int(blk.index)</code>。</p><p>然后遍历<code>m_nextBlks</code>，把这3个方块画出来，注意在<code>draw</code>的时候，<font color = red>要减掉方块的x、y值，因为这个x和y是相对于LeftXY而言的，具体可以见<a href="#draw">draw的定义</a></font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Game::drawNextBlks</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Draw all the elements in m_nextBlks</span></span><br><span class="line">    <span class="type">int</span> startX = BLOCK_SIZE + <span class="built_in">rightX</span>();</span><br><span class="line">    <span class="type">int</span> startY = <span class="built_in">rightY</span>() + <span class="built_in">rightTxtHeight</span>() + BLOCK_SIZE;</span><br><span class="line">    <span class="type">int</span> verticalSpacing = BLOCK_SIZE * <span class="number">4</span>; <span class="comment">// 假设每个方块垂直间距是4个方块的高度</span></span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> Block&amp; blk : m_nextBlks) &#123;</span><br><span class="line">        <span class="type">int</span> blockDrawY = startY + index * verticalSpacing;</span><br><span class="line">        blk.<span class="built_in">draw</span>(startX-blk.<span class="built_in">x</span>()*BLOCK_SIZE, blockDrawY-blk.<span class="built_in">y</span>()*BLOCK_SIZE);</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="writemaxscore">5.writeMaxScore</h3><p>检查当前分数是否大于已有的最高分数，如是，则更新。</p><p>每次都调用write函数来更新配置信息</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Game::writeMaxScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Write max score to file, using class Configure::write</span></span><br><span class="line">    <span class="comment">// Check if the current game score is higher than the stored maximum score</span></span><br><span class="line">    <span class="keyword">if</span> (score &gt; Configure::<span class="built_in">getInst</span>()-&gt;<span class="built_in">maxScore</span>()) &#123;</span><br><span class="line">        <span class="comment">// Update the maximum score in the Configure instance</span></span><br><span class="line">        Configure::<span class="built_in">getInst</span>()-&gt;<span class="built_in">setMaxScore</span>(score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the updated configuration to the file</span></span><br><span class="line">    Configure::<span class="built_in">getInst</span>()-&gt;<span class="built_in">write</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="configure">6.Configure</h3><p>对于这个类，主要有读文件和写文件这两个方法</p><p>下面是读文件的实现：</p><p>其中<code>istringstream</code>的用法请点击<a href = "https://blog.csdn.net/weixin_41028555/article/details/136907277" target = "_blank">这里</a></p><p>这里要注意的是定义两个类型的变量（fvalue和ivalue）来存储读到的值，因为<code>RIGHT_WD_RATIO</code>、<code>RIGHT_TXT_HT_RATIO</code>和<code>RIGHT_BLK_HT_RATIO</code>都是浮点型，其余的是整数型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Configure::<span class="built_in">Configure</span>() &#123;</span><br><span class="line"><span class="function">ifstream <span class="title">reader</span><span class="params">(m_fileName.c_str(), ios::in)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (reader.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line"><span class="comment">//Read global variables from file &#x27;config.txt&#x27;</span></span><br><span class="line">string line;</span><br><span class="line">string key;</span><br><span class="line"><span class="type">float</span> fvalue;</span><br><span class="line"><span class="type">int</span> ivalue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(reader, line)) &#123;</span><br><span class="line"><span class="function">istringstream <span class="title">iss</span><span class="params">(line)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">getline</span>(iss, key, <span class="string">&#x27; &#x27;</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (key == <span class="string">&quot;MAP_WIDTH&quot;</span> || key == <span class="string">&quot;MAP_HEIGHT&quot;</span> || key == <span class="string">&quot;BLOCK_SIZE&quot;</span> ||</span><br><span class="line">key == <span class="string">&quot;NEXT_BLOCK_NUM&quot;</span> || key == <span class="string">&quot;MARGIN&quot;</span> || key == <span class="string">&quot;MAX_SCORE&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (iss &gt;&gt; ivalue) &#123;</span><br><span class="line"><span class="keyword">if</span> (key == <span class="string">&quot;MAP_WIDTH&quot;</span>) m_mapWidth = ivalue;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">&quot;MAP_HEIGHT&quot;</span>) m_mapHeight = ivalue;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">&quot;BLOCK_SIZE&quot;</span>) m_blockSize = ivalue;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">&quot;NEXT_BLOCK_NUM&quot;</span>) m_nextBlockNum = ivalue;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">&quot;MARGIN&quot;</span>) m_margin = ivalue;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">&quot;MAX_SCORE&quot;</span>) m_maxScore = ivalue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">&quot;RIGHT_WD_RATIO&quot;</span> || key == <span class="string">&quot;RIGHT_TXT_HT_RATIO&quot;</span> || key == <span class="string">&quot;RIGHT_BLK_HT_RATIO&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (iss &gt;&gt; fvalue) &#123;</span><br><span class="line"><span class="keyword">if</span> (key == <span class="string">&quot;RIGHT_WD_RATIO&quot;</span>) m_rightWdRatio = fvalue;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">&quot;RIGHT_TXT_HT_RATIO&quot;</span>) m_rightTxtHtRatio = fvalue;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">&quot;RIGHT_BLK_HT_RATIO&quot;</span>) m_rightBlkHtRatio = fvalue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">write</span>();</span><br><span class="line">reader.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>行内容解析</strong>：</p><p>对于每一行，使用 <code>istringstream</code> 和空格作为分隔符解析出键（<code>key</code>）和值（<code>value</code>）。这里使用了 <code>getline(iss, key, ' ')</code> 来读取键，接着尝试从流中提取整数值（<code>iss &gt;&gt; value</code>）。</p><p><strong>键值匹配</strong>：</p><p>根据读取的键名，将值赋给对应的成员变量。对于浮点类型的配置项（如宽度比例和高度比例），读取的整数值被转换为浮点数。</p><p>使用 <code>if</code> 语句来匹配键字符串并更新相应的成员变量。</p><h3 id="最后的最后">最后的最后</h3><p>还有一点需要注意的是：在main函数中</p><p>需要加一行随机数种子的构造，因为在上面的<code>randType</code>中多次构造<code>srand</code>，可能会因为过于频繁而产生相同的输出，达不到随机效果。因此只需要在main函数中，构造一次即可。</p><p>还有就是init函数中的路径是你的config.txt文件的绝对路径，不能只写config.txt（windows下路径间隔用\）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Configure::<span class="built_in">init</span>(<span class="string">&quot;D:\\mytju\\Teris_exercise\\config.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">static_cast</span>&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt;(<span class="built_in">time</span>(<span class="literal">nullptr</span>)));</span><br><span class="line">    Game game;</span><br><span class="line">    game.<span class="built_in">init</span>();</span><br><span class="line">    game.<span class="built_in">loop</span>();</span><br><span class="line">    game.<span class="built_in">writeMaxScore</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实验结果">实验结果：</h1><h2 id="任务1-1">任务1：</h2><p><img src="./image-20240422014936322.png" alt="image-20240422014936322" style="zoom:50%;" /></p><h2 id="任务2">任务2：</h2><p>部分结果截图如下：</p><div><img src="./image-20240422014559494.png" alt="image-20240422014559494" style="zoom:50%;" /><img src="./image-20240422014818852.png" alt="image-20240422014818852" style="zoom:50%;" /></div>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java作业</title>
      <link href="/2024/04/19/java%E4%BD%9C%E4%B8%9A/"/>
      <url>/2024/04/19/java%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="h03">h03</h1><p>这里写一个也是唯一一个难度系数3星的任务</p><p>返回杨辉三角( Pascal triangle,请百度 杨辉三角 或者 Pascal triangle )第i行的系数，杨辉三角第一行定义为1 提示：从顶部的单个1开始，下面一行中的每个数字都是上面两个数字的和 例如getPascalTriangle(1)返回{1}， getPascalTriangle(2)返回{1,1} 测试的时候，系数肯定不会超过int的范围</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] getPascalTriangle(<span class="type">int</span> i) &#123;</span><br><span class="line">    <span class="type">int</span>[] row = <span class="keyword">new</span> <span class="title class_">int</span>[i];</span><br><span class="line">    Arrays.fill(row, <span class="number">1</span>);<span class="comment">//全部填充为1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">2</span>;r &lt;=i;r++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> r-<span class="number">2</span>;j &gt;=<span class="number">1</span>;j--) &#123;</span><br><span class="line">            row[j] = row[j] + row[j-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> row;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次都是先复制一下上一行的数据，然后从最后一行的倒数第二个数开始向前累加，从而实现当前值等于正上方值+左上方值</p><h1 id="h08">h08</h1><p><font color = "blue">注意本次实验部分任务相似，所以只给出一部分任务的做法</font></p><p><strong>任务1</strong>：LoginUtil是一个登录的类，分别输入用户口令，当用户名为"a",口令为"a",不抛出异常，否则抛出InvalidUserExcetpion(InvalidUserExcetpion需要你自己定义)</p><p><strong>做法</strong>：</p><ol type="1"><li>设计LoginUtil类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUtil</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String a, String b)</span>  <span class="keyword">throws</span> InvalidUserException&#123;</span><br><span class="line"><span class="keyword">if</span>(a.equals(<span class="string">&quot;a&quot;</span>) &amp;&amp; b.equals(<span class="string">&quot;a&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidUserException</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>定义InvalidUserException</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvalidUserException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InvalidUserException</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InvalidUserException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(message,cause);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InvalidUserException</span><span class="params">(String message)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InvalidUserException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(cause);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要注意一般自定义的异常都是集成RuntimeException，在构造的异常里面可以定义四个构造方法（模版），但不是必须</p><p><strong>任务2</strong>：</p><p>构造一个 AgeCheck类，实现AgeCheckInterface接口， 当checkAge中的参数&lt;0或者&gt;200的时候抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span>  <span class="title class_">AgeCheckInterface</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkAge</span><span class="params">(<span class="type">int</span> age)</span>  ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>做法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgeCheck</span> <span class="keyword">implements</span> <span class="title class_">AgeCheckInterface</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(age &lt;<span class="number">0</span> || age &gt;<span class="number">200</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();<span class="comment">//注意这里不能抛出Exception</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="h09">h09</h1><p><strong>任务1</strong>：</p><p>计算出一段文字中不重复的字符的个数，例如“天津市天津大学 ”不重复字符为5</p><p><strong>做法</strong>：</p><p>利用set的特性，里面的元素不能重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDistinctCharCount</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="type">char</span>[] charArray = s.toCharArray();</span><br><span class="line">    String[] stringArray = <span class="keyword">new</span> <span class="title class_">String</span>[charArray.length];<span class="comment">//构造一个字符串数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;charArray.length;i++) &#123;</span><br><span class="line">        stringArray[i] = String.valueOf(charArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++) &#123;</span><br><span class="line">        set.add(stringArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> set.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意本方法先把字符串转换为char类型的数组，构造了一个字符串数组，把char类型的数组每个部分的内容填到字符串数组的对应位置上，注意<code>String.valueOf</code>方法的使用</p><p><a id = "task2"><strong>任务2</strong>：</a></p><p>返回一段文字中，出现频率最高的字符（不考虑并列第一的情况） 例如：getFrequentChar("好好学习") 返回'好'</p><p>例如：getFrequentChar("我是天津大学软件学院学生") 返回'学'</p><p><strong>做法</strong>：</p><p>利用Map的特性，K-V键值对</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getFrequentChar</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(s.charAt(i))) &#123;</span><br><span class="line">            map.put(s.charAt(i), map.get(s.charAt(i))+<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(s.charAt(i), <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> <span class="variable">res</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(Map.Entry&lt;Character, Integer&gt; entry: map.entrySet()) &#123;<span class="comment">//使用entrySet遍历</span></span><br><span class="line">        <span class="keyword">if</span>(maxCount &lt; entry.getValue()) &#123;</span><br><span class="line">            res = entry.getKey();</span><br><span class="line">            maxCount = entry.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意其中的<code>if...else</code>部分还可以用以下代码来代替。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.put(s.CharAt(i),map.getOrDefault(s.charAt(i),<span class="number">0</span>)+<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>注意<code>charAt</code>函数的使用：返回指定索引的字符</p><p>注意<code>entrySet</code>的遍历：Map.Entry&lt;Character, Integer&gt; entry: map.entrySet()</p><p><strong>任务3</strong>：</p><p>返回一段文字中，出现频率最高的词（每个词由2个字符构成，任意两个相邻的字符称为一个词，例如“天津大学，你好”由“天津”“津大”“大学”“学，”“，你”“你好” 6个词构成)，不会出现频率最高并列的情况</p><p><strong>做法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getFrequentWord</span><span class="params">(String content)</span>&#123;</span><br><span class="line">    Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;content.length()-<span class="number">1</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(content.substring(i, i+<span class="number">2</span>))) &#123;<span class="comment">//注意substring的字符之间是索引</span></span><br><span class="line">            map.put(content.substring(i, i+<span class="number">2</span>), map.get(content.substring(i, i+<span class="number">2</span>))+<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(content.substring(i, i+<span class="number">2</span>), <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(Map.Entry&lt;String, Integer&gt; entry: map.entrySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(maxCount &lt; entry.getValue()) &#123;</span><br><span class="line">            res = entry.getKey();</span><br><span class="line">            maxCount = entry.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法和<a href="#task2">任务2</a>是比较类似的，区别是多了一个<code>substring</code>函数</p><p><strong>任务4</strong>：</p><p>把一个StringBufer中所有的空格去掉，提示：不能新建StringBuffer对象，必须在原来的基础上删掉原来字符串</p><p><strong>做法</strong>：</p><p>通过从头到尾循环，如果对应的字符为空格，就删除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">zipStringBufer</span><span class="params">(StringBuffer buf)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;buf.length();i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(buf.charAt(i) == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">            buf.deleteCharAt(i--);<span class="comment">//删了以后i也要减1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意<code>deleteCharAt</code>函数的使用，<font color = "red">注意删除后索引i也要-1，否则遇到连续空格的情况下会有逻辑错误</font></p><h1 id="h10">h10</h1><p><strong>任务1</strong>：</p><p>将一个字符串中字符按出现频率的高到低排序返回，如果两个字符出现的频率一样，则将最先出现的字符排在前面，例如：</p><ul><li><p>orderChar(“abcdefg”)返回 “abcdefg”</p></li><li><p>orderChar(“abcdefgg”)返回 “gabcdef”</p></li><li><p>orderChar(“abcdefgge”)返回 “egabcdf”</p></li><li><p>orderChar(“天津大学软件学院”)返回 “学天津大软件院”</p></li></ul><p><strong>做法</strong>：</p><p>注意这里要使用TreeMap，在Map内部对元素进行排序<font color = "red">注意TreeMap的构造方法</font></p><p>注意<code>indexOf</code>函数的使用方法</p><p>Comparator在返回时，如果a&lt;b，返回-1，把小的排在前面；如果a&gt;b，返回-1，则把大的排在前面</p><p>最后则是先选出其中出现次数最多字符的次数，然后从这个次数开始，每次循环遍历Map，按照出现频率递减的方式来拼接字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Home10</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Home10</span><span class="params">()</span> &#123;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将一个字符串中字符按出现频率的高到低排序返回，如果两个字符出现的频率一样，则将最先出现的字符排在前面</span></span><br><span class="line"><span class="comment"> * 例如：orderChar(“abcdefg”)返回 “abcdefg” </span></span><br><span class="line"><span class="comment"> * orderChar(“abcdefgg”)返回 “gabcdef”</span></span><br><span class="line"><span class="comment"> * orderChar(“abcdefgge”)返回 “egabcdf”</span></span><br><span class="line"><span class="comment"> * orderChar(“天津大学软件学院”)返回 “学天津大软件院”</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">orderChar</span><span class="params">(String content)</span> &#123;</span><br><span class="line">Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Character&gt;() &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Character c1, Character c2)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(c1.equals(c2)) &#123;<span class="comment">//不要忘记相等的情况，否则会出现g=1,g=1的情况；这里还必须用equals，否则用=会出现中文不支持</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> content.indexOf(c1) &lt; content.indexOf(c2) ? -<span class="number">1</span> :<span class="number">1</span>;<span class="comment">//索引值小的放在前面</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;content.length();i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(map.containsKey(content.charAt(i))) &#123;</span><br><span class="line">map.put(content.charAt(i), map.get(content.charAt(i))+<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">map.put(content.charAt(i), <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">maxCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Character, Integer&gt; entry: map.entrySet()) &#123;</span><br><span class="line"><span class="keyword">if</span>(maxCount &lt; entry.getValue()) &#123;<span class="comment">//先求出出现最多的次数</span></span><br><span class="line">maxCount = entry.getValue();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> maxCount; i&gt;<span class="number">0</span>;i--) &#123;<span class="comment">//这层循环在外面qaq</span></span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Character, Integer&gt; entry: map.entrySet()) &#123;</span><br><span class="line"><span class="keyword">if</span>(entry.getValue()==i) &#123;</span><br><span class="line">res += entry.getKey();<span class="comment">//拼接字符串直接用+即可</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="h11">h11</h1><p><a href = "https://sdythmh.github.io/2024/04/16/java程序设计-lab2" target = "_blank">见java程序设计lab2</a></p><h1 id="h12">h12</h1><p><strong>任务1</strong>：</p><p>字符串content是一个超市的历次购物小票的合计，每次购物的明细之间用分号分割，每个商品之间用半角逗号分开</p><p>请找出 哪n(n&gt;=1)个商品被同时购买的频率最高，将这n个商品名称的集合（set)返回。</p><p>历次购物的明细，例如：炸鸡,可乐,啤酒;薯片,啤酒,炸鸡;啤酒,雪碧,炸鸡。哪n个商品被同时购买的频率最高，将这n个商品名称的集合（set)返回</p><p><strong>做法</strong>：</p><p>首先整体来讲是先将历次购物明细按照“；”分割成每次的明细，再将每次的明细按照“，”分解成不同的商品存到uniqueProducts中，利用一个<code>generateCombinations</code>函数来根据Set产生组合，把所有的组合都存到结果Map中。</p><p>看上去比较复杂的原因之一是Map的key值是Set&lt;String&gt;类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">getFrequentItem</span><span class="params">(String content,<span class="type">int</span> n)</span>  &#123;</span><br><span class="line">    String[] sessions = content.split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">    Map&lt;Set&lt;String&gt;, Integer&gt; allPairMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(String session : sessions) &#123;</span><br><span class="line">        String[] products = session.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        Set&lt;String&gt; uniqueProducts = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String product: products) &#123;</span><br><span class="line">            uniqueProducts.add(product.trim());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(uniqueProducts.size() &gt;= n) &#123;</span><br><span class="line">            Set&lt;Set&lt;String&gt;&gt; combinations = generateCombinations(uniqueProducts, n);</span><br><span class="line">            <span class="keyword">for</span>(Set&lt;String&gt; combination : combinations) &#123;</span><br><span class="line">                allPairMap.put(combination,allPairMap.getOrDefault(combination, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Set&lt;String&gt; maxFrequent = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxFrequentCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(Map.Entry&lt;Set&lt;String&gt;, Integer&gt; entry : allPairMap.entrySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(maxFrequentCount &lt; entry.getValue()) &#123;</span><br><span class="line">            maxFrequentCount = entry.getValue();</span><br><span class="line">            maxFrequent = entry.getKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  maxFrequent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下类是<code>generateCombinations</code>函数的实现，将products集合转换为ArrayList（这里注意转换的方法），传入n个商品的n值，开始索引start，当前Set集合（回溯法用到），和结果集合。</p><p><code>generateCombinationsHelper</code>函数主要用到了回溯法，如果当前集合的大小为n，则把当前集合加入到结果集中，否则从第start项开始，分别把不用的product加进去，add完后还要remove，这样就可以添加别的元素，这也是回溯法的本质。</p><p>可以类比理解为dfs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Set&lt;Set&lt;String&gt;&gt; <span class="title function_">generateCombinations</span><span class="params">(Set&lt;String&gt; products, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">    Set&lt;Set&lt;String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    generateCombinationsHelper(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(products), n , <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(), result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">generateCombinationsHelper</span><span class="params">(List&lt;String&gt; products, <span class="type">int</span> n, <span class="type">int</span> start, Set&lt;String&gt; current, Set&lt;Set&lt;String&gt;&gt; result)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(current.size() == n) &#123;</span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(current));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i&lt; products.size();i++) &#123;</span><br><span class="line">        current.add(products.get(i));</span><br><span class="line">        generateCombinationsHelper(products, n,i+<span class="number">1</span>,current,result);</span><br><span class="line">        current.remove(products.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="h13">h13</h1><p><strong>任务1</strong>：</p><p>返回红楼梦中出现频率最高的N个词，频率从高到低排列（所谓词就是两个相邻的汉字）</p><p><strong>做法</strong>：</p><p>首先还是通过Map进行每个词语出现次数的统计，注意这里使用了<code>matches</code>函数，汉字的编码范围是<code>[\\u4e00-\\u9fa5]</code></p><p>接下来构造一个List，其中的元素是Map.Entry这个对象，构造函数的参数为entrySet。</p><p>下面利用List中的sort方法，里面的参数是lamda函数，a和b分别代表List中的两个元素，把这两个元素的频率取出来做比较，把大的放在前面，最后我们就得到了频率从高到低的排序。</p><p>根据这个排序结果，从FrequentList取出前n个元素（Map.Entry对象），然后通过<code>getKey()</code>来得到相应的字符串，放到result中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getTopNWords</span><span class="params">(  <span class="type">int</span> n)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> readFromTxt(<span class="built_in">this</span>.filename);</span><br><span class="line">    Map&lt;String, Integer&gt; FrequencyWord = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;text.length()-<span class="number">1</span>;i++) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">word</span> <span class="operator">=</span> text.substring(i,i+<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>(word.matches(<span class="string">&quot;[\\u4e00-\\u9fa5]&#123;2&#125;&quot;</span>)) &#123;<span class="comment">//确保是两个汉字</span></span><br><span class="line">            FrequencyWord.put(word, FrequencyWord.getOrDefault(word, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;Map.Entry&lt;String, Integer&gt;&gt; FrequentList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(FrequencyWord.entrySet());</span><br><span class="line">    FrequentList.sort((a,b)-&gt;b.getValue().compareTo(a.getValue()));</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n &amp;&amp; i &lt;FrequentList.size();i++) &#123;</span><br><span class="line">        result.add(FrequentList.get(i).getKey());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>任务2</strong>：</p><p>将红楼梦文本文件拆分为120个章节，返回120个元素的字符串数组</p><p><strong>做法</strong>：</p><p>注意这里要修改已经给出的代码，因为是用<code>split</code>根据特定的正则表达式分割的，第一回前面还有部分与内容无关的部分，因此要通过<code>Arrays.copyOfRange</code>函数返回原来字符串数组除去第一部分的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] splitContentToChapter(String content) &#123;</span><br><span class="line">    <span class="comment">// 提示 使用 content.split(&quot; 第[一,二,三,四,五,六,七,八,九,十,零]&#123;1,5&#125;回 &quot;);正则表达拆分</span></span><br><span class="line">    <span class="comment">// 百度一下正则表达式</span></span><br><span class="line">    String contents[] = content.split(<span class="string">&quot; 第[一,二,三,四,五,六,七,八,九,十,零]&#123;1,5&#125;回 &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Arrays.copyOfRange(contents, <span class="number">1</span>, contents.length);<span class="comment">//去除第一章节之前的非正式内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>任务3</strong>：</p><p>统计红楼梦章节字符串str出现的频率，把每一章出现的频率存到result[章节数]并返回这个数组</p><p><strong>做法</strong>：</p><p>首先调用<code>readFromTxt</code>和<code>splitContentToChapter</code>这两个上面已经定义好的方法，得到的结果存到chapters数组中，然后遍历数组。</p><p>多说一嘴<code>readFromTxt</code>函数，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">readFromTxt</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// InputStream in=new FileInputStream(filename);</span></span><br><span class="line"></span><br><span class="line">        reader = <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">readed</span> <span class="operator">=</span> reader.read(chars);</span><br><span class="line">        <span class="keyword">while</span> (readed != -<span class="number">1</span>) &#123;</span><br><span class="line">            buf.append(chars, <span class="number">0</span>, readed);</span><br><span class="line">            readed = reader.read(chars);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buf.toString();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        close(reader);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的FileInputStream是字节流，是超类InputStream的具体实现。InputStreamReader是把字节流转换为字符流，然后用Reader来接收。这里也可以用BufferedReader，BufferedReader的好处是可以通过<code>readLine</code>来逐行读取</p><p>这里要注意<code>indexOf(String, int)</code>的使用，返回str从index位置开始出现的位置，如果未找到则返回-1.</p><p>注意每次找到str后要把当前的str跳过去，也就是把index加上str的长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] getStringFrequent(String str) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">120</span>];</span><br><span class="line">    <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> readFromTxt(<span class="built_in">this</span>.filename);</span><br><span class="line">    <span class="built_in">this</span>.chapters = splitContentToChapter(text);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(String chapter : chapters) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(index != -<span class="number">1</span>) &#123;</span><br><span class="line">            index = chapter.indexOf(str, index);<span class="comment">//从index开始查找str，返回查找到的索引</span></span><br><span class="line">            <span class="keyword">if</span>(index != -<span class="number">1</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                index += str.length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result[i++] = count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="h14">h14</h1><p><strong>任务</strong>1：</p><p>现在所有学生的名单students.txt（为了避免乱码问题，文件中不包含汉字），其中每行为一个学生信息，包括学号、姓名、班级，以tab符号分割(，</p><p>学院要求所有同学把自己一寸照片发给辅导员，图片命名规则为 “学号.jpg”</p><p>现在存在下列问题。请用编程的方式帮助辅导员解决如下问题：</p><ul><li><p>找出哪些同学的照片没有交照片；</p></li><li><p>在目标目录下每个班级建立一个子目录，把上交的同学的照片，统一按 学号_姓名.jpg 方式拷贝到各自班级目录下，原来的文件不要删除.</p></li></ul><p>已知的测试信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实际测试中，文件存放位置可能改变，学生数量也可能改变</span></span><br><span class="line"><span class="comment">// 其中每行为一个学生信息，包括学号、姓名、班级，以tab符号分割(\t)，</span></span><br><span class="line">String studentListFileName=<span class="string">&quot;E:/EclipseWorkspace/hw1/src/com/huawei/classroom/student/h14/students.txt&quot;</span>;</span><br><span class="line"><span class="comment">// 学生照片存放的目录，不会包含子目录，本目录的pic给出了存放图片的目录示例，实际测试中，pic 位置可能改变，其下面文件数量也会改变</span></span><br><span class="line">String picDir=<span class="string">&quot;E:/EclipseWorkspace/hw1/src/com/huawei/classroom/student/h14/pic/&quot;</span>;</span><br><span class="line">String targetDir=<span class="string">&quot;E:/EclipseWorkspace/hw1/src/com/huawei/classroom/student/h14/target/&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>做法</strong>：</p><p>首先要注意的就是返回值的类型是Set&lt;String&gt;，所以要首先构造一个noPicIds的集合用来存储没有提交照片的学生的学号。</p><p>然后用<code>BufferedReader</code>来读取<code>studentListFile</code>（这是一个String类型的路径）中的内容，利用<code>readLine()</code>函数来读取每一行的内容，然后通过<code>split</code>方法分别取出studentId, studentName, studentClass.</p><p>然后根据studentId来打开jpg文件</p><ul><li>如果存在，则说明提交了文件，然后创建相应的班级文件夹，把图片拷贝到班级文件夹下</li></ul><p>注意<code>File.copy</code>函数的使用方法：这里的原型是<code>File.copy(Paths, Paths, Options)</code>，表示把第一个Paths对象拷贝到第二个Paths对象。具体来讲，就是<code>getPath()</code>函数得到文件的字符串路径，利用<code>Paths.get</code>函数得到一个静态的Paths对象，其中<code>StandardCopyOption.REPLACE_EXISTING</code>代表拷贝时如果名字相同，则替换已有的文件。</p><ul><li>如果不存在，则说明没有提交文件。那么就把这个学生的学号放到noPidIds集合中。</li></ul><p>同时还要注意，在使用BufferdReader时要考虑异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">copyToTargetDirAndReturnNoExist</span><span class="params">(String studentListFile,String srcDir,String target)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Set&lt;String&gt; noPicIds = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(target);</span><br><span class="line">    <span class="keyword">if</span>(!dir.exists()) &#123;</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>(<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(studentListFile)))&#123;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            String[] details = line.split(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">studentId</span> <span class="operator">=</span> details[<span class="number">0</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">StuName</span> <span class="operator">=</span> details[<span class="number">1</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">StuClass</span> <span class="operator">=</span> details[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">            <span class="type">File</span> <span class="variable">picFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(srcDir + studentId + <span class="string">&quot;.jpg&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(picFile.exists()) &#123;</span><br><span class="line">                <span class="type">File</span> <span class="variable">targetFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(target + StuClass);</span><br><span class="line">                <span class="keyword">if</span>(!targetFile.exists()) &#123;</span><br><span class="line">                    targetFile.mkdirs();</span><br><span class="line">                &#125;</span><br><span class="line">                Files.copy(Paths.get(picFile.getPath()), Paths.get(targetFile.getPath(),studentId +<span class="string">&quot;_&quot;</span> + StuName + <span class="string">&quot;.jpg&quot;</span>),StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                noPicIds.add(studentId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Error Handling File Operations&quot;</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> noPicIds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="h15">h15</h1><p><strong>任务1</strong>：</p><p>测试程序输入一个StringBuffer，刚输入的时候StringBuffer值为空，等待1000ms后，这个StringBuffer的值变为"ok"</p><p><strong>做法</strong>：</p><p>考点主要是重写<code>run</code>方法和<code>Thread.sleep</code>的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadUtil</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"><span class="keyword">private</span> StringBuffer buf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadUtil</span><span class="params">(StringBuffer buf)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.buf = buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">buf.append(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">System.out.println(<span class="string">&quot;Thread was Interrupted!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>任务2</strong>：</p><p>多线程方式，统计[start,end)区间所有的质数，并且小到大排序返回</p><p><strong>做法</strong>：</p><p>首先利用<code>ExecutorService</code>创建一个指定大小的线程池，大小具体为传进来的参数threadCount。</p><p>然后设置一个List里面专门用来存放future对象</p><p>接下来计算每个线程处理的区间大小，让每个线程处理的数字数量几乎相等，注意如果是最后一个线程，必须处理到末尾（end）</p><p><code>executor</code>在<code>submit</code>时，应该用实现<code>Callable</code>接口而不是<code>Runnable</code>接口，因为<code>Callable</code>接口可以有返回值，在重写的<code>call()</code>方法中完成对素数的挑选。</p><p>注意<code>submit</code>返回的对象是<code>Future</code>，所以我们把每一个<code>Future</code>对象都存到一个<code>List</code>中，最后把<code>List</code>中所有的<code>Future</code>对象中的对象（类型是<code>List&lt;long&gt;</code>）合并（用<code>addAll</code>函数）为一个大的<code>List</code>。</p><p>最后调用<code>Collections.sort()</code>方法对这个<code>List</code>进行排序，返回结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrimeUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Long&gt; <span class="title function_">getPrimeList</span><span class="params">(<span class="type">long</span> start, <span class="type">long</span> end, <span class="type">int</span> threadCount)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(threadCount);</span><br><span class="line">        List&lt;Future&lt;List&lt;Long&gt;&gt;&gt; futures = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">long</span> <span class="variable">blockSize</span> <span class="operator">=</span> (end - start) / threadCount;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">localStart</span> <span class="operator">=</span> start + i * blockSize;</span><br><span class="line">            <span class="type">long</span> <span class="variable">localEnd</span> <span class="operator">=</span> (i == threadCount - <span class="number">1</span>) ? end : localStart + blockSize;</span><br><span class="line">            futures.add(executor.submit(<span class="keyword">new</span> <span class="title class_">PrimeTask</span>(localStart, localEnd)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Long&gt; primes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Future&lt;List&lt;Long&gt;&gt; future : futures) &#123;</span><br><span class="line">            primes.addAll(future.get()); <span class="comment">// Retrieve and combine results</span></span><br><span class="line">        &#125;</span><br><span class="line">        executor.shutdown();</span><br><span class="line"></span><br><span class="line">        Collections.sort(primes); <span class="comment">// Ensure the primes are sorted</span></span><br><span class="line">        <span class="keyword">return</span> primes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">PrimeTask</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;List&lt;Long&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">long</span> start, end;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">PrimeTask</span><span class="params">(<span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.start = start;</span><br><span class="line">            <span class="built_in">this</span>.end = end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> List&lt;Long&gt; <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            List&lt;Long&gt; localPrimes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">number</span> <span class="operator">=</span> start; number &lt; end; number++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isPrime(number)) &#123;</span><br><span class="line">                    localPrimes.add(number);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> localPrimes;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">long</span> number)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (number &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (number &lt;= <span class="number">3</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (number % <span class="number">2</span> == <span class="number">0</span> || number % <span class="number">3</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>; i * i &lt;= number; i += <span class="number">6</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (number % i == <span class="number">0</span> || number % (i + <span class="number">2</span>) == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="h16">h16</h1><p><strong>任务</strong>：</p><p>首先看一下Test.java中的main方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    <span class="comment">// 端口号测试的时候随机给</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8088</span>;</span><br><span class="line">    <span class="comment">// 要求完成MyServer类</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MyServer</span>().startListen(port);</span><br><span class="line">    <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, port);</span><br><span class="line">        out = <span class="keyword">new</span> <span class="title class_">java</span>.io.PrintWriter(socket.getOutputStream());</span><br><span class="line">        <span class="comment">// 获得输入流</span></span><br><span class="line">        in = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        <span class="comment">// 随机测试向服务器端输入几句话，要求服务器端原封不动返回</span></span><br><span class="line">        <span class="keyword">if</span> (testEcho(in, out, <span class="string">&quot;hellow&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ok 1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (testEcho(in, out, <span class="string">&quot;haha&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ok 2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 向服务器端输入bye，断开表示断开连接</span></span><br><span class="line">        out.write(<span class="string">&quot;bye&quot;</span> + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        close(in);</span><br><span class="line">        close(out);</span><br><span class="line">        close(socket);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>做法</strong>：</p><p>MyServer类实现监听方法，主要是创建一个新线程，不断的启动线程，采用多线程的方式来实现服务器和客户端的交互</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServer</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyServer</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startListen</span><span class="params">(<span class="type">int</span> port)</span> &#123;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">serverThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerThread</span>(port);</span><br><span class="line">serverThread.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是ServerThread的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h16;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line"><span class="keyword">private</span> ServerSocket server;</span><br><span class="line"><span class="keyword">private</span> Socket socket;</span><br><span class="line"><span class="keyword">private</span> InputStream in;</span><br><span class="line"><span class="keyword">private</span> OutputStream out;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ServerThread</span><span class="params">(<span class="type">int</span> port)</span> &#123;</span><br><span class="line">server = <span class="literal">null</span>;</span><br><span class="line">socket = <span class="literal">null</span>;</span><br><span class="line">in = <span class="literal">null</span>;</span><br><span class="line">out = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">this</span>.port = port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">server = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port);</span><br><span class="line">socket = server.accept();</span><br><span class="line">in = socket.getInputStream();</span><br><span class="line">out = socket.getOutputStream();</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">readed</span> <span class="operator">=</span> in.read(data);</span><br><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, readed);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!(<span class="string">&quot;bye&quot;</span> + <span class="string">&quot;\r\n&quot;</span>).equals(line)) &#123;</span><br><span class="line">out.write(line.getBytes());</span><br><span class="line">readed = in.read(data);</span><br><span class="line">line = <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, readed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">close(server);</span><br><span class="line">close(socket);</span><br><span class="line">close(in);</span><br><span class="line">close(out);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(AutoCloseable closeable)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (closeable != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                closeable.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心部分如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port);</span><br><span class="line">socket = server.accept();</span><br><span class="line">in = socket.getInputStream();</span><br><span class="line">out = socket.getOutputStream();</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">readed</span> <span class="operator">=</span> in.read(data);</span><br><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, readed);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!(<span class="string">&quot;bye&quot;</span> + <span class="string">&quot;\r\n&quot;</span>).equals(line)) &#123;</span><br><span class="line">    out.write(line.getBytes());</span><br><span class="line">    readed = in.read(data);</span><br><span class="line">    line = <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, readed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器用<code>accept</code>一直等待客户端，每次都通过<code>read</code>函数读取100字节大小的内容，<code>readed</code>来记录读取具体的字节数，然后构造一个字符串，比较这个字符串是否是<code>bye</code>，如果不是则重复进行上述操作</p><h1 id="h17">h17</h1><p><strong>任务</strong>：</p><p>这次作业是实现小游戏的Pro版，比之前的游戏（h05~h07）增加了通过BattleField.init(String fileName)从从配置文件中初始化</p><p>在Test里面，还有Player这个对象，可以知道，新增了多个玩家同时玩这个游戏的功能</p><p>在方法实现层面，多了一个无参数的<code>attack</code>的构造方法，即寻找距离他最近、非己方、且活着的对象B进行攻击，如果攻击范围内没有符合要求对象则什么也不做。</p><p><strong>做法</strong>：</p><h2 id="枚举类">1.枚举类</h2><p>首先把所有用到的“名词”都列到枚举类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumObjectType</span> &#123;</span><br><span class="line">base,</span><br><span class="line">health,</span><br><span class="line">strength,</span><br><span class="line">range,</span><br><span class="line">heavyTank,</span><br><span class="line">mediumTank,</span><br><span class="line">rifleSoldier,</span><br><span class="line">RPGSoldier,</span><br><span class="line">dog,</span><br><span class="line">barrack,</span><br><span class="line">warFactory</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们实现读配置文件，这里的做法是把配置文件的所有信息读到一个参数类中，然后用到该信息的时候（如创建对象时）直接从这个参数类中读取信息</p><p>配置文件部分如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#测试的时候，属性的整数值可能会改变</span></span><br><span class="line">base.health=<span class="number">1000</span> </span><br><span class="line">base.<span class="built_in">range</span>=<span class="number">0</span></span><br><span class="line">base.strength=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重型坦克的属性</span></span><br><span class="line">heavyTank.health=<span class="number">500</span></span><br><span class="line">heavyTank.<span class="built_in">range</span>=<span class="number">100</span></span><br><span class="line">heavyTank.strength=<span class="number">100</span></span><br></pre></td></tr></table></figure><p>在BattleField.java中，我定义了两个方法，一个是<code>readLine</code>用来读文件，一个是<code>setValue</code>用来把读到的具体数值写到参数类中。</p><h2 id="参数类简略版">2.参数类（简略版）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Param</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">baseHealth</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">baseRange</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">baseStrength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">heavyTankHealth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">heavyTankRange</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">heavyTankStrength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">mediumTankHealth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">mediumTankRange</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">mediumTankStrength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h2 id="battlefield类">3.Battlefield类</h2><p><code>readLine</code>方法的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String[]&gt; readLines(String filename)&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    List&lt;String[]&gt; results = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(filename);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(reader == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">LineNumberReader</span> <span class="variable">lineReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LineNumberReader</span>(reader);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            line = lineReader.readLine();</span><br><span class="line">            <span class="keyword">if</span>(line == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(line.trim().length()==<span class="number">0</span> || line.trim().startsWith(<span class="string">&quot;#&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            results.add(line.trim().split(<span class="string">&quot;\\.|=&quot;</span>));<span class="comment">//注意反斜杠本身也要转义</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这里也可用用BufferedReader来代替，即</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(filename)))&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>setValue</code>实现如下（简略版）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(String[] rules)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(EnumObjectType.base.toString().equals(rules[<span class="number">0</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(EnumObjectType.health.toString().equals(rules[<span class="number">1</span>])) &#123;</span><br><span class="line">            Param.baseHealth = Integer.parseInt(rules[<span class="number">2</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(EnumObjectType.strength.toString().equals(rules[<span class="number">1</span>])) &#123;</span><br><span class="line">            Param.baseStrength = Integer.parseInt(rules[<span class="number">2</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(EnumObjectType.range.toString().equals(rules[<span class="number">1</span>])) &#123;</span><br><span class="line">            Param.baseRange = Integer.parseInt(rules[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(EnumObjectType.heavyTank.toString().equals(rules[<span class="number">0</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(EnumObjectType.health.toString().equals(rules[<span class="number">1</span>])) &#123;</span><br><span class="line">            Param.heavyTankHealth = Integer.parseInt(rules[<span class="number">2</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(EnumObjectType.strength.toString().equals(rules[<span class="number">1</span>])) &#123;</span><br><span class="line">            Param.heavyTankStrength = Integer.parseInt(rules[<span class="number">2</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(EnumObjectType.range.toString().equals(rules[<span class="number">1</span>])) &#123;</span><br><span class="line">            Param.heavyTankRange = Integer.parseInt(rules[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>然后，便可以写出<code>init</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(String filename)</span> &#123;</span><br><span class="line">    List&lt;String[]&gt; rules = readLines(filename);</span><br><span class="line">    <span class="keyword">if</span>(rules == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(String[] rule : rules) &#123;</span><br><span class="line">        setValue(rule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BattleField.java实际上是维护了一个类型为Player的List列表，因此Battlefield.java中剩下的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BattleField</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Player&gt; players = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BattleField</span><span class="params">()</span> &#123;</span><br><span class="line">players = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createPlayer</span><span class="params">(String playerName)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(playerName == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Player</span> <span class="variable">newPlayer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Player</span>(playerName);</span><br><span class="line">players.add(newPlayer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> GameBase <span class="title function_">createGameBase</span><span class="params">(Player p, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GameBase</span>(p,x,y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Player&gt; <span class="title function_">getAllPlayer</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> players;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="player类的实现">4.Player类的实现</h2><p>Player的实现较为简单，只有一个<code>name</code>属性，还有对应的getter和setter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Player</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Player</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gameobject的实现">5.GameObject的实现</h2><p>这个类里面完成了主要的游戏功能和逻辑，所以包含所有对象的属性，如果有具体对象属性不匹配（比如建筑物的攻击力等等），把对应的属性值设置为0即可。如果有具体对象的方法不匹配或者功能不全面，在对应的子类中重写该方法即可。</p><p>除了之前简单版本游戏中定义的五个属性（x,y,PH,attackValue,attackRange）之外，还有玩家信息（Player p）、<code>List&lt;GameObject&gt; gameObjects</code>存储所有对象（无参攻击时会检索周围所有的对象）、<code>EnumObjectType objectType</code>存储当前对象的类别，在打印<code>result.txt</code>会用到</p><p>此外，每次攻击后还需要打印（到控制台）相关的攻击信息（具体见result.txt）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameObject</span> &#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> health;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> strength;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> range;</span><br><span class="line"><span class="keyword">protected</span> Player player;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> List&lt;GameObject&gt; gameObjects = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">protected</span> EnumObjectType objectType;<span class="comment">//定义这个属性是为了在打印时打印出类别</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">GameObject</span><span class="params">(Player p, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> PH, <span class="type">int</span> attackValue, <span class="type">int</span> attackRange)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.player = p;</span><br><span class="line"><span class="built_in">this</span>.x = x;</span><br><span class="line"><span class="built_in">this</span>.y = y;</span><br><span class="line"><span class="built_in">this</span>.health = PH;</span><br><span class="line"><span class="built_in">this</span>.strength = attackValue;</span><br><span class="line"><span class="built_in">this</span>.range = attackRange;</span><br><span class="line">GameObject.gameObjects.add(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;<span class="comment">//在result.txt中打印</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;[&quot;</span>+player.getName()+<span class="string">&quot;.&quot;</span>+objectType+<span class="string">&quot; live=&quot;</span>+(!isDestroyed())+<span class="string">&quot; x=&quot;</span>+x+<span class="string">&quot; y=&quot;</span>+y+<span class="string">&quot; health=&quot;</span>+getHealth()+<span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">(<span class="type">int</span> dx, <span class="type">int</span> dy)</span> &#123;<span class="comment">//building不能移动，所以在building中重写</span></span><br><span class="line"><span class="built_in">this</span>.x += dx;</span><br><span class="line"><span class="built_in">this</span>.y += dy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getDistance</span><span class="params">(GameObject obj1, GameObject obj2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Math.sqrt(Math.pow(obj1.x-obj2.x, <span class="number">2</span>)+Math.pow(obj1.y-obj2.y, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">(GameObject B)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.isDestroyed() || B.isDestroyed() || getDistance(<span class="built_in">this</span>,B)&gt;<span class="built_in">this</span>.range) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">debug</span> <span class="operator">=</span> <span class="built_in">this</span> + <span class="string">&quot;攻击&quot;</span>+B;</span><br><span class="line">B.health -= <span class="built_in">this</span>.strength;</span><br><span class="line">debug += <span class="string">&quot;攻击后 health=&quot;</span>+B.getHealth();</span><br><span class="line">System.out.println(debug);<span class="comment">//在result.txt中打印</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">min</span> <span class="operator">=</span> <span class="built_in">this</span>.range;</span><br><span class="line"><span class="keyword">for</span>(GameObject g: gameObjects) &#123;</span><br><span class="line"><span class="keyword">if</span>(g.isDestroyed() || <span class="built_in">this</span>.isDestroyed()) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(getDistance(<span class="built_in">this</span>,g) &lt; min) &#123;</span><br><span class="line">min = getDistance(<span class="built_in">this</span>,g);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(GameObject g: gameObjects) &#123;</span><br><span class="line"><span class="keyword">if</span>(g.isDestroyed() || <span class="built_in">this</span>.isDestroyed()) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(getDistance(<span class="built_in">this</span>,g) - min &lt; <span class="number">0.000001</span>) &#123;</span><br><span class="line">attack(g);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHealth</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.health;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDestroyed</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.health&lt;=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setObjectType</span><span class="params">(EnumObjectType type)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.objectType = type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dead</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//在Soldier类中重写</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他各类">6.其他各类</h2><p>其他各种类和之前的类似，唯一需要增加的就是每次构造完对象后都需要设置类型，树形图表示如下：</p><figure><img src="./image-20240427183859315.png" alt="image-20240427183859315" /><figcaption aria-hidden="true">image-20240427183859315</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameBase</span> <span class="keyword">extends</span> <span class="title class_">GameObject</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">GameBase</span><span class="params">(Player p, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(p,x,y,Param.baseHealth,Param.baseStrength,Param.baseRange);</span><br><span class="line">setObjectType(EnumObjectType.base);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Building <span class="title function_">building</span><span class="params">(EnumObjectType type, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;<span class="comment">//基地创建建筑物时可以指定x和y</span></span><br><span class="line"><span class="keyword">if</span>(type == EnumObjectType.barrack) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Barrack</span>(<span class="built_in">this</span>.player, x, y);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == EnumObjectType.warFactory) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WarFactory</span>(<span class="built_in">this</span>.player, x, y);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在写Building类时，要重写move方法，因为建筑物不能移动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Building</span> <span class="keyword">extends</span> <span class="title class_">GameObject</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Building</span><span class="params">(Player p, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> PH, <span class="type">int</span> attackValue, <span class="type">int</span> attackRange)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(p,x,y,PH,attackValue,attackRange);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">(<span class="type">int</span> dx, <span class="type">int</span> dy)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>兵营Barrack产生各种士兵和狗</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Barrack</span> <span class="keyword">extends</span> <span class="title class_">Building</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Barrack</span><span class="params">(Player p, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(p,x,y,Param.barrackHealth,Param.barrackStrengh,Param.barrackRange);</span><br><span class="line">setObjectType(EnumObjectType.barrack);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> GameObject <span class="title function_">traing</span><span class="params">(EnumObjectType type)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(type == EnumObjectType.rifleSoldier) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RifleSoldier</span>(<span class="built_in">this</span>.player, <span class="built_in">this</span>.x, <span class="built_in">this</span>.y);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == EnumObjectType.RPGSoldier) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RPGSoldier</span>(<span class="built_in">this</span>.player, <span class="built_in">this</span>.x, <span class="built_in">this</span>.y);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == EnumObjectType.dog) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="built_in">this</span>.player, <span class="built_in">this</span>.x, <span class="built_in">this</span>.y);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个士兵都继承自父类Soldier</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Soldier</span> <span class="keyword">extends</span> <span class="title class_">GameObject</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">livingSoldierCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">deadedSoldierCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Soldier</span><span class="params">(Player p, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> PH , <span class="type">int</span> attackValue, <span class="type">int</span> attackRange)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(p,x,y,PH,attackValue,attackRange);</span><br><span class="line">livingSoldierCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLivingSoldierCount</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> livingSoldierCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDeadedSoldierCount</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> deadedSoldierCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dead</span><span class="params">()</span> &#123;</span><br><span class="line">livingSoldierCount--;</span><br><span class="line">deadedSoldierCount++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RifleSoldier</span> <span class="keyword">extends</span> <span class="title class_">Soldier</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RifleSoldier</span><span class="params">(Player p, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(p,x,y,Param.rifleSoldierHealth,Param.rifleSoldierStrength,Param.rifleSoldierRange);</span><br><span class="line">setObjectType(EnumObjectType.rifleSoldier);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RPGSoldier</span> <span class="keyword">extends</span> <span class="title class_">Soldier</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RPGSoldier</span><span class="params">(Player p, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(p,x,y,Param.RPGSoldierHealth,Param.RPGSoldierStrength,Param.RPGSoldierRange);</span><br><span class="line">setObjectType(EnumObjectType.RPGSoldier);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>狗直接继承GameObject类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">GameObject</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(Player p, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(p,x,y,Param.dogHealth,Param.dogStrength,Param.dogRange);</span><br><span class="line">setObjectType(EnumObjectType.dog);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>兵工厂产生两种类型的Tank</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WarFactory</span> <span class="keyword">extends</span> <span class="title class_">Building</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">WarFactory</span><span class="params">(Player p, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(p,x,y,Param.warFactoryHealth,Param.warFactoryStrengh,Param.warFactoryRange);</span><br><span class="line">setObjectType(EnumObjectType.warFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Tank <span class="title function_">building</span><span class="params">(EnumObjectType type)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(type == EnumObjectType.heavyTank) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HeavyTank</span>(<span class="built_in">this</span>.player,<span class="built_in">this</span>.x, <span class="built_in">this</span>.y);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == EnumObjectType.mediumTank) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MediumTank</span>(<span class="built_in">this</span>.player, <span class="built_in">this</span>.x, <span class="built_in">this</span>.y);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeavyTank</span> <span class="keyword">extends</span> <span class="title class_">Tank</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HeavyTank</span><span class="params">(Player p, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(p,x,y,Param.heavyTankHealth,Param.heavyTankStrength,Param.heavyTankRange);</span><br><span class="line">setObjectType(EnumObjectType.heavyTank);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MediumTank</span> <span class="keyword">extends</span> <span class="title class_">Tank</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MediumTank</span><span class="params">(Player p, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(p,x,y,Param.mediumTankHealth,Param.mediumTankStrength,Param.mediumTankRange);</span><br><span class="line">setObjectType(EnumObjectType.mediumTank);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="h18">h18</h1><p>首先补充一下正则表达式的知识</p><p><strong>基本匹配</strong>：</p><p>正则表达式a.c中间的.可以且仅限匹配一个字符</p><p><code>\d</code>仅限单个数字字符，而<code>\D</code>则匹配一个非数字。</p><p>用<code>\w</code>可以匹配一个字母、数字或下划线，w的意思是word。</p><p>用<code>\s</code>可以匹配一个空格字符，注意空格字符不但包括空格<code></code>，还包括tab字符（在Java中用<code>\t</code>表示）。</p><p>修饰符<code>*</code>可以匹配任意个字符（包括0个）如<code>A\d*</code>，修饰符<code>+</code>可以匹配至少一个字符，如<code>A\d+</code>。</p><p>如果我们想精确指定n个字符怎么办？用修饰符<code>&#123;n&#125;</code>就可以。如<code>A\d&#123;3&#125;</code></p><p>如果我们想指定匹配n~m个字符怎么办？用修饰符<code>&#123;n,m&#125;</code>就可以。如<code>A\d&#123;3,5&#125;</code></p><p>如果没有上限，那么修饰符<code>&#123;n,&#125;</code>就可以匹配至少n个字符。</p><p><strong>匹配开头和结尾</strong></p><p>用正则表达式进行多行匹配时，我们用<code>^</code>表示开头，<code>$</code>表示结尾。例如，<code>^A\d&#123;3&#125;$</code>，可以匹配<code>"A001"</code>、<code>"A380"</code>。</p><p><strong>匹配指定范围</strong></p><p>要匹配大小写不限的6位十六进制数，比如<code>1A2b3c</code>，我们可以这样写：<code>[0-9a-fA-F]&#123;6&#125;</code></p><p><strong>或规则</strong></p><p>用<code>|</code>连接的两个正则规则是<em>或</em>规则，例如，<code>AB|CD</code>表示可以匹配<code>AB</code>或<code>CD</code>。</p><p><strong>使用括号</strong></p><p>现在我们想要匹配字符串<code>learn java</code>、<code>learn php</code>和<code>learn go</code>怎么办？可表示成<code>learn\\s(java|php|go)</code>。</p><p><strong>任务</strong>：</p><p>h18主要是考察反射</p><p>？？？</p><p><strong>做法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h18;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Map&lt;String, Object&gt;&gt; classConfigs = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClassFactory</span><span class="params">(String configFilePath)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(configFilePath), <span class="string">&quot;UTF-8&quot;</span>))) &#123;</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                line = line.trim();</span><br><span class="line">                <span class="keyword">if</span> (line.isEmpty() || line.startsWith(<span class="string">&quot;#&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>; <span class="comment">// 跳过空行和注释行</span></span><br><span class="line">                &#125;</span><br><span class="line">                String[] parts = line.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> parts[<span class="number">0</span>].trim();</span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> parts[<span class="number">1</span>].trim().replaceAll(<span class="string">&quot;^\&quot;|\&quot;$&quot;</span>, <span class="string">&quot;&quot;</span>); <span class="comment">// 去除开头和结尾的双引号</span></span><br><span class="line">                String[] classAndProperty = key.split(<span class="string">&quot;\\.(?=[^\\.]+$)&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> classAndProperty[<span class="number">0</span>];<span class="comment">//类名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> classAndProperty[<span class="number">1</span>];<span class="comment">//属性名</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 根据值是否以引号包围来判断是否为字符串</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">typedValue</span> <span class="operator">=</span> parts[<span class="number">1</span>].startsWith(<span class="string">&quot;\&quot;&quot;</span>) &amp;&amp; parts[<span class="number">1</span>].endsWith(<span class="string">&quot;\&quot;&quot;</span>) ? value : Integer.parseInt(value);</span><br><span class="line"></span><br><span class="line">                classConfigs.computeIfAbsent(className, k -&gt; <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;()).put(propertyName, typedValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">createInstance</span><span class="params">(Class&lt;T&gt; clazz)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">instance</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">        Map&lt;String, Object&gt; properties = classConfigs.get(clazz.getName());</span><br><span class="line">        <span class="keyword">if</span> (properties != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">propName</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">propValue</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">                <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> <span class="string">&quot;set&quot;</span> + propName.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + propName.substring(<span class="number">1</span>);<span class="comment">//例如setColor</span></span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(methodName, propValue.getClass());</span><br><span class="line">                method.invoke(instance, propValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码有几点注意事项，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] classAndProperty = key.split(<span class="string">&quot;\\.(?=[^\\.]+$)&quot;</span>);</span><br></pre></td></tr></table></figure><p>首先这句话是正则表达式+<a href = "https://www.runoob.com/w3cnote/reg-lookahead-lookbehind.html" target = "_blank">正向先行断言</a></p><p>代表匹配从开头到结尾出现的<code>.</code>中的最后一个<code>.</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classConfigs.computeIfAbsent(className, k -&gt; <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;()).put(propertyName, typedValue);</span><br></pre></td></tr></table></figure><p>这里是调用了一个Map中的<code>computeIfAbsent</code>方法，检查是否有<code>className</code>，如果有，则返回对应的value值（还是一个Map）；如果没有，则构造一个新的className到value的映射关系（这里用到了lambda表达式），然后把对应的属性名和属性值放进去</p><p>接下来就是创建一个实例</p><p>实现通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">T</span> <span class="variable">instance</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br></pre></td></tr></table></figure><p>创建一个无参构造实例</p><p>接下来读取上面的配置信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; properties = classConfigs.get(clazz.getName());</span><br></pre></td></tr></table></figure><p>将该类下的所有属性以及对应的值存放到Map中</p><p>然后就是遍历Map，获得属性名和属性值，通过属性名构造方法的名字，然后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(methodName, propValue.getClass());</span><br></pre></td></tr></table></figure><p>通过<code>getMethod</code>获得该方法名和指定参数类型对应的方法，最后通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">method.invoke(instance, propValue);</span><br></pre></td></tr></table></figure><p><code>invoke</code>函数传入实例和方法参数，来设置实例的相关属性</p><h1 id="h19">h19</h1><p>h19又返璞归真了，回到了之前简单的问题，总共有五个小任务，这里只介绍后两个</p><p><strong>任务1</strong>：</p><p>完成StrUtil类，其中的removeDulpicatedChar()方法可以去掉一个字符串中的重复字符，重复出现的字符只保留一个，并仍然按原来的顺序输出</p><p><strong>做法</strong>：</p><p>利用集合去重的方法，但是一般的集合是无序的，所以采用LinkedHashSet。</p><p>遍历集合时，采用Iterator来进行遍历，每次用next()函数取出每个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">removeDulpicatedChar</span><span class="params">(String string)</span> &#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    Set&lt;Character&gt; UniqueEle = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();<span class="comment">//使用Linked保留原来的顺序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;string.length();i++) &#123;</span><br><span class="line">        UniqueEle.add(string.charAt(i));</span><br><span class="line">    &#125;</span><br><span class="line">    Iterator&lt;Character&gt; it = UniqueEle.iterator();</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">        result += it.next();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里的result还可以用StringBuild，每次<code>append()</code>，返回<code>result.toString()</code>.</p><p><strong>任务2</strong>：</p><p>将所有学生姓名按总成绩从高到低排名，如果成绩并列则按语文从高到低排列， 如果语文成绩也相同，则按数学由高到低排列，如果数学成绩也相同，则按英语由高到低排列（不会出现总分相同&amp;&amp;语文相同&amp;&amp;数学相同&amp;&amp;英语相同情况)</p><p><strong>做法</strong>：</p><p>由于每个学生有语文、数学和英语三门成绩，所以要单独构造一个Student类，里面包含语文、数学和英语和总成绩，然后建立一个学生姓名（String）到Student类的映射关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h19.q05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentUtil</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> chineseScore;</span><br><span class="line"><span class="type">int</span> mathScore;</span><br><span class="line"><span class="type">int</span> engScore;</span><br><span class="line"><span class="type">int</span> totalScore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateScore</span><span class="params">(String subject, <span class="type">int</span> score)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;语文&quot;</span>.equals(subject)) &#123;</span><br><span class="line"><span class="built_in">this</span>.chineseScore += score;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;数学&quot;</span>.equals(subject)) &#123;</span><br><span class="line"><span class="built_in">this</span>.mathScore += score;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;英语&quot;</span>.equals(subject)) &#123;</span><br><span class="line"><span class="built_in">this</span>.engScore += score;</span><br><span class="line">&#125;</span><br><span class="line">totalScore += score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">sort</span><span class="params">(String fileName)</span>&#123;</span><br><span class="line">Map&lt;String,Student&gt; stu = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//建立学生姓名和学生之间的关系</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line"><span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(file)))&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">String parts[] = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(parts.length == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> parts[<span class="number">0</span>].trim();</span><br><span class="line"><span class="type">String</span> <span class="variable">subject</span> <span class="operator">=</span> parts[<span class="number">1</span>].trim();</span><br><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> Integer.parseInt(parts[<span class="number">2</span>].trim().substring(<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> stu.getOrDefault(name, <span class="keyword">new</span> <span class="title class_">Student</span>(name));</span><br><span class="line">student.updateScore(subject, score);</span><br><span class="line">stu.put(name, student);<span class="comment">//相当于把更新后放到Map中</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(stu.values());<span class="comment">//把Map中所有value构造List</span></span><br><span class="line">students.sort((a,b)-&gt;&#123;</span><br><span class="line"><span class="keyword">if</span>(a.totalScore != b.totalScore) &#123;</span><br><span class="line"><span class="keyword">return</span> Integer.compare(b.totalScore, a.totalScore);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a.chineseScore != b.chineseScore) &#123;</span><br><span class="line"><span class="keyword">return</span> Integer.compare(b.chineseScore, a.chineseScore);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a.mathScore != a.mathScore) &#123;</span><br><span class="line"><span class="keyword">return</span> Integer.compare(b.mathScore, a.mathScore);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Integer.compare(b.engScore, a.engScore);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(Student s : students) &#123;</span><br><span class="line">result.add(s.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点是排序方法，首先只有List能进行sort排序，所以先通过Map中的value值构造List列表，然后通过lambda函数从大到小进行排序（注意写法），最后返回结果。</p><h1 id="h20">h20</h1><p><strong>任务</strong>：</p><p>定义合适的类、接口，使得下面的代码编译并能正确运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">D</span>();</span><br><span class="line">    <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">D</span>();</span><br><span class="line">    <span class="type">D</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">D</span>();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;pass 1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> c;</span><br><span class="line">    System.out.println(<span class="string">&quot;pass 2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    a = d;</span><br><span class="line">    System.out.println(<span class="string">&quot;pass 3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    c=<span class="keyword">new</span> <span class="title class_">E</span>();</span><br><span class="line">    System.out.println(<span class="string">&quot;pass 4&quot;</span>);</span><br><span class="line"></span><br><span class="line">    a=<span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">    <span class="keyword">if</span> (!(a <span class="keyword">instanceof</span> B)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;pass 5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(c <span class="keyword">instanceof</span> A)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;pass 6&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(c <span class="keyword">instanceof</span> D)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;pass 7&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>做法</strong>：</p><p><font color = "red">总结：能new出来的都是class而不是interface，右边的都是子类或者子接口</font></p><p>根据上面的结论，可以判断A、D、E都是class；B、C是interface</p><p>由<code>A a = new D()</code>和<code>C c = new D()</code>可以判断D是A的子类，是C的子接口</p><p>由<code>B b = c</code>可以判断，C是B的子接口</p><p>由<code>c=new E()</code>可判断，E是C的子接口</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">B</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">extends</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">C</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E</span> <span class="keyword">implements</span> <span class="title class_">C</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，同类型的是extends；类继承接口是implements</p><h1 id="h31">h31</h1><h2 id="q02">q02</h2><p><strong>任务</strong>：</p><p>list中每个元素存了一个字符串，请返回包含不同特殊字符 最多的字符串,所谓特殊字符在本题目中定义为如下9个字符：(~!@#$%^&amp;*) 不包括括号, 不会出现并列的情况</p><p><strong>做法</strong>：</p><p>这道题考察了map和set的使用，Map是用来表示每个字符串中特殊字符的个数，而set则是用来计算不同特殊字符的个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Classq02</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Set&lt;Character&gt; charSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(<span class="string">&#x27;~&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;*&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">findMaxDistinctCharWord</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line"><span class="type">int</span> i, max;</span><br><span class="line"><span class="type">String</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> list.get(i);</span><br><span class="line"><span class="keyword">if</span> (!map.containsKey(str)) &#123;</span><br><span class="line">map.put(str, getDistinctCharCount(str));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">max = <span class="number">0</span>;</span><br><span class="line">Set&lt;String&gt; stringSet = map.keySet();</span><br><span class="line"><span class="keyword">for</span> (String str: stringSet) &#123;</span><br><span class="line"><span class="keyword">if</span> (max &lt; map.get(str)) &#123;</span><br><span class="line">max = map.get(str);</span><br><span class="line">ans = str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDistinctCharCount</span><span class="params">(String s)</span> &#123;</span><br><span class="line">Set&lt;Character&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"><span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> cha : chars) &#123;</span><br><span class="line"><span class="keyword">if</span> (charSet.contains(cha)) &#123;</span><br><span class="line">set.add(cha);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> set.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="q06">q06</h2><p><strong>任务</strong>：</p><p>递归的计算一个目录子目录下包含的文件数量（不包括目录数量，仅仅包括文件数量）</p><p><strong>做法</strong>：</p><p>要注意File对象有多个构造函数，这是其中的两个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File(String pathname);</span><br><span class="line">File(File parent, String child);</span><br></pre></td></tr></table></figure><p>还要注意<code>exists()</code>,<code>isDirectory()</code>,<code>list()</code>函数的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Classq06</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Classq06</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">recursiveGetFileCount</span><span class="params">(String homeDir)</span> &#123;</span><br><span class="line"> <span class="comment">// </span></span><br><span class="line">File dir=<span class="keyword">new</span> <span class="title class_">File</span>(homeDir);</span><br><span class="line">ListFiles(dir);</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ListFiles</span><span class="params">(File dir)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!dir.exists() || !dir.isDirectory()) &#123;<span class="comment">//dir不存在或dir不是目录</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String[] files = dir.list();<span class="comment">//里面存放着每个文件名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir, files[i]);<span class="comment">//采用父级目录和文件名构造出路径</span></span><br><span class="line"><span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ListFiles(file); <span class="comment">// 对于子目录,进行递归调用</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="q10">q10</h2><p><strong>任务</strong>：</p><p>fileName文件中以 “商品名称,数量,总金额” 格式存放了若干购物流水 文件中可能有空行 也可能有 注释行（#开头） 商品名称 数量 总金额 前后可能有空格 请完成sortByAmount方法 按每种商品累积销售数量从高到低排序，如果出现累积销售数量相同的情况请按每种商品累积销售金额排序由高到低排序 请完成sortByMoney方法 按每种商品累积销售金额从高到低排序，如果出现累积销售金额相同的情况请按每种商品累积销售数量由高到低排序</p><p><strong>做法</strong>：</p><p><font color = "red">此题比较复杂，建议多看几遍</font></p><p>首先构造了一个<code>Item</code>类，用来存放name，amount，money。注意这个类实现了Comparable接口</p><p>Comparable是排序接口；若一个类实现了Comparable接口，就意味着“该类支持排序”。可以使用Arrays.sort()对改类进行排序</p><p>在该类中定义了<code>compareTo</code>方法来进行数量的比较，定义了<code>compareMTo</code>方法来进行金钱的比较</p><p>在 Java 中，compareTo 方法的返回值定义了排序顺序： <code>返回 1</code> 表示当前对象应该排在传入对象<code>之后</code>。 <code>返回 -1</code>表示当前对象应该排在传入对象<code>之前</code>。 <code>返回 0</code>表示两者<code>相等</code>。</p><p>Item.java类如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Item</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> amount;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> money;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Item</span><span class="params">(String name, <span class="type">int</span> amount, <span class="type">int</span> money)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.amount = amount;</span><br><span class="line"><span class="built_in">this</span>.money = money;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Item</span><span class="params">(String name, String amount, String money)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>(name, Integer.valueOf(amount), Integer.valueOf(money));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Item)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.amount &gt; ((Item) o).amount) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.amount == ((Item) o).amount) &#123;<span class="comment">//升序排列</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.money &gt; ((Item) o).money) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.money == ((Item) o).money) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareMTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Item)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.money &gt; ((Item) o).money) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.money == ((Item) o).money) &#123;<span class="comment">//升序排列</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.amount &gt; ((Item) o).amount) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.amount == ((Item) o).amount) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color = "red">Comparable重写compareTo，参数只有一个</font></p><p><font color = "red">Comparator重写compare，参数有两个</font></p><p>然后构造一个ItemComparator类用来比较两个Item的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItemComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Item&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> order;<span class="comment">//通过order是否为-1来决定到底是数值比较还是金钱比较</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ItemComparator</span><span class="params">(<span class="type">int</span> order)</span> </span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.order = order;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Item i1, Item i2)</span> </span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> -i1.compareTo(i2);<span class="comment">//倒序排列</span></span><br><span class="line">        <span class="type">int</span> resultM=-i1.compareMTo(i2);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.order == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> resultM;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>classq10部分的主体有两个，一个是sortByAmount，一个是sortByMoney</p><p><font color = "red">注意在sort的参数为构造的Comparator</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">sortByAmount</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">    <span class="comment">//return sort(fileName);</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Item&gt; scoreLists = initScoreLists(fileName);</span><br><span class="line">    scoreLists.sort(<span class="keyword">new</span> <span class="title class_">ItemComparator</span>(-<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; scoreLists.size(); i++) &#123;</span><br><span class="line">        result.add(scoreLists.get(i).getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">sortByMoney</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Item&gt; scoreLists = initScoreLists(fileName);</span><br><span class="line">    scoreLists.sort(<span class="keyword">new</span> <span class="title class_">ItemComparator</span>(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; scoreLists.size(); i++) &#123;</span><br><span class="line">        result.add(scoreLists.get(i).getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中比较关键的就是<code>initScoreLists</code>函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Item&gt; <span class="title function_">initScoreLists</span><span class="params">(String filename)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    List&lt;String[]&gt; items = readLines(filename);<span class="comment">//自己定义的逐行读文件函数，有模板</span></span><br><span class="line">    Set&lt;String&gt; nameSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    List&lt;Item&gt; itemList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; items.size(); i++) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">0</span>, amount = <span class="number">0</span>;</span><br><span class="line">        List&lt;String&gt; itemLine = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="string">&quot;&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>));</span><br><span class="line">        line2list(items.get(i), itemLine);<span class="comment">//将String[]转化为List&lt;String&gt;</span></span><br><span class="line">        name = itemLine.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (nameSet.contains(name)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;<span class="comment">//注意是双重循环，所以要continue</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nameSet.add(name);</span><br><span class="line">        &#125;</span><br><span class="line">        money += Integer.parseInt(itemLine.get(<span class="number">2</span>));</span><br><span class="line">        amount += Integer.parseInt(itemLine.get(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; items.size(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (items.get(j)[<span class="number">0</span>].equals(name)) &#123;</span><br><span class="line">                line2list(items.get(j), itemLine);</span><br><span class="line">                money += Integer.parseInt(itemLine.get(<span class="number">2</span>));</span><br><span class="line">                amount += Integer.parseInt(itemLine.get(<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Item</span>(name, amount, money);</span><br><span class="line">        itemList.add(item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> itemList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>line2list函数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">line2list</span><span class="params">(String[] itemLine, List&lt;String&gt; itemList)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> itemLine[<span class="number">0</span>];</span><br><span class="line">    <span class="type">String</span> <span class="variable">amount</span> <span class="operator">=</span> itemLine[<span class="number">1</span>];</span><br><span class="line">    <span class="type">String</span> <span class="variable">money</span> <span class="operator">=</span> itemLine[<span class="number">2</span>];</span><br><span class="line">    itemList.set(<span class="number">0</span>, name);<span class="comment">//设定指定位置的值</span></span><br><span class="line">    itemList.set(<span class="number">1</span>, amount);</span><br><span class="line">    itemList.set(<span class="number">2</span>, money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逐行读文件函数模板如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String[]&gt; readLines(String filename) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    List&lt;String[]&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(filename);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (reader == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">LineNumberReader</span> <span class="variable">lineReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LineNumberReader</span>(reader);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            line = lineReader.readLine();</span><br><span class="line">            <span class="keyword">if</span> (line == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(line) || line.charAt(<span class="number">0</span>) == <span class="string">&#x27;#&#x27;</span> || line.trim().length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(line.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="q11">q11</h2><p><strong>任务1</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一问  完成Classq11.extractComment(String line)方法，具体要求见 Classq11.extractComment(String line)</span></span><br><span class="line">String line=<span class="string">&quot;String str=\&quot;he;/*test*/\&quot;;&quot;</span>;</span><br><span class="line"><span class="comment">//这行的Java代码对应如下：</span></span><br><span class="line"><span class="comment">//String str=&quot;he;/*test*/&quot;;</span></span><br><span class="line"><span class="comment">//System.out.println(util.extractComment(line));</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;&quot;</span>.equals(util.extractComment(line))) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;case 2 pass&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">line=<span class="string">&quot;String str=\&quot;he//\&quot;;//hi;&quot;</span>;</span><br><span class="line"><span class="comment">//这行的Java代码对应如下：</span></span><br><span class="line"><span class="comment">//String str=&quot;he//&quot;;//hi;</span></span><br><span class="line"><span class="comment">//System.out.println(util.extractComment(line));</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;hi;&quot;</span>.equals(util.extractComment(line))) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;case 3 pass&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>做法</strong>：</p><p>主要是掌握indexOf(str,beginIndex)函数和subString函数</p><p><font color = "red">注意"\""</font>作为一个字符的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">extractComment</span><span class="params">(String line)</span> &#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated constructor stub //&#123;03e7c9a7b63b7c323243d92158ea746a&#125;</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> <span class="number">0</span>, tail = <span class="number">0</span>, primePos = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">primePos1</span> <span class="operator">=</span> (line.indexOf(<span class="string">&quot;\&quot;&quot;</span>) == -<span class="number">1</span>) ? <span class="number">0</span> : line.indexOf(<span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">    primePos = (primePos1 == <span class="number">0</span>) ? <span class="number">0</span> : line.indexOf(<span class="string">&quot;\&quot;&quot;</span>, primePos1+<span class="number">1</span>);</span><br><span class="line">    System.out.println(primePos);</span><br><span class="line">    System.out.println(primePos1);</span><br><span class="line">    <span class="keyword">if</span>(line.indexOf(<span class="string">&quot;/*&quot;</span>,primePos) != -<span class="number">1</span>) &#123;</span><br><span class="line">        head = line.indexOf(<span class="string">&quot;/*&quot;</span>,primePos)+<span class="number">2</span>;</span><br><span class="line">        tail = line.indexOf(<span class="string">&quot;*/&quot;</span>,primePos)-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> line.substring(head,tail);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(line.indexOf(<span class="string">&quot;//&quot;</span>,primePos) != -<span class="number">1</span>) &#123;</span><br><span class="line">        head = line.indexOf(<span class="string">&quot;//&quot;</span>,primePos)+<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> line.substring(head);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>任务2</strong>：</p><p>第二问 导数表达式和导数值的计算<br />fx是只包含有一个自变量 x 是表达式，表达式中仅仅包含 加(+)、减(-)、乘(*)、除(/)、乘方(^ 且指数中不包含变量)，请写一个函数计算fx的导数 例如：(x-8)^2/(x-2) x<sup>3+x</sup>2+1 6/(x+1)+7/(x+8) String fx = "x^2+6"; 第二问 1 请计算这个函数的导数表达式，表达式不唯一，例如 x+1 或者 1+x 或者 1 + x 都可以。 String dxe = util.getDxExp(fx); 第二问 2 请计算这个函数在指定x值的导数值并返回</p><p><strong>做法</strong>：</p><p>？？？</p><h1 id="h51">h51</h1><p><strong>任务</strong>：</p><p><span class="citation" data-cites="param">@param</span> total 红包总金额，以元为单位，精确到分，系统测试的时候保证总金额至少够每人分得1分钱 <span class="citation" data-cites="param">@param</span> personCount 分红包的总人数&gt;0 <span class="citation" data-cites="return">@return</span> 每个人分得的钱数 规则遵循微信分红包规则 例如： 要求 每人分得的钱数总和=total 每个人分得钱数必须是正数，且不能少于1分</p><p><strong>做法</strong>：</p><p>完成这道题需要考虑两点</p><blockquote><p>1.以元为单位，精确到分</p></blockquote><p>这要求构造随机数的时候可以先整体*100，然后可以避免掉小数</p><blockquote><p>2.至少够每人分得1分钱</p></blockquote><p>这要求在生成随机数的时候先预先为每个人保留1分钱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span>[] getHongbao(<span class="type">double</span> total,<span class="type">int</span> personCount) &#123;</span><br><span class="line">    <span class="type">double</span> result[]=<span class="keyword">new</span> <span class="title class_">double</span>[personCount];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(personCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">totalCents</span> <span class="operator">=</span> (<span class="type">int</span>)Math.round(total*<span class="number">100</span>);</span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">remainCents</span> <span class="operator">=</span> totalCents - personCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里只分配两个人的</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;personCount-<span class="number">1</span>;i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">randomCents</span> <span class="operator">=</span> random.nextInt(remainCents+<span class="number">1</span>);<span class="comment">//[1,remainCents]</span></span><br><span class="line">        result[i] = (randomCents+<span class="number">1</span>)/<span class="number">100.0</span>;<span class="comment">//这里包含了之前的1分钱</span></span><br><span class="line">        remainCents -= randomCents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result[personCount-<span class="number">1</span>] = (remainCents+<span class="number">1</span>)/<span class="number">100.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="h52">h52</h1><p><strong>任务</strong>：</p><p>将num进行质因数分解，将分解到的质因数放到Set里面返回</p><p><strong>做法</strong>：</p><p>关键是考虑好算法，本题可以将大于等于2的数num从2开始依次遍历，如果找到一个质数因子，就把这个因子放到结果集中，并把num去除掉该因子，然后再从2开始依次遍历寻找（因为因子2可能不止一个）。</p><p>注意该算法不可能存在遍历到非质数的情况，因为非质数肯定由质数因子构成（如4可以分解为2*2）</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">Set</span>&lt;<span class="type">Integer</span>&gt; decompose(<span class="type">int</span> num) &#123;</span><br><span class="line">     <span class="keyword">Set</span>&lt;<span class="type">Integer</span>&gt; res = <span class="built_in">new</span> HashSet&lt;&gt;();</span><br><span class="line">     <span class="keyword">if</span>(num &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num == <span class="number">1</span>) &#123;</span><br><span class="line">          res.<span class="keyword">add</span>(<span class="number">1</span>);</span><br><span class="line">     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="type">int</span> i = <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">while</span>(i &lt;= num) &#123;</span><br><span class="line">              <span class="keyword">if</span>(num % i == <span class="number">0</span>) &#123;</span><br><span class="line">                  res.<span class="keyword">add</span>(i);</span><br><span class="line">                  num = num/i;//把i这个因数去掉，剩下的因子构成num</span><br><span class="line">                  i = <span class="number">2</span>;//i每次从<span class="number">2</span>开始</span><br><span class="line">              &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                  i++;//不可能出现不是质数的情况，因为因子已经从小到大考虑过了</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="h53">h53</h1><p><strong>任务</strong>：</p><p>1对兔子出生以后经过180天可以生出一窝（2对）兔子，以后每隔90天繁殖一次生出一窝（2对）兔子 每对兔子的寿命是700天 <span class="citation" data-cites="param">@param</span> startCount 第0天 开始的时候初生的兔子对数 <span class="citation" data-cites="param">@param</span> days 经过的天份数 <span class="citation" data-cites="return">@return</span> 目前系统中存活的兔子的对数</p><p><strong>做法</strong>：</p><p>首先要构造一个Rabbit类来存放每个兔子的年龄</p><p>整体框架是两层循环，外层是考虑从第0天到第days天，内层是考虑每一天所有的兔子年龄+1，以及它们是否繁殖，是否死亡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLivingRabbit</span><span class="params">(<span class="type">int</span> startCount,<span class="type">int</span> days)</span> &#123;</span><br><span class="line">    List&lt;Rabbit&gt; rabbits = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;startCount;i++) &#123;</span><br><span class="line">        rabbits.add(<span class="keyword">new</span> <span class="title class_">Rabbit</span>(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">1</span>; day &lt;= days ;day++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">initialSize</span> <span class="operator">=</span> rabbits.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; initialSize;i++) &#123;</span><br><span class="line">            <span class="type">Rabbit</span> <span class="variable">r</span> <span class="operator">=</span> rabbits.get(i);</span><br><span class="line">            r.age++;</span><br><span class="line">            <span class="keyword">if</span>(r.age &gt;= <span class="number">180</span> &amp;&amp; (r.age - <span class="number">180</span>) % <span class="number">90</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                rabbits.add(<span class="keyword">new</span> <span class="title class_">Rabbit</span>(<span class="number">0</span>));</span><br><span class="line">                rabbits.add(<span class="keyword">new</span> <span class="title class_">Rabbit</span>(<span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(r.age &gt; <span class="number">700</span>) &#123;</span><br><span class="line">                rabbits.remove(i);</span><br><span class="line">                i--;</span><br><span class="line">                initialSize--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rabbits.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="h54">h54</h1><p><strong>任务</strong>：</p><p>判断一个口令是否是一个复杂度合法的口令，复杂度合法的口令有如下要求： 1 长度&gt;=8 2 最少包含一个数字 3 最少包含一个小写英文字母 4 虽少包含一个大写英文字母 5 最少包含一个特殊字符 特殊字符定义为 ~!@#$%^&amp;*()_+</p><p><strong>做法</strong>：</p><p>注意本题不是考察正则表达式，所以考虑用字典的方式，把2,3,4,5这四个条件对应的出现次数存起来，如果出现的次数为0，那么口令不符合要求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidPassword</span><span class="params">(String password)</span>&#123;</span><br><span class="line">    Map&lt;String, Integer&gt; res = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(password.length() &lt; <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.put(<span class="string">&quot;number&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    res.put(<span class="string">&quot;lowerCase&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    res.put(<span class="string">&quot;upperCase&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    res.put(<span class="string">&quot;special&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;~!@#$%^&amp;*()_+&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; password.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> password.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(c &gt; <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            res.put(<span class="string">&quot;number&quot;</span>, res.getOrDefault(<span class="string">&quot;number&quot;</span>, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c &gt; <span class="string">&#x27;a&#x27;</span> &amp;&amp; c &lt; <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">            res.put(<span class="string">&quot;lowerCase&quot;</span>, res.getOrDefault(<span class="string">&quot;lowerCase&quot;</span>, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c &gt; <span class="string">&#x27;A&#x27;</span> &amp;&amp; c &lt; <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">            res.put(<span class="string">&quot;upperCase&quot;</span>, res.getOrDefault(<span class="string">&quot;upperCase&quot;</span>, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag.contains(c + <span class="string">&quot;&quot;</span>)) &#123;<span class="comment">//将字符转为字符串</span></span><br><span class="line">            res.put(<span class="string">&quot;special&quot;</span>, res.getOrDefault(<span class="string">&quot;special&quot;</span>, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isValid</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(Map.Entry&lt;String, Integer&gt; entry : res.entrySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(entry.getValue() == <span class="number">0</span>) &#123;</span><br><span class="line">            isValid = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isValid;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="h55">h55</h1><p><strong>任务</strong>：</p><p>用计算机来证明 为什么说李白是浪漫主义诗人 杜甫是现实主义诗人</p><p>分析不同诗人使用一些汉字时候的特点</p><p>1 分析不同诗人使用一个汉字的时候，将这些汉字组成什么词汇使用在诗句里面</p><p>2 按这些词汇出现的频率高低排序；</p><p>3 只要是两个汉字连起来就视为一个词。</p><p><span class="citation" data-cites="param">@param</span> pathFilename 包含诗歌内容的源文件 <span class="citation" data-cites="param">@param</span> chars 需要统计的字 以半角分号分割</p><p><strong>做法</strong>：</p><p>将读到的字符串拆为一个词一个词的，然后判断是否是汉字，是否包含chars出现的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">analysis</span><span class="params">(String pathFilename,String chars)</span> &#123;</span><br><span class="line">    Map&lt;String, Integer&gt; res = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pathFilename);</span><br><span class="line">    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(f));</span><br><span class="line">        <span class="keyword">while</span>((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;line.length()-<span class="number">1</span>;i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">word</span> <span class="operator">=</span> line.substring(i,i+<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">if</span>(word.matches(<span class="string">&quot;[\\u4e00-\\u9fa5]&#123;2&#125;&quot;</span>) &amp;&amp; (chars.contains(word.substring(<span class="number">0</span>, <span class="number">1</span>)) || chars.contains(word.substring(<span class="number">1</span>, <span class="number">2</span>)))) &#123;<span class="comment">//确保是两个汉字</span></span><br><span class="line">                    res.put(word, res.getOrDefault(word, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(Map.Entry&lt;String, Integer&gt; entry: res.entrySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(maxCount &lt; entry.getValue()) &#123;</span><br><span class="line">            maxCount = entry.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> maxCount;i&gt;<span class="number">0</span>;i--) &#123;</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String, Integer&gt; entry : res.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(entry.getValue() == i) &#123;</span><br><span class="line">                System.out.println(entry.getKey() + <span class="string">&quot; &quot;</span>+ entry.getValue());</span><br><span class="line">                counter++;<span class="comment">//只有打印出来了，计数器才+1</span></span><br><span class="line">                <span class="keyword">if</span>(counter==<span class="number">10</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(counter==<span class="number">10</span>) &#123;<span class="comment">//防止打印出排名并列的从而超过10个</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="h56">h56</h1><p><strong>任务</strong>：</p><p>将homeDir 目录下（包括子目录）所有的文本文件（扩展名为.txt，扩展名不是.txt的文件不要动，扩展名区分大小写) 文件中，orgStr替换为 targetStr 所有文本文件均为UTF-8编码 例如将某个目录中所有文本文件中的 南开大学 替换为 天津大学 <span class="citation" data-cites="param">@param</span> homeDir <span class="citation" data-cites="param">@param</span> orgStr <span class="citation" data-cites="param">@param</span> targetStr</p><p><strong>做法</strong>：</p><p>本题考察了两点，一个是递归的读文件，另外一个是BufferedReader和BufferedWriter的使用</p><p>经典递归读文件的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listFiles</span><span class="params">(File dir)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!dir.exists() || !dir.isDirectory()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String[] files = dir.list();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; files.length ;i++) &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir,files[i]);<span class="comment">//这里要加上根目录</span></span><br><span class="line">        <span class="keyword">if</span>(f.isFile() &amp;&amp; files[i].endsWith(<span class="string">&quot;.txt&quot;</span>)) &#123;</span><br><span class="line">            res.add(f);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            listFiles(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后注意BufferedReader的构造，FileInputStream-&gt;InputStreamReader-&gt;BufferedReader</p><p>BufferedWriter的构造，FileOutputStream-&gt;OutputStreamWriter-&gt;BufferedWriter</p><p>通过增加一个firstLine布尔值来判断是不是第一行，涉及到换行问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">replaceTxtFileContent</span><span class="params">(String homeDir,String orgStr,String targetStr)</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(homeDir);</span><br><span class="line">    listFiles(dir);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;res.size();i++) &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> res.get(i);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f),<span class="string">&quot;UTF-8&quot;</span>));<span class="comment">//加入UTF-8防止乱码</span></span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">contents</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">firstLine</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span>((line = reader.readLine()) != <span class="literal">null</span>) &#123;<span class="comment">//把所有内容都读出来然后替换</span></span><br><span class="line">                <span class="keyword">if</span>(firstLine) &#123;</span><br><span class="line">                    contents.append(line.replace(orgStr, targetStr));</span><br><span class="line">                    firstLine = <span class="literal">false</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    contents.append(System.lineSeparator()).append(line.replace(orgStr, targetStr));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            reader.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            writer.write(contents.toString());<span class="comment">//这里是覆盖写</span></span><br><span class="line">            writer.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="h57">h57</h1><p><strong>任务</strong>：</p><p>统计一个目录下所有文件大小的加和</p><p><strong>做法</strong>：</p><p>还是对经典读文件的考察，注意<code>file.length()</code>是返回文件的大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">sizeSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">recursiveCalcFileSize</span><span class="params">(String homeDir)</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(homeDir);</span><br><span class="line">    listFiles(dir);</span><br><span class="line">    <span class="keyword">return</span> sizeSum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listFiles</span><span class="params">(File dir)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!dir.exists() || !dir.isDirectory()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String[] files = dir.list();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;files.length;i++) &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir, files[i]);</span><br><span class="line">        <span class="keyword">if</span>(f.isFile()) &#123;</span><br><span class="line">            sizeSum += f.length();<span class="comment">//返回文件的大小</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            listFiles(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="h58">h58</h1><p><strong>任务</strong>：</p><p>fileName是一个投票的明细记录，里面逐行存放了 投票的时间（yyyy-MM-dd HH:mm:ss 格式） +投票的微信ID+候选人 存放按时间递增（但是可能出现同一秒出现若干条记录的情况） 现在需要完成投票统计的过程，具体要求如下： 1个微信ID 1分钟内 最多投1票 多余的票数无效 1个微信ID 10分钟内 最多只能投5票 多余的票无效 其中微信ID不固定，候选人姓名不固定 测试的时候要求10万行记录处理时间不超过3秒 <span class="citation" data-cites="param">@param</span> fileName <span class="citation" data-cites="return">@return</span> 返回一个map，其中key是候选人名字，value的票数</p><p><strong>做法</strong>：</p><p>本题较为复杂，主要是去除不合法记录的算法需要理解</p><p>首先创建两个类，一个Record用来记录投票的时间、投票id，投选人，增加一个boolean值判断该记录是否合法；另外一个Voter类用来记录投票id，和每个投票id的Record（List列表）</p><p>注意Record实现Comparator，重写compareTo，比较时间的大小，按时间从小到大进行排序（虽然本题中已经排好）</p><p>Voter只要id相同即可认为相同，所以Voter实现Serializable，重写hashCode和equals方法，每个Voter对象的hashCode值为对应的id的hashCode的值，只要id的值相同则可认为是一个Voter</p><p>接下来是Voter类里面的<strong>去除不合法记录的算法</strong></p><p>为了保证10分钟内不能有同一投票者投票超过5次，所以先构造一个buffer数组，放入5个元素进去，用next变量来记录当前走到records中的位置，定义一个循环，只要next&lt;records.size()，那么先判断这个buffer内是否有不满足1分钟之内只能投一票的要求，注意每次都要更新i值和oneMinLater的值；然后判断buffer内是否有两个记录超过10min，如果有的话，移除第一个元素，添加records中的下一个元素（相当于buffer右移），注意这里还要针对没有添加元素成功的情况正确的更新i的值，<font color = "red">此处和1分钟那里不同的原因在于，1分钟是比较buffer中两两之间的时间间隔，而这里每次都是和buffer第一个元素比较</font>；最后，如果buffer外下一条记录在10min之内，直接设置该记录不合法即可。</p><p>为了保证不陷入死循环，每次判断完上述三个条件后，都需要移除第一个元素，添加下一个元素，即实现buffer的右移</p><p>这里还要进行最后一次判断1min，以为还可能存在最后一条记录不符合规范，如120min，120.5min，而这个120.5min恰好是最后一个记录，由于next == records.size()，所以单独判断一次，这也是最后一次判断。10min的不用判断的原因是已经在上面的循环中判断过了</p><p>最后在VoterRecord.java中先通过写一个readLine函数读取所有的记录，根据所有的记录Records读出所有的id存入到一个Set中，根据Set中的所有元素构造一个List&lt;Voter&gt;。再用一个双重循环，遍历所有Voter，对每个Voter遍历所有Records，如果id相同则把该条记录放入到Voter中。最后遍历Voter，对每个Voter都去除不合法记录，把他的所有投票结果加入到Map&lt;候选人的名字，票数&gt;中</p><p>代码如下</p><p>Record.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h58;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Record</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Date time;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String name;<span class="comment">//候选人的名字</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> isValid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Record</span><span class="params">(String t, String id, String name)</span> &#123;</span><br><span class="line"><span class="type">DateFormat</span> <span class="variable">fmt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-DD HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.time = fmt.parse(t);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.isValid = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Date <span class="title function_">getDate</span><span class="params">()</span> &#123;<span class="comment">//由于getTime是系统的函数，这里改为getDate</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValid</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.isValid = flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">getIsValid</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.isValid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(! (o <span class="keyword">instanceof</span> Record)) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Record</span> <span class="variable">that</span> <span class="operator">=</span> (Record)o;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.time.compareTo(that.time);<span class="comment">//根据时间顺序排名记录</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Voter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h58;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Voter</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;<span class="comment">//不同投票者的区别是id不同</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Record&gt; records = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Voter</span><span class="params">(String id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addRecord</span><span class="params">(Record record)</span> &#123;</span><br><span class="line">records.add(record);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Record&gt; <span class="title function_">getRecords</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.records;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeInvalidRecords</span><span class="params">()</span> &#123;</span><br><span class="line">records.sort(Record:: compareTo);</span><br><span class="line"></span><br><span class="line">List&lt;Record&gt; buffer = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"><span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Math.min(<span class="number">5</span>, records.size());i++) &#123;</span><br><span class="line">buffer.add(records.get(next++));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(next &lt; records.size())&#123;</span><br><span class="line"><span class="type">Date</span> <span class="variable">curTime</span> <span class="operator">=</span> buffer.get(<span class="number">0</span>).getDate();</span><br><span class="line"><span class="type">Date</span> <span class="variable">oneMinLater</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(curTime.getTime()+<span class="number">60000</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">tenMinLater</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(curTime.getTime()+<span class="number">600000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; buffer.size() ;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(buffer.get(i).getDate().compareTo(oneMinLater) &lt; <span class="number">0</span>) &#123;<span class="comment">//在1min之内</span></span><br><span class="line">buffer.get(i).setValid(<span class="literal">false</span>);</span><br><span class="line">buffer.remove(i--);</span><br><span class="line"><span class="keyword">if</span>(next &lt; records.size()) &#123;</span><br><span class="line">buffer.add(records.get(next++));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">oneMinLater = <span class="keyword">new</span> <span class="title class_">Date</span>(buffer.get(i).getDate().getTime()+<span class="number">60000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> ;i &lt;buffer.size();i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(buffer.get(i).getDate().compareTo(tenMinLater) &gt;= <span class="number">0</span>) &#123;<span class="comment">//在10min之后</span></span><br><span class="line">buffer.remove(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(next &lt; records.size()) &#123;</span><br><span class="line">buffer.add(records.get(next++));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(buffer.size() != <span class="number">5</span>) &#123;<span class="comment">//针对没有添加元素成功的情况</span></span><br><span class="line">i = buffer.size()-<span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line">tenMinLater = <span class="keyword">new</span> <span class="title class_">Date</span>(buffer.get(<span class="number">0</span>).getDate().getTime()+<span class="number">600000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(next &lt; records.size()) &#123;</span><br><span class="line"><span class="keyword">if</span>(records.get(next).getDate().compareTo(tenMinLater) &lt; <span class="number">0</span>) &#123;<span class="comment">//如果buffer外下一条记录在10min之内</span></span><br><span class="line">records.get(next++).setValid(<span class="literal">false</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(next &lt; records.size()) &#123;</span><br><span class="line">buffer.remove(<span class="number">0</span>);</span><br><span class="line">buffer.add(records.get(next++));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//再次也是最后一次判断，防止最后一个元素不符合规范</span></span><br><span class="line"><span class="keyword">if</span>(buffer.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="type">Date</span> <span class="variable">curTime</span> <span class="operator">=</span> buffer.get(<span class="number">0</span>).getDate();</span><br><span class="line"><span class="type">Date</span> <span class="variable">oneMinLater</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(curTime.getTime()+<span class="number">60000</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">tenMinLater</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(curTime.getTime()+<span class="number">600000</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; buffer.size() ;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(buffer.get(i).getDate().compareTo(oneMinLater) &lt; <span class="number">0</span>) &#123;<span class="comment">//在1min之内</span></span><br><span class="line">buffer.get(i).setValid(<span class="literal">false</span>);</span><br><span class="line">buffer.remove(i--);</span><br><span class="line">&#125;</span><br><span class="line">oneMinLater = <span class="keyword">new</span> <span class="title class_">Date</span>(buffer.get(i).getDate().getTime()+<span class="number">60000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id.hashCode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> Voter)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Voter</span> <span class="variable">that</span> <span class="operator">=</span> (Voter) o;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.id.equals(that.id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>VoterRecord.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h58;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VoteRecord</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * fileName是一个投票的明细记录，里面逐行存放了 投票的时间（yyyy-MM-dd HH:mm:ss 格式） +\t+投票的微信ID+\t+候选人</span></span><br><span class="line"><span class="comment"> * 存放按时间递增（但是可能出现同一秒出现若干条记录的情况）</span></span><br><span class="line"><span class="comment"> * 现在需要完成投票统计的过程，具体要求如下：</span></span><br><span class="line"><span class="comment"> * 1个微信ID 1分钟内 最多投1票 多余的票数无效</span></span><br><span class="line"><span class="comment"> * 1个微信ID 10分钟内 最多只能投5票 多余的票无效</span></span><br><span class="line"><span class="comment"> * 其中微信ID不固定，候选人姓名不固定</span></span><br><span class="line"><span class="comment"> * 测试的时候要求10万行记录处理时间不超过3秒 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回一个map，其中key是候选人名字，value的票数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Voter&gt; voters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Map&lt;String,Integer&gt; <span class="title function_">calcRecording</span><span class="params">(String fileName)</span>&#123;</span><br><span class="line">Map&lt;String, Integer&gt; res = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">List&lt;Record&gt; allRecords = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Set&lt;String&gt; voterIds = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">allRecords = readLines(fileName);</span><br><span class="line"><span class="keyword">for</span>(Record rec : allRecords) &#123;</span><br><span class="line">voterIds.add(rec.getId());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(String voterId : voterIds) &#123;</span><br><span class="line"><span class="type">Voter</span> <span class="variable">vo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Voter</span>(voterId);</span><br><span class="line">voters.add(vo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(Voter v : voters) &#123;</span><br><span class="line"><span class="keyword">for</span>(Record rec : allRecords) &#123;</span><br><span class="line"><span class="keyword">if</span>(rec.getId().equals(v.getId())) &#123;</span><br><span class="line">v.addRecord(rec);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(Voter v : voters) &#123;</span><br><span class="line">v.removeInvalidRecords();</span><br><span class="line"><span class="keyword">for</span>(Record r : v.getRecords()) &#123;</span><br><span class="line"><span class="keyword">if</span>(r.getIsValid()) &#123;</span><br><span class="line">res.put(r.getName(), res.getOrDefault(r.getName(), <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Record&gt; <span class="title function_">readLines</span><span class="params">(String path)</span> &#123;</span><br><span class="line"><span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">List&lt;Record&gt; res1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(f));</span><br><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">String[] elements = line.split(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> elements[<span class="number">0</span>];</span><br><span class="line"><span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> elements[<span class="number">1</span>];</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> elements[<span class="number">2</span>];</span><br><span class="line"><span class="type">Record</span> <span class="variable">record</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Record</span>(time,id,name);</span><br><span class="line">res1.add(record);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试Tips：可以先自己构造一个小的测试用例进行测试</p><h1 id="h59">h59</h1><p><strong>任务</strong>：</p><p>本文件中存放了若干的化学反应方程式（总数量不会超过1000个） 某个文本本文件中存放了一系列的化学反应 #表示注释 化学反应以 = 分为了左侧和右侧；不同化合物之间至少有 一个空格 A + B = C + D 意味着体系中如果有了 A B 就可以生成C D，同样如果有C D 也可以生成 A B 所有反应 反应物前系数均为 1 根据一个体系中初始化合物 ，最后可能都存在什么化合物</p><p><strong>做法</strong>：</p><p>本题关键是要构造一个双映射关系，即可以通过反应物得知生成物，也可以通过生成物得到反应物</p><p>由于一个物质存在只能存在一种，所以用Set来记录反应物和生成物</p><p>然后根据已有的初始物质，遍历每一条反应，得到所有的物质</p><p>注意<code>containsAll()</code>和<code>addAll()</code>的用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reaction</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; reactant = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; product = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Reaction</span><span class="params">(Set&lt;String&gt; reactant, Set&lt;String&gt; product)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.reactant = reactant;</span><br><span class="line"><span class="built_in">this</span>.product = product;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">getReactant</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> reactant;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">getProduct</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> product;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">findAllComponents</span><span class="params">(String reactionFile,Set&lt;String&gt; initComponents)</span>&#123;</span><br><span class="line">    Set&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(initComponents);<span class="comment">//初始化直接根据initComponents构建result</span></span><br><span class="line"></span><br><span class="line">    List&lt;Reaction&gt; reactions = readLines(reactionFile);</span><br><span class="line">    <span class="type">int</span> <span class="variable">addCount</span> <span class="operator">=</span> initComponents.size();</span><br><span class="line">    <span class="keyword">while</span>(addCount != <span class="number">0</span>) &#123;</span><br><span class="line">        addCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Reaction rea : reactions) &#123;</span><br><span class="line">            <span class="keyword">if</span>(result.containsAll(rea.getReactant()) &amp;&amp; result.addAll(rea.getProduct())) &#123;</span><br><span class="line">                addCount++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(result.containsAll(rea.getProduct()) &amp;&amp; result.addAll((rea.getReactant())))&#123;</span><br><span class="line">                addCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Reaction&gt; <span class="title function_">readLines</span><span class="params">(String reactionFile)</span>&#123;</span><br><span class="line">    List&lt;Reaction&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(reactionFile);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(f));</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span>((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(line.startsWith(<span class="string">&quot;#&quot;</span>) || line.trim().length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String[] reaction = line.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">left</span> <span class="operator">=</span> reaction[<span class="number">0</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">right</span> <span class="operator">=</span> reaction[<span class="number">1</span>];</span><br><span class="line">            String[] lefts = left.split(<span class="string">&quot;\\ \\+\\ &quot;</span>);<span class="comment">//这里是正则表达式，如果只有一个反应物则返回值不变（不分割）</span></span><br><span class="line">            Set&lt;String&gt; leftSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(String ele : lefts) &#123;</span><br><span class="line">                leftSet.add(ele.trim());</span><br><span class="line">            &#125;</span><br><span class="line">            String[] rights = right.split(<span class="string">&quot;\\ \\+\\ &quot;</span>);</span><br><span class="line">            Set&lt;String&gt; rightSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(String ele : rights) &#123;</span><br><span class="line">                rightSet.add(ele.trim());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Reaction</span> <span class="variable">rea</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reaction</span>(leftSet,rightSet);</span><br><span class="line">            res.add(rea);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="h60">h60</h1><p><strong>任务</strong>：</p><p>在ChatServer,ChatClient中增加适当代码，并增加适当的类，完成一个简单的聊天室 user.txt中存放了所有用户的用户名和口令 用</p><p><strong>做法</strong>：</p><p>首先要搞清楚服务器和客户端两者的代码模版，参考ch10.MyserverSocketV3.java、ch10.MyClientSocketV3.java和ch10.ServerThread.java</p><p>我的做法和上面的模板略有不同，我是在ChatServer里面写了一个内部类ClientHandler，实现Runnerable接口，然后再startListen中每次都用ClientHandler作为构造函数的参数新建线程并启动，注意这个方法每次调用startListen时，都要用lambda函数来启动一个新的线程（具体见代码）</p><p>所以，整体的框架是<font color = "red">ChatServer类中有一个内部类ClientHandler，在ChatServer中构建一个集合来存储所有的ClientHandler（便于读写操作和广播操作），ChatServer中实现功能的主要部分，包括登录用户名和口令的验证等等。ChatClient可以看做是一个专门用来接收in.readLine()和发送out.write()的工具</font></p><p>然后是实现思路的问题：</p><blockquote><p>1.如何实现客户端的登录和退出以及读写操作？</p></blockquote><p>我的方法是每当客户端要完成一个动作时都会先写指令给服务器，服务器得到指令后进行相应的判断和操作，最后返回给客户端相应的内容</p><blockquote><p>2.如何实现只有登录以后才可以读到,否则返回null</p></blockquote><p>这个可以在服务器中，具体来讲是ClientHandler定义一个boolean值loggedIn来判断是否登录成功，如果没有则不能进行相应的读写操作</p><blockquote><p>3.如何得到聊天室里面所有的发言（包括自己的）</p></blockquote><p><font color = "red">在ChatServer中构建一个消息列表，为每个ClientHandler分配一个消息索引指针</font>，注意这个列表是同步的并且要加锁。每当客户端发消息时，都把消息存储到这个列表中；当客户端读消息的时候，根据自己的消息索引指针来读取相应的内容。</p><p>我的做法还有相应的扩展，即新增了一个broadcastMessage方法用来广播系统消息（如“xxx has joined the chat”），区分系统消息和对话消息可以在消息前面加“SYSTEM”或“MESSAGE”</p><p>ChatServer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h60;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatServer</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化 ， 根据情况适当抛出异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> port</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> passwordFilename 所有用户的用户名 口令</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line"><span class="keyword">private</span> String passwordFilename;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String,String&gt; userDetails;</span><br><span class="line"><span class="keyword">private</span> Set&lt;ClientHandler&gt; clientHandlers;<span class="comment">//保存所有登录的用户</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; messageList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ChatServer</span> <span class="params">(<span class="type">int</span> port, String passwordFilename)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="built_in">this</span>.port = port;</span><br><span class="line"><span class="built_in">this</span>.passwordFilename = passwordFilename;</span><br><span class="line">userDetails = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">clientHandlers = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">messageList = Collections.synchronizedList(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">loadUsersDetails();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadUsersDetails</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(passwordFilename);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(f));</span><br><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">String[] detail = line.split(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(detail.length == <span class="number">2</span>) &#123;</span><br><span class="line">userDetails.put(detail[<span class="number">0</span>], detail[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  根据情况适当抛出异常</span></span><br><span class="line"><span class="comment"> * 开始监听</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startListen</span><span class="params">( )</span> &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line"><span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">server = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port);</span><br><span class="line">System.out.println(<span class="string">&quot;chat server listen on port:&quot;</span> + port + <span class="string">&quot; ok!&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(flag) &#123;</span><br><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line"><span class="type">ClientHandler</span> <span class="variable">clientHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientHandler</span>(socket);</span><br><span class="line">clientHandlers.add(clientHandler);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(clientHandler).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ClientHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Socket clientSocket;</span><br><span class="line">        <span class="keyword">private</span> PrintWriter out;</span><br><span class="line">        <span class="keyword">private</span> BufferedReader in;</span><br><span class="line">        <span class="keyword">private</span> String userName;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> loggedIn;<span class="comment">//判断是否已经登录</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> messageIndex;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ClientHandler</span><span class="params">(Socket clientSocket)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.clientSocket = clientSocket;</span><br><span class="line">            loggedIn = <span class="literal">false</span>;</span><br><span class="line">            messageIndex = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                out = <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(clientSocket.getOutputStream(), <span class="literal">true</span>);</span><br><span class="line">                in = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(clientSocket.getInputStream()));</span><br><span class="line"></span><br><span class="line">                String inputLine;</span><br><span class="line">                <span class="keyword">while</span> ((inputLine = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    String[] parts = inputLine.split(<span class="string">&quot; &quot;</span>, <span class="number">2</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> parts[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (command.equals(<span class="string">&quot;LOGIN&quot;</span>)) &#123;</span><br><span class="line">                        String[] credentials = parts[<span class="number">1</span>].split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (credentials.length == <span class="number">2</span> &amp;&amp; authenticate(credentials[<span class="number">0</span>], credentials[<span class="number">1</span>])) &#123;</span><br><span class="line">                            userName = credentials[<span class="number">0</span>];</span><br><span class="line">                            loggedIn = <span class="literal">true</span>;</span><br><span class="line">                            out.println(<span class="string">&quot;LOGIN SUCCESS&quot;</span>);</span><br><span class="line">                            broadcastMessage(<span class="string">&quot;SYSTEM &quot;</span>+ userName + <span class="string">&quot; has joined the chat&quot;</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            out.println(<span class="string">&quot;LOGIN FAILURE&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">&quot;LOGOUT&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (userName != <span class="literal">null</span>) &#123;</span><br><span class="line">                            broadcastMessage(<span class="string">&quot;SYSTEM &quot;</span>+ userName + <span class="string">&quot; has left the chat&quot;</span>);</span><br><span class="line">                            clientHandlers.remove(<span class="built_in">this</span>);</span><br><span class="line">                            loggedIn = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">&quot;SPEAK&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(loggedIn) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (userName != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;MESSAGE &quot;</span>+ parts[<span class="number">1</span>];<span class="comment">//这里不用写是谁说的（根据Test要求）</span></span><br><span class="line">                                <span class="keyword">synchronized</span>(messageList) &#123;</span><br><span class="line">                                messageList.add(message);</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="comment">//broadcastMessage(message);//如果还广播的话，就会出现四个MESSAGE信息</span></span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    out.println(<span class="string">&quot;You need to login first!&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                        </span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">&quot;READ&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(loggedIn) &#123;</span><br><span class="line">                        String message;</span><br><span class="line">                        <span class="keyword">synchronized</span>(messageList) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(messageIndex &lt; messageList.size()) &#123;</span><br><span class="line">                        out.println(messageList.get(messageIndex));</span><br><span class="line">                        messageIndex++;</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        out.println(<span class="string">&quot;READ null&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    out.println(<span class="string">&quot;You need to login first!&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (clientSocket != <span class="literal">null</span>) &#123;</span><br><span class="line">                        clientSocket.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">authenticate</span><span class="params">(String userName, String password)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> password.equals(userDetails.get(userName));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">broadcastMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (ClientHandler handler : clientHandlers) &#123;</span><br><span class="line">            <span class="keyword">if</span>(handler.loggedIn) &#123;</span><br><span class="line">            handler.out.println(message);</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ChatClient.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h60;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatClient</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String ip;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line"><span class="keyword">private</span> Socket socket;</span><br><span class="line"><span class="keyword">private</span> PrintWriter out;</span><br><span class="line"><span class="keyword">private</span> BufferedReader in;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据情况适当抛出异常 </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> ip</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> port</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ChatClient</span> <span class="params">(String ip, <span class="type">int</span> port)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.ip = ip;</span><br><span class="line"><span class="built_in">this</span>.port = port;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录,成功返回true，否则返回false，根据情况适当抛出异常 </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">login</span><span class="params">(String userName,String password)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(ip, port);</span><br><span class="line">out = <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(socket.getOutputStream(), <span class="literal">true</span>);</span><br><span class="line">in = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line"></span><br><span class="line">out.println(<span class="string">&quot;LOGIN &quot;</span>+userName + <span class="string">&quot; &quot;</span>+password);</span><br><span class="line"><span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> in.readLine();</span><br><span class="line"><span class="keyword">return</span> response.equals(<span class="string">&quot;LOGIN SUCCESS&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 退出，根据情况适当抛出异常 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(socket != <span class="literal">null</span> &amp;&amp; out != <span class="literal">null</span>) &#123;</span><br><span class="line">out.println(<span class="string">&quot;LOGOUT&quot;</span>);</span><br><span class="line">closeConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发言, 只有登录以后才能发言， 根据情况适当抛出异常 </span></span><br><span class="line"><span class="comment"> * 如果没有登录 抛出异常</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">(String str)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span>(out != <span class="literal">null</span>) &#123;</span><br><span class="line"> out.println(<span class="string">&quot;SPEAK &quot;</span>+ str);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取聊天室目前的发言，根据情况适当抛出异常 </span></span><br><span class="line"><span class="comment"> * 只有登录以后才可以读到,否则返回null</span></span><br><span class="line"><span class="comment"> * 得到聊天室里面所有的发言（包括自己的），如果此时没有发言则立刻返回null，否则每次调用read的时候按队的方式返回一个句话</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(out != <span class="literal">null</span>) &#123;</span><br><span class="line">out.println(<span class="string">&quot;READ&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">String response;</span><br><span class="line">                <span class="keyword">while</span> ((response = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (response.startsWith(<span class="string">&quot;MESSAGE &quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> response.substring(<span class="number">8</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (response.startsWith(<span class="string">&quot;READ null&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(response.equals(<span class="string">&quot;You need to login first!&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 如果是系统消息，继续读取</span></span><br><span class="line">                &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line"><span class="comment">//e.printStackTrace();</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">closeConnection</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(socket != <span class="literal">null</span>) &#123;</span><br><span class="line">socket.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(out != <span class="literal">null</span>) &#123;</span><br><span class="line">out.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(in != <span class="literal">null</span>) &#123;</span><br><span class="line">in.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java程序设计-lab2</title>
      <link href="/2024/04/16/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-lab2/"/>
      <url>/2024/04/16/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-lab2/</url>
      
        <content type="html"><![CDATA[<h1 id="一实验目的">一、实验目的</h1><p>熟悉Eclipse；</p><p>熟悉Java中Set/Map/List File的使用；</p><h1 id="二实验内容">二、实验内容</h1><p>字符串content是一个超市的历次购物小票的合计，每次购物的明细之间用分号分割，每个商品之间用半角逗号分开。请开发程序完成如下功能：</p><ol type="1"><li><p>找出哪两个商品总被同时购买的频率最高(不考虑商品的先后顺序)；</p></li><li><p>找出哪N个商品(N=2)总被同时购买的频率最高。（选做）</p></li></ol><h1 id="三代码实现">三、代码实现</h1><p>思路分析：首先每次购物明细之间是用分号分隔的，所以先定义allPairMap（Map类型），将每次购物明细划分出来；然后针对每次的购物明细，定义uniqueProducts（Set类型）选取其中所有的商品（不重复），然后定义一个双重循环，将所有可能的Pair都从uniqueProducts选取出来，按照两个词的字典顺序排列，然后加入到allPairMap，最后通过entrySet遍历allPairMap类选取其中出现频率最高的pair</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getFrequentItem</span><span class="params">(String content)</span>  &#123;</span><br><span class="line">    String[] sessions = content.split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">    Map&lt;String, Integer&gt; allPairMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(String session: sessions) &#123;</span><br><span class="line">        String[] products = session.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        Set&lt;String&gt; uniqueProducts = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String product : products) &#123;</span><br><span class="line">            uniqueProducts.add(product.trim());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(String first : uniqueProducts) &#123;</span><br><span class="line">            <span class="keyword">for</span>(String second : uniqueProducts) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!first.equals(second)) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">pair</span> <span class="operator">=</span> first.compareTo(second) &lt; <span class="number">0</span> ? first + <span class="string">&quot;,&quot;</span> + second : second + <span class="string">&quot;,&quot;</span> + first;</span><br><span class="line">                    allPairMap.put(pair,allPairMap.getOrDefault(pair, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">maxFrequentPair</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxFrequentCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(Map.Entry&lt;String, Integer&gt; entry: allPairMap.entrySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(maxFrequentCount &lt; entry.getValue()) &#123;</span><br><span class="line">            maxFrequentCount = entry.getValue();</span><br><span class="line">            maxFrequentPair = entry.getKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxFrequentPair;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color= "red">注意其中的compareTo函数是自带的，按照字典顺序排列</font></p><p><font color= "red">getOrDefault函数可以获取当前key的value，如果没有这个key，则返回0（默认值）</font></p><h1 id="四实验结果">四、实验结果</h1><figure><img src="image-20240416203230441.png" alt="image-20240416203230441" /><figcaption aria-hidden="true">image-20240416203230441</figcaption></figure><h1 id="五实验总结">五、实验总结</h1><p>本次实验是对Map和Set的总和考察，其中一些小小的细节能够提升代码的可读性和精准性，如CompareTo的使用、getOrDefault函数的使用等等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java程序设计-lab1</title>
      <link href="/2024/04/16/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-lab1/"/>
      <url>/2024/04/16/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-lab1/</url>
      
        <content type="html"><![CDATA[<h1 id="一实验目的">一、实验目的</h1><ol type="1"><li><p>理解面向对象的概念；</p></li><li><p>理解继承、封装、多态的实现；</p></li><li><p>练习使用DEBUG工具调试程序；</p></li></ol><h1 id="二实验内容">二、实验内容</h1><ol type="1"><li>某一款游戏，其主要角色如下:</li></ol><p>（1） HeavyTank 重型坦克 初始生命值200，攻击力 20</p><p>（2） Medium Tank 轻型坦克 初始生命值100，攻击力 10</p><p>（3）War Factroy 兵工厂 初始生命值100，无攻击力</p><p>（4） Barrack 兵营，可以训练出步枪兵、 RPG兵、军犬,初始生命值100，无攻击力</p><p>（5） Rifle soldier 步枪兵 初始生命值50(对战 军犬除外)，攻击力 5（对战军犬可以一次击毙军犬)</p><p>（6） Rocket soldier 火箭兵 初始生命值50(对战 军犬除外)，攻击力 10</p><p>（7） Dog 军犬 ,初始生命值50，攻击力5(对战人类时候一口毙命)</p><ol start="2" type="1"><li><p>此外还要能通过Solider.getLivingSoilderCount/getDeadedSoilderCount 统计现在有多少个活着的和死去的士兵数量</p><p>任何对象有getHealth() 方法，返回当前生命值，如果已经死亡则返回 &lt;=0的一个数字 任何对象有isDestroyed() 方法，如果生命值&lt;=0则true,否则false</p></li><li><p>攻击，两个对象之间相互攻击，削减每个对象的健康值。</p></li><li><p>请遵循以上游戏规则，设计并实现游戏代码，使其能够通过测试用例</p></li></ol><h1 id="三程序实现">三、程序实现</h1><p>观察测试程序中有EnumObjectType，我们首先定义EnumObjectType类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumObjectType</span>&#123;</span><br><span class="line">rifleSoldier,RPGSoldier,dog,mediumTank,heavyTank;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察主要角色的叙述，可以发现每一个对象都有初始生命值和攻击力两个属性</p><p>攻击方面如果攻击士兵导致死亡，通过setDeadedSoilderCount来增加死去的士兵数量；如果攻击的是tank或者Dog，那么只削减生命值</p><p>通过以上信息，我们可以定义出Game基类和Soilder类</p><p>Game基类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> PH;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> attackValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Game</span><span class="params">(<span class="type">int</span> PH, <span class="type">int</span> av)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.PH = PH;</span><br><span class="line"><span class="built_in">this</span>.attackValue = av;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">(Soldier soldier)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(soldier.PH &gt;<span class="number">0</span>) &#123;</span><br><span class="line">soldier.PH -= <span class="built_in">this</span>.attackValue;</span><br><span class="line"><span class="keyword">if</span>(soldier.PH &lt;=<span class="number">0</span>) &#123;</span><br><span class="line">soldier.setDeadedSoldierCount();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">(Tank tank)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(tank.PH &gt;<span class="number">0</span>) &#123;</span><br><span class="line">tank.PH -= <span class="built_in">this</span>.attackValue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">(Dog dog)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(dog.PH &gt; <span class="number">0</span>) &#123;</span><br><span class="line">dog.PH -= <span class="built_in">this</span>.attackValue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHealth</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.PH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDestroyed</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.PH &lt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了以上的Game基类，每次构造对象时都可以继承这个基类。</p><p>例如：WarFactory是专门造Tank的，通过building方法，在方法内部判断具体是造mediumTank还是HeavyTank</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WarFactory</span> <span class="keyword">extends</span> <span class="title class_">Game</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">WarFactory</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(<span class="number">100</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Tank <span class="title function_">building</span><span class="params">(EnumObjectType obj)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(obj == EnumObjectType.mediumTank) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MediumTank</span>();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (obj == EnumObjectType.heavyTank) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HeavyTank</span>();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了方便building方法返回值的书写，我们构造一个Tank作为父类，让mediumTank和heavyTank作为其子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tank</span> <span class="keyword">extends</span> <span class="title class_">Game</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Tank</span><span class="params">(<span class="type">int</span> PH, <span class="type">int</span> av)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(PH, av);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MediumTank</span> <span class="keyword">extends</span> <span class="title class_">Tank</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MediumTank</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(<span class="number">100</span>,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeavyTank</span> <span class="keyword">extends</span> <span class="title class_">Tank</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HeavyTank</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(<span class="number">200</span>,<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了兵工厂WarFactory，还有兵营Barrack，和兵工厂-&gt;tank的思路是一样的，Barrack继承Game基类，有traing方法可以产生Soldier，这个soilder正好是RifleSoldier和RPGSoldier的父类，除了士兵还可以产生Dog，具体的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Barrack</span> <span class="keyword">extends</span> <span class="title class_">Game</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Barrack</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(<span class="number">100</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Game <span class="title function_">traing</span><span class="params">(EnumObjectType trained)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(trained == EnumObjectType.rifleSoldier) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RifleSoldier</span>();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(trained == EnumObjectType.RPGSoldier) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RPGSoldier</span>();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(trained == EnumObjectType.dog) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Soldier类中，要定义活着的士兵和死去的士兵字段，并且要有对应的getter和setter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Soldier</span> <span class="keyword">extends</span> <span class="title class_">Game</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> livingSoldierCount;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> deadSoldierCount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Soldier</span><span class="params">(<span class="type">int</span> PH, <span class="type">int</span> av)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(PH,av);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getLivingSoldierCount</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> livingSoldierCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setLivingSoldierCount</span><span class="params">()</span> &#123;</span><br><span class="line">livingSoldierCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getDeadedSoldierCount</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> deadSoldierCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setDeadedSoldierCount</span><span class="params">()</span> &#123;</span><br><span class="line">deadSoldierCount++;</span><br><span class="line">livingSoldierCount--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RifleSoldier</span> <span class="keyword">extends</span> <span class="title class_">Soldier</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RifleSoldier</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(<span class="number">50</span>,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">super</span>.setLivingSoldierCount();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">(Dog dog)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(dog.PH &gt; <span class="number">0</span>) &#123;</span><br><span class="line">dog.PH = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RPGSoldier</span> <span class="keyword">extends</span> <span class="title class_">Soldier</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RPGSoldier</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(<span class="number">50</span>,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">super</span>.setLivingSoldierCount();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Game</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(<span class="number">50</span>,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">(Soldier soldier)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(soldier.PH &gt; <span class="number">0</span>) &#123;</span><br><span class="line">soldier.PH = <span class="number">0</span>;</span><br><span class="line">soldier.setDeadedSoldierCount();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四测试结果">四、测试结果</h1><figure><img src="image-20240416201546718.png" alt="测试结果" /><figcaption aria-hidden="true">测试结果</figcaption></figure><h1 id="五实验总结">五、实验总结</h1><p>本次实验较为基础，主要是对面向对象代码设计的基本考察，但还是要注意一些细节，如定义枚举类、梳理好每个对象之间的关系等等</p>]]></content>
      
      
      
        <tags>
            
            <tag> java实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数电lab1</title>
      <link href="/2024/04/12/%E6%95%B0%E7%94%B5lab1/"/>
      <url>/2024/04/12/%E6%95%B0%E7%94%B5lab1/</url>
      
        <content type="html"><![CDATA[<p>数电实验实验报告</p><h1 id="实验一-多数表决器的设计与实现">实验一 多数表决器的设计与实现</h1><h2 id="一实验目的">一、实验目的</h2><ol type="1"><li><p>掌握基于 Vivado 的数字逻辑电路设计流程；</p></li><li><p>熟练使用 SystemVerilog HDL 的行为建模方法对组合逻辑电路进行描述；</p></li><li><p>熟练使用 SystemVerilog HDL 的结构建模方法对组合逻辑电路进行描述；</p></li><li><p>掌握基于远程 FPGA 硬件云平台对数字逻辑电路进行功能验证的流程。</p></li></ol><h2 id="二实验环境">二、实验环境</h2><ol type="1"><li><p>操作系统：Windows 10 或 Ubuntu 16.04</p></li><li><p>开发环境：Xilinx Vivado 2018.2</p></li><li><p>硬件平台：远程 FPGA 硬件云平台</p></li></ol><h2 id="三-实验原理">三、 实验原理</h2><p><strong>1. 3-8 译码器 — — 74LS138</strong></p><p><img src="./image-20240413173607981.png" alt="image-20240413173607981" style="zoom: 67%;" /></p><p><strong>2. 2-4 译码器 — — 74LS139</strong></p><p><img src="./image-20240413173627842.png" alt="image-20240413173627842" style="zoom:67%;" /></p><p>具体的真值表就不做说明了</p><h2 id="四实验内容和步骤">四、实验内容和步骤</h2><h3 id="内容1基于集成电路模块"><strong>内容1：（基于集成电路模块）</strong></h3><ol type="1"><li>根据表 1-1 和 1-2，采用 SystemVerilog HDL 的行为建模方法，完成 74LS138</li></ol><p>和 74LS139 两种译码器的设计。</p><ol start="2" type="1"><li>根据图 1-3 和表 1-4，基于 SystemVerilog HDL 的结构化建模方法，调用</li></ol><p>74LS138 和 74LS139 两种译码器，以及若干基本逻辑门，完成 5 输入多数表</p><p>决器电路的设计（类似搭积木），并基于 Vivado 完成行为仿真、综合、实现、</p><p>生成比特流文件等操作，最终在远程 FPGA 硬件云平台上完成功能验证。</p><h3 id="步骤1基于集成电路模块"><strong>步骤1：（基于集成电路模块）</strong></h3><p>①首先添加源文件“dec_74LS138.sv”，通过行为建模的方法，设计一个3:8译码器，具体代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">module dec_74LS138(</span><br><span class="line">    input logic G,G2a,G2b,</span><br><span class="line">    input logic [2:0] D,</span><br><span class="line">    output logic [7:0] Y</span><br><span class="line">    );</span><br><span class="line">    always_comb begin</span><br><span class="line">        if(G==0)  Y=8&#x27;b11111111;</span><br><span class="line">        else if(G2a==1)  Y=8&#x27;b11111111;</span><br><span class="line">        else if(G2b==1)  Y=8&#x27;b11111111;</span><br><span class="line">        else begin</span><br><span class="line">            case(D)</span><br><span class="line">            3&#x27;b000: Y=8&#x27;b11111110;</span><br><span class="line">            3&#x27;b001: Y=8&#x27;b11111101;</span><br><span class="line">            3&#x27;b010: Y=8&#x27;b11111011;</span><br><span class="line">            3&#x27;b011: Y=8&#x27;b11110111;</span><br><span class="line">            3&#x27;b100: Y=8&#x27;b11101111;</span><br><span class="line">            3&#x27;b101: Y=8&#x27;b11011111;</span><br><span class="line">            3&#x27;b110: Y=8&#x27;b10111111;</span><br><span class="line">            3&#x27;b111: Y=8&#x27;b01111111;</span><br><span class="line">            endcase</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><p>②然后添加源文件“dec_74LS139.sv”，通过行为建模的方法，设计一个2:4译码器，具体代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">module dec_74LS139(</span><br><span class="line">    input logic S,</span><br><span class="line">    input logic [1:0] D,</span><br><span class="line">    output logic [3:0] Y</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    always_comb begin</span><br><span class="line">        if(S == 0) begin</span><br><span class="line">            case(D)</span><br><span class="line">                2&#x27;b00: Y = 4&#x27;b1110;</span><br><span class="line">                2&#x27;b01: Y = 4&#x27;b1101;</span><br><span class="line">                2&#x27;b10: Y = 4&#x27;b1011;</span><br><span class="line">                2&#x27;b11: Y = 4&#x27;b0111;</span><br><span class="line">                default: Y = 4&#x27;b1111;</span><br><span class="line">            endcase</span><br><span class="line">        end else begin</span><br><span class="line">            Y = 4&#x27;b1111;</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><p>③下面通过结构化建模的方法实现五人多数表决器</p><p><strong>方法一</strong>：</p><p>需要：</p><p>一个2:4译码器和四个3:8译码器</p><p>思路分析：</p><p>首先把五个人分为A、B、C、D、E，考虑D和E（分四种情况）</p><p>第一种情况：D和E都同意，A、B和C中至少有一人同意灯就亮，即排除A、B和C三个人都不同意的情况(即图中Y8正常，Y5、Y6、Y7均为8'b11111111)</p><p>第二种情况：D同意E不同意，A、B和C中至少有两人同意等才亮（假设Y7正常，其余全为8'b11111111)</p><p>第三种情况：E同意D不同意，A、B和C中至少有两人同意等才亮（假设Y6正常，其余全为8'b11111111)</p><p>第四种情况：E和D的不同意，A、B和C必须都同意</p><p>下面是电路图</p><p><img src="./多数表决器电路图.jpg" alt="多数表决器电路图" style="zoom: 50%;" /></p><p>相应的代码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">module voter5(</span><br><span class="line">    input logic [4:0] I,</span><br><span class="line">    output logic pass</span><br><span class="line">    );</span><br><span class="line">    logic G = 1&#x27;b1;</span><br><span class="line">    logic G1 = 1&#x27;b0;</span><br><span class="line">    logic [3:0] TEMP;</span><br><span class="line">    logic [7:0] Y5;</span><br><span class="line">    logic [7:0] Y6;</span><br><span class="line">    logic [7:0] Y7;</span><br><span class="line">    logic [7:0] Y8;</span><br><span class="line"></span><br><span class="line">    dec_74LS139 T4(.S(1&#x27;b0),.D(I[4:3]),.Y(TEMP));</span><br><span class="line">    dec_74LS138 T5(.G(G),.G2a(G1),.G2b(TEMP[0]),.D(I[2:0]),.Y(Y5));</span><br><span class="line">    dec_74LS138 T6(.G(G),.G2a(G1),.G2b(TEMP[1]),.D(I[2:0]),.Y(Y6));</span><br><span class="line">    dec_74LS138 T7(.G(G),.G2a(G1),.G2b(TEMP[2]),.D(I[2:0]),.Y(Y7));</span><br><span class="line">    dec_74LS138 T8(.G(G),.G2a(G1),.G2b(TEMP[3]),.D(I[2:0]),.Y(Y8));</span><br><span class="line">    </span><br><span class="line">    assign pass = ~(Y5[7]&amp;Y6[3]&amp;Y6[5]&amp;Y6[6]&amp;Y6[7]&amp;Y7[3]&amp;Y7[5]&amp;Y7[6]&amp;Y7[7]&amp;Y8[1]&amp;Y8[2]&amp;Y8[3]&amp;Y8[4]&amp;Y8[5]&amp;Y8[6]&amp;Y8[7]);</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><p><strong>方法二</strong>：<a id = "anchor-name"><font color = "red">附加题</font></a></p><p>需要：</p><p>3个3:8译码器</p><p>思路分析：</p><p>首先把五个人分为A、B、C、D、E，考虑D和E（分三种情况）</p><p>第一种情况：D和E都同意，A、B和C中至少有一人同意灯就亮，即排除A、B和C三个人都不同意的情况</p><p>第二种情况：判断D是否同意，如果同意，则再至少有两人同意即可；否则至少需要3人同意灯才能亮</p><p>第三种情况：判断E是否同意，如果同意，则再至少有两人同意即可；否则至少需要3人同意灯才能亮</p><p>第二三种情况可以通过观察A、B和C的输入情况判断相应的输出情况，如A、B和C的输入情况有000,001,010,011,100,101,110,111，其中000,001,010,100这些情况最多只有1人不满足条件（输出为1），所以只需要将这些情况取与，如果全为1，则代表不满足这些情况，自然就满足了至少两人的条件</p><p>而3人同意，即A、B和C都同意的情况下，输出的第七位为0</p><p>根据上面的分析，我们可以画出相应的电路图（不完整版）</p><p><img src="./多路表决器电路图——附加题.jpg" alt="多路表决器电路图——附加题" style="zoom: 50%;" /></p><p>相应的代码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">module voter5(</span><br><span class="line">    input logic [4:0] I,</span><br><span class="line">    output logic pass</span><br><span class="line">    );</span><br><span class="line">    logic G = 1&#x27;b1;</span><br><span class="line">    logic G1 = 1&#x27;b0;</span><br><span class="line">    logic G2 = 1&#x27;b0;</span><br><span class="line">    logic [7:0] Y5;</span><br><span class="line">    logic [7:0] Y6;</span><br><span class="line">    logic [7:0] Y7;</span><br><span class="line">    logic A1,A2,A3;</span><br><span class="line">    dec_74LS138 T5(.G(G),.G2a(G1),.G2b(I[3]),.D(I[2:0]),.Y(Y5));</span><br><span class="line">    dec_74LS138 T6(.G(G),.G2a(I[4]),.G2b(G2),.D(I[2:0]),.Y(Y6));</span><br><span class="line">    dec_74LS138 T7(.G(G),.G2a(G1),.G2b(G2),.D(I[2:0]),.Y(Y7));</span><br><span class="line">    assign A1 = (!((~Y5)|(~Y6)))&amp; (Y7[0]);</span><br><span class="line">    assign A2 = Y5 == 8&#x27;b11111111 ? (Y7[0] &amp; Y7[1] &amp; Y7[2] &amp; Y7[4]) : (!Y7[7]);</span><br><span class="line">    assign A3 = Y6 == 8&#x27;b11111111 ? (Y7[0] &amp; Y7[1] &amp; Y7[2] &amp; Y7[4]) : (!Y7[7]);</span><br><span class="line">    assign pass = A1 | A2 |A3;</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><p>④编写测试程序</p><p>添加测试文件"voter5_tb.sv"，编写相关代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">`timescale 1ns/1ns</span><br><span class="line">module  voter5_tb();</span><br><span class="line"> logic [4:0] I;</span><br><span class="line"> logic  pass;</span><br><span class="line"> integer i;</span><br><span class="line"> voter5 DUT(.I(I),.pass(pass));</span><br><span class="line"> initial begin</span><br><span class="line">   for(i=0;i&lt;32;i=i+1) begin</span><br><span class="line">    I=i;</span><br><span class="line">    #20;   </span><br><span class="line">    end</span><br><span class="line"> end</span><br><span class="line"> initial begin</span><br><span class="line"> $timeformat(-9,0,&quot;ns&quot;,5);</span><br><span class="line"> $monitor(&quot;At time %t: I=%b,pass=%b&quot;,$time,I,pass);</span><br><span class="line"> end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><p>仿真结果:</p><div><img src="./image-20240418213106251.png" alt="image-20240418213106251" style="zoom:68%;" /><img src="./image-20240418213118749.png" alt="image-20240418213118749" style="zoom:71%;" /><img src="./image-20240418213318678.png" alt="image-20240418213318678" style="zoom:63%;" /></div><p>⑤编辑约束文件</p><p>根据"远程硬件平台管脚对应关系.xlsx"，选择对应的管脚，约束文件（voter_xdc.sv）如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set_property -dict &#123;PACKAGE_PIN B9  IOSTANDARD LVCMOS33&#125; [get_ports &#123;I[0]&#125;];</span><br><span class="line">set_property -dict &#123;PACKAGE_PIN D11  IOSTANDARD LVCMOS33&#125; [get_ports &#123;I[1]&#125;];</span><br><span class="line">set_property -dict &#123;PACKAGE_PIN B11  IOSTANDARD LVCMOS33&#125; [get_ports &#123;I[2]&#125;];</span><br><span class="line">set_property -dict &#123;PACKAGE_PIN B12  IOSTANDARD LVCMOS33&#125; [get_ports &#123;I[3]&#125;];</span><br><span class="line">set_property -dict &#123;PACKAGE_PIN A10  IOSTANDARD LVCMOS33&#125; [get_ports &#123;I[4]&#125;];</span><br><span class="line"></span><br><span class="line">set_property -dict &#123;PACKAGE_PIN K13  IOSTANDARD LVCMOS33&#125; [get_ports &#123;pass&#125;];</span><br></pre></td></tr></table></figure><p>确认无误后，再分别综合、实现、生成bin文件。</p><p>⑥远程云端硬件实验平台验证</p><p>自定义管脚：</p><p>输入管脚分别为I[0]、I[1]、I[2]、I[3]、I[4]，位宽均为1BIT，连接的管脚分别为0、1、2、3、4</p><p>输出管脚为pass，位宽为1BIT，连接的管脚为4</p><p>具体如图：</p><figure><img src="./image-20240413181132483.png" alt="image-20240413181132483" /><figcaption aria-hidden="true">image-20240413181132483</figcaption></figure><p>FPGA烧写上传bin文件，然后运行实验，以下是示例</p><div><img src="./image-20240413181329167.png" alt="image-20240413181329167" style="zoom:50%;" /><img src="./image-20240413181342965.png" alt="image-20240413181342965" style="zoom:50%;" /><img src="./image-20240413181400790.png" alt="image-20240413181400790" style="zoom:50%;" /><img src="./image-20240413181507357.png" alt="image-20240413181507357" style="zoom:50%;" /></div><h3 id="内容-2基于行为建模"><strong>内容 2：（基于行为建模）</strong></h3><ol type="1"><li>不使用 74LS138 和 74LS139 芯片，直接使用行为建模的方法完成 5 输入多数表决器电路的设计，并基于 Vivado 完成电路的行为仿真、综合、实现、生成比特流文件等操作，最终在远程 FPGA 硬件云平台上完成功能验证。</li></ol><h3 id="步骤-2基于行为建模"><strong>步骤 2：（基于行为建模）</strong></h3><p>①思路分析：</p><p>可以把输入的值每一位都相加，如果这个sum大于半数，则通过；否则没有通过。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//voter5.sv</span><br><span class="line">module voter5(</span><br><span class="line">    input logic [(2*count):0] I,</span><br><span class="line">    output logic pass</span><br><span class="line">    );</span><br><span class="line">    parameter count = 2;</span><br><span class="line">    logic [7:0] mysum;</span><br><span class="line">    integer i;</span><br><span class="line"></span><br><span class="line">    always_comb begin</span><br><span class="line">        mysum = 0;</span><br><span class="line">        for (i = 0; i &lt;= 2 * count; i = i + 1) begin</span><br><span class="line">            mysum = mysum + I[i];</span><br><span class="line">        end</span><br><span class="line">        pass = (mysum &gt; count) ? 1&#x27;b1 : 1&#x27;b0;</span><br><span class="line">    end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><p>②测试程序</p><p>和内容1中的测试程序一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">`timescale 1ns/1ns</span><br><span class="line">module  voter5_tb();</span><br><span class="line"> logic [4:0] I;</span><br><span class="line"> logic  pass;</span><br><span class="line"> integer i;</span><br><span class="line"> voter5 DUT(.I(I),.pass(pass));</span><br><span class="line"> initial begin</span><br><span class="line">   for(i=0;i&lt;32;i=i+1) begin</span><br><span class="line">    I=i;</span><br><span class="line">    #20;   </span><br><span class="line">    end</span><br><span class="line"> end</span><br><span class="line"> initial begin</span><br><span class="line"> $timeformat(-9,0,&quot;ns&quot;,5);</span><br><span class="line"> $monitor(&quot;At time %t: I=%b,pass=%b&quot;,$time,I,pass);</span><br><span class="line"> end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><p>结果如下：</p><div><img src="./image-20240418213106251.png" alt="image-20240418213106251" style="zoom:68%;" /><img src="./image-20240418213118749.png" alt="image-20240418213118749" style="zoom:71%;" /><img src="./image-20240418213318678.png" alt="image-20240418213318678" style="zoom:63%;" /></div><p>③编辑约束文件，综合、实现并生成bin文件</p><p>④远程平台验证</p><p>结果如下：</p><div><img src="./image-20240413181329167.png" alt="image-20240413181329167" style="zoom:50%;" /><img src="./image-20240413181342965.png" alt="image-20240413181342965" style="zoom:50%;" /><img src="./image-20240413181400790.png" alt="image-20240413181400790" style="zoom:50%;" /><img src="./image-20240413181507357.png" alt="image-20240413181507357" style="zoom:50%;" /></div><h2 id="五实验总结">五、实验总结</h2><p><font color = "red">注意附加题已在上面的<a href="#anchor-name">步骤1：（基于集成电路模块）</a>中给出</font></p><p>本次实验对于我而言，在结构化建模构造五人表决器时还是有一定难度的，通过查阅相关资料，目前已经学会了两种方法来构造；</p><p>对于行为建模而言较为简单，也是基础题型。</p><p>另外，由于第一次使用vivado和远程硬件平台，相关操作不太熟练，耗费了大量的时间，希望以后能够多加练习。</p><p>注意，以下代码是错误的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">module dec_74LS139(</span><br><span class="line">    input logic S,</span><br><span class="line">    input logic [1:0] D,</span><br><span class="line">    output logic [3:0] Y</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    assign Y = 4&#x27;b1111;</span><br><span class="line">    </span><br><span class="line">    always_comb begin</span><br><span class="line">        if(S == 0) begin</span><br><span class="line">            case(D)</span><br><span class="line">                2&#x27;b00: Y[0] = 0;</span><br><span class="line">                2&#x27;b01: Y[1] = 0;</span><br><span class="line">                2&#x27;b10: Y[2] = 0;</span><br><span class="line">                2&#x27;b11: Y[3] = 0;</span><br><span class="line">            endcase</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><p><font color = "red">具体原因是不能现在always_comb外部定义Y，然后内部进行赋值；同时if..else语句不完整，case没有default</font></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数电 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openGauss_lab1</title>
      <link href="/2024/04/10/openGauss-lab1/"/>
      <url>/2024/04/10/openGauss-lab1/</url>
      
        <content type="html"><![CDATA[<h1 id="实验介绍"><strong>1.1 实验介绍</strong></h1><p>openGauss 是华为开源发布的多模态数据库管理系统，具有多种优越的特性。openGauss 数据库在内核架构上具有多方面的创新与改进。在本实验中，我们将进行 openGauss 数据库的初探。首先介绍 openGauss 的特性与架构，学习如何准备 openGauss 数据库的安装环境，掌握 openGauss 数据库服务器的启动控制操作，学习 gsql 客户端连接数据库的基本命令用法。本实验是本系列 openGauss 数据库“实验之旅”的开端。</p><p>作为关系数据库，openGauss 的主要功能是进行关系数据的管理，包括数据定义、数据 查询、数据更新等基本数据管理操作。数据定义是进行数据管理的第一步工作，其要创建数据库和定义所有数据表，作为装载具体数据的框架结构；数据查询是要在数据库中查找满足各种条件要求的数据，是数据库最重要的功能之一，需要通过大量实验操作和练习才能掌握编写查询的技巧；同时，数据更新是要实现数据添加、修改和删除操作。在本章中，我们将在 openGauss 中使用关系数据库语言 SQL 创建数据库和数据表，完成基本查询、连接查询、子查询和集合查询等各类数据查询，进行数据更新和数据表结构的修改。本章内容是对openGauss 的基本数据管理功能进行实践。</p><h1 id="实验目的"><strong>1.2 实验目的</strong></h1><ol type="1"><li><p>了解 openGauss 数据库的特性。</p></li><li><p>了解 openGauss 数据库的架构。</p></li><li><p>掌握 openGauss 数据库极简版的安装方法。</p></li><li><p>掌握 openGauss 数据库服务器的控制方法。</p></li><li><p>掌握 openGauss 数据库客户端 gsql 连接数据库。</p></li><li><p>掌握 openGauss 数据库客户端 Data Studio 连接数据库。</p></li><li><p>掌握在 openGauss 中使用 SQL 创建数据库和数据表。</p></li><li><p>掌握在 openGauss 中使用 SQL 进行基本查询。</p></li><li><p>掌握在 openGauss 中使用 SQL 进行连接查询。</p></li><li><p>掌握在 openGauss 中使用 SQL 进行子查询。</p></li><li><p>掌握在 openGauss 中使用 SQL 进行集合查询。</p></li><li><p>掌握在 openGauss 中使用 SQL 进行数据更新，包括添加、修改、删除数据。</p></li><li><p>掌握在 openGauss 中使用 SQL 修改表结构。</p></li></ol><h1 id="实验步骤和结果"><strong>1.3实验步骤和结果</strong></h1><h2 id="第一章-opengauss初探">第一章 openGauss初探</h2><p>安装完openGauss数据库后，使用 ps 查看 gaussdb 进程。</p><figure><img src="./image-20240423000331898.png" alt="image-20240423000331898" /><figcaption aria-hidden="true">image-20240423000331898</figcaption></figure><p>使用 gs_ctl 查看 openGauss 数据库服务器进行状态。服务器正常运行，显示如下：</p><figure><img src="./image-20240423000535817.png" alt="image-20240423000535817" /><figcaption aria-hidden="true">image-20240423000535817</figcaption></figure><p>通过 gsql 测试数据库服务器执行 gsql 命令，并执行 SQL 语句查询数据库版本信息，最终退出：</p><figure><img src="./image-20240423001655179.png" alt="image-20240423001655179" /><figcaption aria-hidden="true">image-20240423001655179</figcaption></figure><p>使用testuser连接到数据库testdb</p><figure><img src="./image-20240423002236138.png" alt="image-20240423002236138" /><figcaption aria-hidden="true">image-20240423002236138</figcaption></figure><p>创建表并插入数据，最终的查询结果如下</p><figure><img src="wps1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h2 id="第二章-基本sql语句">第二章 基本SQL语句</h2><h3 id="一创建数据库和数据表">一、创建数据库和数据表</h3><figure><img src="wps2.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>然后使用bsc连接数据库</p><p>接下来根据文档创建course、sc、student三个表，表的具体结构如下</p><p>Course表</p><figure><img src="wps3.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>Sc表</p><figure><img src="wps4.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>Student表</p><figure><img src="wps5.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>最后，根据文档插入数据</p><h3 id="二查询数据基本查询">二、查询数据——基本查询</h3><h4 id="选择表中的列">1.选择表中的列</h4><p>（1）查询指定列</p><p>【查询 1】查询全体学生的姓名与性别。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname,sgender <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><figure><img src="wps6.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>【查询 2】查询全体学生的姓名、学号和所在系。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname,sno,sdept <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><figure><img src="wps7.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>（2）查询全部列</p><p>【查询 3】查询全体学生的所有信息。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><figure><img src="wps8.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><ol start="3" type="1"><li>对查询列进行计算</li></ol><p>【查询 4】查询全体学生的姓名和年龄。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname <span class="keyword">AS</span> 姓名, AGE(<span class="built_in">CURRENT_DATE</span>, sbirth) <span class="keyword">AS</span> 年龄 <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><figure><img src="wps9.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>这里使用了openGauss的内置函数AGE，用于计算年龄</p><ol start="4" type="1"><li>消除重复行</li></ol><p>【查询 5】查询选修了课程的学生的学号。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sno <span class="keyword">FROM</span> sc;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410112907046.png" alt="image-20240410112907046" /><figcaption aria-hidden="true">image-20240410112907046</figcaption></figure><h4 id="选择表中的行">2.选择表中的行</h4><p>（1）比较大小</p><p>【查询 6】查询计算机科学系（CS）全体学生的名单。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sdept = <span class="string">&#x27;CS&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410113100282.png" alt="image-20240410113100282" /><figcaption aria-hidden="true">image-20240410113100282</figcaption></figure><p>【查询 7】查询有不及格课程成绩的学生学号。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sno <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> score &lt; <span class="number">60</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410113240326.png" alt="image-20240410113240326" /><figcaption aria-hidden="true">image-20240410113240326</figcaption></figure><ol start="2" type="1"><li>确定范围</li></ol><p>【查询 8】查询 2 号课程成绩在 80 到 89 之间的学生学号。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> cno=<span class="number">2</span> <span class="keyword">AND</span> score <span class="keyword">BETWEEN</span> <span class="number">80</span> <span class="keyword">AND</span> <span class="number">89</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410113436222.png" alt="image-20240410113436222" /><figcaption aria-hidden="true">image-20240410113436222</figcaption></figure><p><strong>注意在BETWEEN···AND···中的范围包括上下限</strong></p><p>【查询 9】查询 2 号课程成绩不在 80 到 89 之间的学生学号。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> cno=<span class="number">2</span> <span class="keyword">AND</span> score <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">80</span> <span class="keyword">AND</span> <span class="number">89</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410113725502.png" alt="image-20240410113725502" /><figcaption aria-hidden="true">image-20240410113725502</figcaption></figure><ol start="3" type="1"><li>确定集合</li></ol><p>【查询 10】查询计算机科学系（CS）和计算机工程系（CE）的学生姓名和性别。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname,sgender <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sdept <span class="keyword">IN</span> (<span class="string">&#x27;CS&#x27;</span>, <span class="string">&#x27;CE&#x27;</span>);</span><br></pre></td></tr></table></figure><figure><img src="image-20240410114027036.png" alt="image-20240410114027036" /><figcaption aria-hidden="true">image-20240410114027036</figcaption></figure><p>【查询 11】查询不是计算机科学系（CS）和计算机工程系（CE）的学生姓名、性别和所在系。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname,sgender <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sdept <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;CS&#x27;</span>, <span class="string">&#x27;CE&#x27;</span>);</span><br></pre></td></tr></table></figure><figure><img src="image-20240410114141121.png" alt="image-20240410114141121" /><figcaption aria-hidden="true">image-20240410114141121</figcaption></figure><ol start="4" type="1"><li>字符匹配</li></ol><p>【查询 12】查询所有姓张的学生的学号、姓名和性别。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno,sname,sgender <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sname <span class="keyword">LIKE</span> <span class="string">&#x27;张%&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410114512669.png" alt="image-20240410114512669" /><figcaption aria-hidden="true">image-20240410114512669</figcaption></figure><p>【查询 13】查询所有姓张的且姓名为两个字的学生的学号、姓名和性别。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno,sname,sgender <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sname <span class="keyword">LIKE</span> <span class="string">&#x27;张_&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410114553497.png" alt="image-20240410114553497" /><figcaption aria-hidden="true">image-20240410114553497</figcaption></figure><p>【查询 14】查询所有不姓张的学生的学号、姓名和性别。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno,sname,sgender <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sname <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;张%&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410114757224.png" alt="image-20240410114757224" /><figcaption aria-hidden="true">image-20240410114757224</figcaption></figure><p>【查询 15】查询课程名为 DB_Course 的课程的课号和学分。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cno,ccredit <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> cname <span class="keyword">LIKE</span> <span class="string">&#x27;DB\_Course&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410115025436.png" alt="image-20240410115025436" /><figcaption aria-hidden="true">image-20240410115025436</figcaption></figure><p><font color = "red">【查询 16】查询课程名以 DB_开头且倒数第 2 个字符为 s 的课程的课号和学分。</font></p><p><strong>使用 ESCAPE 关键字指定某字符为转义符。</strong></p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cno,ccredit <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> cname <span class="keyword">LIKE</span> <span class="string">&#x27;DB^_%_&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;^&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410115347724.png" alt="image-20240410115347724" /><figcaption aria-hidden="true">image-20240410115347724</figcaption></figure><p>【查询 17】查询所在系的名称以 C 开头的学生的学号、姓名和系名。</p><p>使用正则表达式进行匹配，下面是openGauss支持的匹配运算符</p><figure><img src="image-20240410115625159.png" alt="image-20240410115625159" /><figcaption aria-hidden="true">image-20240410115625159</figcaption></figure><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno,sname,sdept <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sdept ~ <span class="string">&#x27;^C.*&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410115737991.png" alt="image-20240410115737991" /><figcaption aria-hidden="true">image-20240410115737991</figcaption></figure><ol start="5" type="1"><li>判断空值</li></ol><p>【查询 18】查询成绩为空的学生的学号和所选课程的课号。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno,cno <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> score <span class="keyword">IS</span> <span class="keyword">NULL</span>;<span class="comment">--注意这里不是score==NULL</span></span><br></pre></td></tr></table></figure><figure><img src="image-20240410115849157.png" alt="image-20240410115849157" /><figcaption aria-hidden="true">image-20240410115849157</figcaption></figure><p>【查询 19】查询成绩不为空的学生的学号和所选课程的课号。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno,cno <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> score <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410120032984.png" alt="image-20240410120032984" /><figcaption aria-hidden="true">image-20240410120032984</figcaption></figure><ol start="6" type="1"><li>逻辑运算</li></ol><p>【查询 20】查询计算机科学系（CS）的男生信息。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sdept = <span class="string">&#x27;CS&#x27;</span> <span class="keyword">AND</span> sgender = <span class="string">&#x27;男&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410120214496.png" alt="image-20240410120214496" /><figcaption aria-hidden="true">image-20240410120214496</figcaption></figure><p>【查询 21】查询计算机科学系（CS）、计算机工程系（CE）和信息科学系（IS）的学生姓名和性别。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname,sgender <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sdept = <span class="string">&#x27;CS&#x27;</span> <span class="keyword">OR</span> sdept = <span class="string">&#x27;CE&#x27;</span> <span class="keyword">OR</span> sdept = <span class="string">&#x27;IS&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410120447436.png" alt="image-20240410120447436" /><figcaption aria-hidden="true">image-20240410120447436</figcaption></figure><h4 id="排序">3.排序</h4><p>【查询 22】查询选修了 2 号课程的学生学号及其成绩，按分数降序排列。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno,score <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> cno = <span class="number">2</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410120912025.png" alt="image-20240410120912025" /><figcaption aria-hidden="true">image-20240410120912025</figcaption></figure><p><font color = "red">【查询 23】查询全体学生的信息，查询结果按照所在系的名称升序排列，同一个系的学生按照姓名的降序排列。</font></p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> sdept <span class="keyword">ASC</span>, sname <span class="keyword">COLLATE</span> &quot;zh_CN.utf8&quot; <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410121212649.png" alt="image-20240410121212649" /><figcaption aria-hidden="true">image-20240410121212649</figcaption></figure><p><strong>注意，要使用 COLLATE "zh_CN.utf8"指明按照中文 UTF-8 字符集进行排序，才能保证按照中文拼音排序。</strong></p><h4 id="聚合函数">4.聚合函数</h4><p>常见SQL聚合函数如下：</p><figure><img src="image-20240410121411676.png" alt="image-20240410121411676" /><figcaption aria-hidden="true">image-20240410121411676</figcaption></figure><p>【查询 24】查询学生的总人数。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> COUNT(*) <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410122136081.png" alt="image-20240410122136081" /><figcaption aria-hidden="true">image-20240410122136081</figcaption></figure><p>【查询 25】查询选修了课程的学生人数。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> COUNT(<span class="keyword">DISTINCT</span> sno) <span class="keyword">FROM</span> sc;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410122430937.png" alt="image-20240410122430937" /><figcaption aria-hidden="true">image-20240410122430937</figcaption></figure><p>【查询 26】计算 3 号课程的平均成绩。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ROUND(AVG(score),<span class="number">2</span>) <span class="keyword">AS</span> avg <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> cno = <span class="string">&#x27;3&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410122555407.png" alt="image-20240410122555407" /><figcaption aria-hidden="true">image-20240410122555407</figcaption></figure><p>其中ROUND函数是进行舍入，和python中的round类似</p><p>【查询 27】计算 3 号课程的最高分数。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> MAX(score) <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> cno = <span class="string">&#x27;3&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410122721235.png" alt="image-20240410122721235" /><figcaption aria-hidden="true">image-20240410122721235</figcaption></figure><p>【查询 28】计算学生 22001 所选课程的总成绩。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SUM(score) <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> sno = <span class="string">&#x27;22001&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410122846028.png" alt="image-20240410122846028" /><figcaption aria-hidden="true">image-20240410122846028</figcaption></figure><p>【查询 29】求各个课程号及相应的选课人数。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cno, COUNT(sno) <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> cno;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410123235776.png" alt="image-20240410123235776" /><figcaption aria-hidden="true">image-20240410123235776</figcaption></figure><p>【查询 30】查询至少选修了 3 门课程的学生学号。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> sno <span class="keyword">HAVING</span> COUNT(*) &gt;= <span class="number">3</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410123441048.png" alt="image-20240410123441048" /><figcaption aria-hidden="true">image-20240410123441048</figcaption></figure><h3 id="三查询数据连接查询">三、查询数据——连接查询</h3><h4 id="内连接">1.内连接</h4><p>（1）等值连接</p><p>【查询 31】查询每个学生及其选课情况。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">INNER</span> <span class="keyword">JOIN</span> sc <span class="keyword">ON</span> student.sno = sc.sno;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410131007207.png" alt="image-20240410131007207" /><figcaption aria-hidden="true">image-20240410131007207</figcaption></figure><p>【查询 32】使用自然连接查询每个学生及其选课情况。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student.sno, sname, sgender, sbirth, sdept, cno, score <span class="keyword">FROM</span> student <span class="keyword">INNER</span> <span class="keyword">JOIN</span> sc <span class="keyword">ON</span> student.sno = sc.sno;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410131230455.png" alt="image-20240410131230455" /><figcaption aria-hidden="true">image-20240410131230455</figcaption></figure><p>注意这里的自然连接只是通过指定列的名称来实现，并不是NATURAL JOIN</p><p>（2）交叉连接</p><p>【查询 33】对 student 表和 sc 表进行交叉连接操作。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> sc;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410131547749.png" alt="image-20240410131547749" /><figcaption aria-hidden="true">image-20240410131547749</figcaption></figure><h4 id="外连接">2.外连接</h4><p>（1）左外连接</p><p>【查询 34】查询每个学生及其选修课程的情况，没有选课的学生也要列出。</p><p>首先将null值设置显示为NULL</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\pset <span class="keyword">null</span> <span class="string">&#x27;NULL&#x27;</span></span><br></pre></td></tr></table></figure><p>然后查询</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">LEFT OUTER JOIN</span> sc <span class="keyword">ON</span> student.sno = sc.sno;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410132103224.png" alt="image-20240410132103224" /><figcaption aria-hidden="true">image-20240410132103224</figcaption></figure><p>(2)右外连接</p><p>【查询 35】查询选课情况及相应每门课程信息，没有被选的课程也要列出。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> sc <span class="keyword">RIGHT OUTER JOIN</span> course <span class="keyword">ON</span> sc.cno = course.cno;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410132320926.png" alt="image-20240410132320926" /><figcaption aria-hidden="true">image-20240410132320926</figcaption></figure><p>(3)完全外连接</p><p><code>数据准备</code></p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> department</span><br><span class="line">(</span><br><span class="line">id <span class="type">CHAR</span>(<span class="number">2</span>),</span><br><span class="line"><span class="type">name</span> <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="string">&#x27;CS&#x27;</span>, <span class="string">&#x27;计算机科学&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="string">&#x27;CE&#x27;</span>, <span class="string">&#x27;计算机工程&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="string">&#x27;IS&#x27;</span>, <span class="string">&#x27;信息科学&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="string">&#x27;SE&#x27;</span>, <span class="string">&#x27;软件工程&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student <span class="keyword">VALUES</span> (<span class="string">&#x27;22005&#x27;</span>, <span class="string">&#x27;孙七&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;2001-11-01&#x27;</span>, <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure><p>【查询 36】查询每个系及其中学生的情况，要求同时列出尚无学生的系和尚未分配系的学生。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> department <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> student <span class="keyword">ON</span> department.id = student.sdept;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410132720641.png" alt="image-20240410132720641" /><figcaption aria-hidden="true">image-20240410132720641</figcaption></figure><h4 id="自连接">3.自连接</h4><p><code>数据准备</code></p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student_p</span><br><span class="line">(</span><br><span class="line">sno <span class="type">CHAR</span>(<span class="number">5</span>),</span><br><span class="line">sname <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">sgender <span class="type">CHAR</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">sbirth <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">sdept <span class="type">CHAR</span>(<span class="number">2</span>),</span><br><span class="line">province <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> pk_student_p <span class="keyword">PRIMARY KEY</span>(sno)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student_p <span class="keyword">VALUES</span> (<span class="string">&#x27;22001&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;2002-05-19&#x27;</span>, <span class="string">&#x27;CS&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student_p <span class="keyword">VALUES</span> (<span class="string">&#x27;22002&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;2002-01-09&#x27;</span>, <span class="string">&#x27;CS&#x27;</span>, <span class="string">&#x27;天津&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student_p <span class="keyword">VALUES</span> (<span class="string">&#x27;22003&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;2001-12-08&#x27;</span>, <span class="string">&#x27;CE&#x27;</span>, <span class="string">&#x27;河北&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student_p <span class="keyword">VALUES</span> (<span class="string">&#x27;22004&#x27;</span>, <span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;2001-08-30&#x27;</span>, <span class="string">&#x27;IS&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>);</span><br></pre></td></tr></table></figure><p><font color="red">【查询 37】列出来自相同省份的学生学号、姓名和省份。</font></p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s1.sno, s1.sname, s2.sno, s2.sname, s1.province </span><br><span class="line"><span class="keyword">FROM</span> student_p s1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> student_p s2 <span class="keyword">ON</span> s1.province = s2.province </span><br><span class="line"><span class="keyword">WHERE</span> s1.sno &lt; s2.sno </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> s1.sno, s2.sno;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410133608141.png" alt="image-20240410133608141" /><figcaption aria-hidden="true">image-20240410133608141</figcaption></figure><p>注意自连接大多是通过给一个表起两个别名来实现的，WHERE语句s1.sno &lt; s2.sno如果改成s1.sno &lt;&gt; s2.sno，会出现两行相同的数据（只是左右颠倒）。</p><h4 id="多表连接">4.多表连接。</h4><p>【查询 38】查询每个学生的学号、姓名、选修的课程名及成绩。</p><p>学生的学号和姓名在 student 表中，课程名在 course 表中，成绩在 sc 表中。本查询涉及 3 张表，应使用多表连接完成。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.sno,s.sname,c.cname,sc.score <span class="keyword">FROM</span> student s <span class="keyword">INNER</span> <span class="keyword">JOIN</span> sc <span class="keyword">ON</span> s.sno = sc.sno <span class="keyword">INNER</span> <span class="keyword">JOIN</span> course c <span class="keyword">ON</span> sc.cno = c.cno;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410134020934.png" alt="image-20240410134020934" /><figcaption aria-hidden="true">image-20240410134020934</figcaption></figure><h3 id="四查询数据子查询">四、查询数据——子查询</h3><h4 id="in谓词子查询">1.IN谓词子查询</h4><p>【查询 39】查询与“李四”在同一个系学习的学生。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno,sname,sdept <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sdept <span class="keyword">IN</span> (<span class="keyword">SELECT</span> sdept <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sname = <span class="string">&#x27;李四&#x27;</span>);</span><br></pre></td></tr></table></figure><figure><img src="image-20240410134440063.png" alt="image-20240410134440063" /><figcaption aria-hidden="true">image-20240410134440063</figcaption></figure><p>【查询 40】查询选修了“数据库系统”课程的学生学号和姓名。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno,sname <span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="keyword">IN</span> </span><br><span class="line">(<span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> cno <span class="keyword">IN</span> </span><br><span class="line">     (<span class="keyword">SELECT</span> cno <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> cname = <span class="string">&#x27;数据库系统&#x27;</span>)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><figure><img src="image-20240410134739803.png" alt="image-20240410134739803" /><figcaption aria-hidden="true">image-20240410134739803</figcaption></figure><h4 id="比较运算符子查询">2.比较运算符子查询</h4><p>【查询 41】找出每个学生超过他选修课程平均成绩的课程号。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno,cno <span class="keyword">FROM</span> sc x </span><br><span class="line"><span class="keyword">WHERE</span> score &gt; (<span class="keyword">SELECT</span> AVG(score) <span class="keyword">FROM</span> sc y <span class="keyword">WHERE</span> x.sno = y.sno);</span><br></pre></td></tr></table></figure><figure><img src="image-20240410135122920.png" alt="image-20240410135122920" /><figcaption aria-hidden="true">image-20240410135122920</figcaption></figure><p>注意这里是<strong>相关子查询</strong>，即每次子查询的结果都依赖父查询</p><h4 id="any和all谓词子查询">3.ANY和ALL谓词子查询</h4><p>【查询 42】查询其他系中比 IS 系某一学生出生日期晚的学生姓名、出生日期和所在系。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname,sbirth,sdept <span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> sbirth &gt; <span class="keyword">ANY</span> (<span class="keyword">SELECT</span> sbirth <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sdept = <span class="string">&#x27;IS&#x27;</span>) <span class="keyword">AND</span> sdept &lt;&gt; <span class="string">&#x27;IS&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410135459810.png" alt="image-20240410135459810" /><figcaption aria-hidden="true">image-20240410135459810</figcaption></figure><p>【查询 43】查询其他系中比 IS 系所有学生出生日期都晚的学生姓名、出生日期和所在系。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname,sbirth,sdept <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sbirth &gt; <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> sbirth <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sdept = <span class="string">&#x27;IS&#x27;</span>) <span class="keyword">AND</span> sdept &lt;&gt; <span class="string">&#x27;IS&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410135648772.png" alt="image-20240410135648772" /><figcaption aria-hidden="true">image-20240410135648772</figcaption></figure><p>注意等价关系<code>&gt; ANY 是 &gt; 最小值, &gt; ALL 是 &gt; 最大值</code>，所以可以进行相应的转换</p><h4 id="exists-谓词子查询">4.EXISTS 谓词子查询</h4><p>【查询 44】查询所有选修了 2 号课程的学生姓名。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname <span class="keyword">FROM</span> student s <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> s.sno = sc.sno <span class="keyword">AND</span> cno = <span class="number">2</span>);</span><br></pre></td></tr></table></figure><figure><img src="image-20240410140141648.png" alt="image-20240410140141648" /><figcaption aria-hidden="true">image-20240410140141648</figcaption></figure><p>注意这里也是<strong>相关子查询</strong></p><p>【查询 45】查询没有选修 2 号课程的学生姓名。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname <span class="keyword">FROM</span> student s <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> s.sno = sc.sno <span class="keyword">AND</span> cno = <span class="number">2</span>);</span><br></pre></td></tr></table></figure><figure><img src="image-20240410140240944.png" alt="image-20240410140240944" /><figcaption aria-hidden="true">image-20240410140240944</figcaption></figure><p><font color="red">【查询 46】查询选修了全部课程的学生的学号和姓名。</font></p><p><code>数据准备</code></p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span> (<span class="string">&#x27;22001&#x27;</span>, <span class="number">4</span>, <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.sno,s.sname <span class="keyword">FROM</span> student s </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>( <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> course c <span class="comment">--没有一门课程</span></span><br><span class="line">                 <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> sc <span class="comment">--是该学生不选的</span></span><br><span class="line">                                   <span class="keyword">WHERE</span> s.sno = sc.sno <span class="keyword">AND</span> c.cno = sc.cno)</span><br><span class="line">                );</span><br></pre></td></tr></table></figure><figure><img src="image-20240410141028858.png" alt="image-20240410141028858" /><figcaption aria-hidden="true">image-20240410141028858</figcaption></figure><p>分析：<strong>选课</strong>即代表<strong>student表和sc表中的sno相对应 并且 course表和sc表中的cno相对应</strong></p><h3 id="五查询数据集合查询">五、查询数据——集合查询</h3><p>【查询 47】查询 CS 系的学生及所有男学生。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sdept = <span class="string">&#x27;CS&#x27;</span> </span><br><span class="line"><span class="keyword">UNION</span> </span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sgender = <span class="string">&#x27;男&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410141452211.png" alt="image-20240410141452211" /><figcaption aria-hidden="true">image-20240410141452211</figcaption></figure><p>【查询 48】查询 CS 系的男学生。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sdept = <span class="string">&#x27;CS&#x27;</span> </span><br><span class="line"><span class="keyword">INTERSECT</span> </span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sgender = <span class="string">&#x27;男&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410141626553.png" alt="image-20240410141626553" /><figcaption aria-hidden="true">image-20240410141626553</figcaption></figure><p>【查询 49】查询不在 CS 系的女学生。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sgender = <span class="string">&#x27;女&#x27;</span> </span><br><span class="line"><span class="keyword">EXCEPT</span> </span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sdept = <span class="string">&#x27;CS&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410141826323.png" alt="image-20240410141826323" /><figcaption aria-hidden="true">image-20240410141826323</figcaption></figure><h3 id="六更新数据">六、更新数据</h3><h4 id="插入数据">1.插入数据</h4><p>【查询 50】将一条新学生记录</p><p>（学号：22005，姓名：孙七，性别：男，出生日期：2001-11-01， 系别：CE）插入到 student 表中。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;22005&#x27;</span>, <span class="string">&#x27;孙七&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;2001-11-01&#x27;</span>, <span class="string">&#x27;CE&#x27;</span>);</span><br></pre></td></tr></table></figure><figure><img src="image-20240410142153922.png" alt="image-20240410142153922" /><figcaption aria-hidden="true">image-20240410142153922</figcaption></figure><p>【查询 51】插入一条选课记录('22005', 4)。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc (sno,cno) <span class="keyword">VALUES</span> (<span class="string">&#x27;22005&#x27;</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><figure><img src="image-20240410142306134.png" alt="image-20240410142306134" /><figcaption aria-hidden="true">image-20240410142306134</figcaption></figure><p><font color = "red">【查询 52】将 CS 系学生的学号和姓名存放到一张单独的表中。</font></p><p><code>数据准备</code></p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student_cs</span><br><span class="line">(</span><br><span class="line"> sno <span class="type">CHAR</span>(<span class="number">5</span>),</span><br><span class="line"> sname <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>查询操作</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student_cs(sno, sname) </span><br><span class="line"><span class="keyword">SELECT</span> sno, sname <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sdept = <span class="string">&#x27;CS&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410142559582.png" alt="image-20240410142559582" /><figcaption aria-hidden="true">image-20240410142559582</figcaption></figure><h4 id="修改数据">2.修改数据</h4><p>【查询 53】将学生 22005 的系别改为 IS。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> sdept = <span class="string">&#x27;IS&#x27;</span> <span class="keyword">WHERE</span> sno = <span class="string">&#x27;22005&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410142711964.png" alt="image-20240410142711964" /><figcaption aria-hidden="true">image-20240410142711964</figcaption></figure><p>【查询 54】将所有学生所选课程成绩增加 2 分。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> sc <span class="keyword">SET</span> score = score + <span class="number">2</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410142759875.png" alt="image-20240410142759875" /><figcaption aria-hidden="true">image-20240410142759875</figcaption></figure><p>【查询 55】将 CS 系全体学生的成绩设置为零。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> sc <span class="keyword">SET</span> score = <span class="number">0</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">&#x27;CS&#x27;</span> = (<span class="keyword">SELECT</span> sdept <span class="keyword">FROM</span> student s <span class="keyword">WHERE</span> s.sno = sc.sno); <span class="comment">--利用相关子查询</span></span><br></pre></td></tr></table></figure><figure><img src="image-20240410143013193.png" alt="image-20240410143013193" /><figcaption aria-hidden="true">image-20240410143013193</figcaption></figure><h4 id="删除数据">3.删除数据</h4><p>【查询 56】删除学号为 22005 的学生记录。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> sno = <span class="string">&#x27;22005&#x27;</span>;<span class="comment">--在sc表中有student的外键约束，所以先删sc表里的</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sno = <span class="string">&#x27;22005&#x27;</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410143249150.png" alt="image-20240410143249150" /><figcaption aria-hidden="true">image-20240410143249150</figcaption></figure><p>【查询 57】删除所有的学生选课记录。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> sc</span><br></pre></td></tr></table></figure><p><code>由于后续操作还需用到sc，故没有执行操作</code></p><p>【查询 58】删除 CE 系所有学生的选课记录。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> <span class="string">&#x27;CE&#x27;</span> = (<span class="keyword">SELECT</span> sdept <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> student.sno = sc.sno);</span><br></pre></td></tr></table></figure><figure><img src="image-20240410143535001.png" alt="image-20240410143535001" /><figcaption aria-hidden="true">image-20240410143535001</figcaption></figure><h3 id="七修改表的结构">七、修改表的结构</h3><h4 id="添加列">1.添加列</h4><p>【查询 59】在 course 表中添加 description 列，用于保存课程描述。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> course <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> description <span class="type">TEXT</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410143900950.png" alt="image-20240410143900950" /><figcaption aria-hidden="true">image-20240410143900950</figcaption></figure><h4 id="删除列">2.删除列</h4><p>【查询 60】将 description 列从 course 表中删除。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> course <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> description;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410143909480.png" alt="image-20240410143909480" /><figcaption aria-hidden="true">image-20240410143909480</figcaption></figure><p>注意：如果有其他表通过外键约束依赖该列，为了维护参照完整性，数据库将进行提示，而非直接删除该列。可以最后添加 <code>CASCADE</code>关键字，在删除列时，一并删除所有依赖该列的数据库对象。</p><h4 id="添加约束">3.添加约束</h4><p>【查询 61】在 sc 表中添加约束，确保 score 大于等于 0 且小于等于 100。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> sc <span class="keyword">ADD</span> <span class="keyword">CHECK</span> (score&gt;=<span class="number">0</span> <span class="keyword">AND</span> score &lt;=<span class="number">100</span>);</span><br></pre></td></tr></table></figure><figure><img src="image-20240410144206238.png" alt="image-20240410144206238" /><figcaption aria-hidden="true">image-20240410144206238</figcaption></figure><p>【查询 62】在 sc 表中添加约束，确保 score 列不为空值。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> sc <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> score <span class="keyword">SET</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410144233800.png" alt="image-20240410144233800" /><figcaption aria-hidden="true">image-20240410144233800</figcaption></figure><h4 id="删除约束">4.删除约束</h4><p>【查询 63】在 sc 表中删除外键约束 fk_student。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> sc <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> fk_student;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410144413139.png" alt="image-20240410144413139" /><figcaption aria-hidden="true">image-20240410144413139</figcaption></figure><p>【查询 64】在 sc 表中删除 score 列上的非空约束。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> sc <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> score <span class="keyword">DROP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410144519882.png" alt="image-20240410144519882" /><figcaption aria-hidden="true">image-20240410144519882</figcaption></figure><h4 id="设置默认值">5.设置默认值</h4><p>【查询 65】在 sc 表中，为 score 列设置默认值为 0。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> sc <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> score <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410144636983.png" alt="image-20240410144636983" /><figcaption aria-hidden="true">image-20240410144636983</figcaption></figure><p>【查询 66】在 sc 表中，删除 score 列上设置的默认值。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> sc <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> score <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410144736312.png" alt="image-20240410144736312" /><figcaption aria-hidden="true">image-20240410144736312</figcaption></figure><h4 id="修改列数据类型">6.修改列数据类型</h4><p>【查询 67】在 sc 表中，将 score 列的数据类型改为 NUMERIC(5, 2)。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> sc <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> score <span class="keyword">TYPE</span> <span class="type">NUMERIC</span>(<span class="number">5</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><figure><img src="image-20240410145009787.png" alt="image-20240410145009787" /><figcaption aria-hidden="true">image-20240410145009787</figcaption></figure><p>注意，只有当该列的已有数据值能够通过默认类型转换转为指定的新数据类型时，修改列数据类型语句才能执行成功。</p><h4 id="重命名列">7.重命名列</h4><p>【查询 68】在 sc 表中，将 score 列名称改为 grade。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> sc <span class="keyword">RENAME</span> <span class="keyword">COLUMN</span> score <span class="keyword">TO</span> grade;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410145128111.png" alt="image-20240410145128111" /><figcaption aria-hidden="true">image-20240410145128111</figcaption></figure><h4 id="重命名表">8.重命名表</h4><p>【查询 69】将 sc 表的名称改为 student_course。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> sc <span class="keyword">RENAME</span> <span class="keyword">TO</span> student_course;</span><br></pre></td></tr></table></figure><figure><img src="image-20240410145232438.png" alt="image-20240410145232438" /><figcaption aria-hidden="true">image-20240410145232438</figcaption></figure><h1 id="实验总结">1.4实验总结</h1><p>本次实验较为基础，主要是对SQL语句增删改查操作的考察，不过仍然有一下需要理解的地方，如自连接、对已知查询语句的转化等等，具体需要注意的地方均已用红色标明。openGauss整体上和postgreSQL差不多，不过也有区别，如openGauss的自然连接是通过指定列名进行，而postgreSQL（或MySQL）是通过NATURAL JOIN来实现。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库原理实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时政整理</title>
      <link href="/2024/04/09/%E6%97%B6%E6%94%BF%E6%95%B4%E7%90%86/"/>
      <url>/2024/04/09/%E6%97%B6%E6%94%BF%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><strong>发展新质生产力的方法论——“先立后破、因地制宜、分类指导”</strong></p><p>新质生产力“特点是创新，关键在质优，本质是先进生产力”。这其中，<strong>科技创新</strong>起主导作用，是发展新质生产力的核心要素。</p><p>发展新质生产力的突破口和主攻方向是抓机遇，加大创新力度，培育壮大新兴产业，超前布局建设未来产业，完善现代化产业体系。</p><p>发展新质生产力不是要忽视、放弃传统产业，要防止一哄而上、泡沫化，也不要搞一种模式。</p><p>坚持实事求是，强调“各地要坚持从实际出发，先立后破、因地制宜、分类指导”；坚持深化改革，提出“着力打通束缚新质生产力发展的堵点卡点”；坚持科技创新，要求“掌握更多原创性、颠覆性科技创新成果，培育发展新质生产力的新动能”；在出席解放军和武警部队代表团全体会议时，要求“推动新质生产力同新质战斗力高效融合、双向拉动”</p><p><strong>推动高质量发展的辩证法——“风物长宜放眼量”</strong></p><p>“以高水平保护支撑高质量发展”，体现了习近平总书记运用辩证法推动高质量发展的高超智慧。</p><p>新征程上，以美丽中国建设全面推进人与自然和谐共生的现代化，处理好发展和保护的关系，以高质量发展推动高水平保护，迫切而重要。</p><p>从“以高水平保护支撑高质量发展”到“统筹高质量发展和高水平安全”，从“夯实高质量发展的生态基础”到“拓展生态产品价值实现路径”，从“增强生态环保政策与宏观政策取向一致性”到“在发展中稳步提升民生保障水平”……统筹把握之际，取舍定夺之间，考验的是治国理政的强大定力和远见卓识。</p><p>面对在场的全国人大代表们，习近平总书记强调：“要坚持以人民为中心的发展思想，在发展中稳步提升民生保障水平，引导激励广大群众依靠自己的双手创造幸福生活。”</p><p><strong>提振干事创业的精气神——“看准了就抓紧干，把各方面的干劲带起来”</strong></p><p>推进中国式现代化，是充满光荣与梦想的远征，是全体中华儿女的共同事业。</p><p>习近平总书记希望民革在对台工作大局中进一步找准定位、发挥优势、积极作为，更好团结海内外、岛内外一切可以团结的爱国力量，不断壮大反“独”促统力量，共同推进祖国和平统一进程。</p><p>习近平总书记的话催人奋进：“要继续巩固和增强经济回升向好态势，提振全社会发展信心，党员干部首先要坚定信心、真抓实干。要抓住一切有利时机，利用一切有利条件，看准了就抓紧干，把各方面的干劲带起来。”</p><p><strong>政府工作报告</strong></p><p>一、2023回顾</p><p>国内生产总值超过126万亿元，增长5.2%，增速居世界主要经济体前列。城镇新增就业1244万人，城镇调查失业率平均为5.2%。居民消费价格上涨0.2%。</p><p>粮食产量1.39万亿斤，再创历史新高。</p><p>居民人均可支配收入增长6.1%，城乡居民收入差距继续缩小。</p><p>一年来，我们深入学习贯彻党的二十大和二十届二中全会精神，按照党中央决策部署，主要做了以下工作。</p><p>一是加大宏观调控力度，推动经济运行持续好转。</p><p>二是依靠创新引领产业升级，增强城乡区域发展新动能。</p><p>三是深化改革扩大开放，持续改善营商环境。</p><p>四是强化生态环境保护治理，加快发展方式绿色转型。</p><p>五是着力抓好民生保障，推进社会事业发展。</p><p>六是全面加强政府建设，大力提升治理效能。</p><p>二、2024年经济社会发展总体要求和政策取向</p><p>今年发展主要预期目标是：国内生产总值增长5%左右；城镇新增就业1200万人以上，城镇调查失业率5.5%左右；居民消费价格涨幅3%左右；居民收入增长和经济增长同步；国际收支保持基本平衡；粮食产量1.3万亿斤以上；单位国内生产总值能耗降低2.5%左右，生态环境质量持续改善。</p><p>三、2024年政府工作任务</p><p>（一）大力推进现代化产业体系建设，加快发展新质生产力。</p><p>（二）深入实施科教兴国战略，强化高质量发展的基础支撑。</p><p>（三）着力扩大国内需求，推动经济实现良性循环。</p><p>（四）坚定不移深化改革，增强发展内生动力。</p><p>（五）扩大高水平对外开放，促进互利共赢。</p>]]></content>
      
      
      <categories>
          
          <category> 入党复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入党 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入党复习整理</title>
      <link href="/2024/03/29/%E5%85%A5%E5%85%9A%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/"/>
      <url>/2024/03/29/%E5%85%A5%E5%85%9A%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="考点复习">考点复习</h1><figure><img src="1.png" alt="图片" /><figcaption aria-hidden="true">图片</figcaption></figure><h2 id="辛亥革命">1、辛亥革命</h2><h3 id="背景">背景</h3><ul><li><strong>内因</strong>：晚清时期，由于清政府的腐败无能，加之不平等条约的签订，导致国家主权受损，民族危机加剧。国内经济陷入困境，社会矛盾激化，尤其是士绅和新兴的资产阶级对清政府的统治极度不满，促成了革命的爆发。</li><li><strong>外因</strong>：西方列强的侵略加剧了中国的国内危机，清政府接连在对外战争中失败，尤其是甲午战争和八国联军侵华战争，暴露了清政府的软弱，激发了民众的民族意识和反情绪。</li></ul><h3 id="时间">时间</h3><p>辛亥革命主要发生在1911年至1912年间，其中最为关键的事件——武昌起义爆发于1911年10月10日，这一天也被视为辛亥革命的起点。</p><h3 id="历史功绩">历史功绩</h3><p>辛亥革命的历史功绩主要体现在以下几个方面：</p><ol type="1"><li><strong>结束了封建帝制</strong>：辛亥革命推翻了统治中国两千多年的封建帝制，结束了清朝的统治，为中国的民主政治和社会变革开辟了道路。</li><li><strong>建立共和国</strong>：革命导致了中华民国的建立，中国首次尝试建立共和国形式的政府，尽管后续经历了多次波折，但共和政体的建立标志着中国政治制度的重大转变。</li><li><strong>促进社会变革</strong>：革命激发了社会各阶层对于政治参与的热情，促进了社会变革，同时也为后来的新文化运动等社会思潮的兴起提供了土壤。</li><li><strong>增强民族意识</strong>：辛亥革命期间，民族主义思想得到了广泛传播，增强了人民的民族意识，为后续的抗外侵斗争奠定了思想基础。</li></ol><h2 id="新文化运动">2、新文化运动</h2><p>新文化运动是中国近代史上一场重要的文化思想运动，主要发生在1915年到1920年代初期，以陈独秀、李大钊、鲁迅等人为代表。这场运动的核心是反对封建主义的文化和思想，主张民主与科学，对中国社会和文化产生了深远的影响。</p><h3 id="新文化运动的意义">新文化运动的意义</h3><ol type="1"><li><strong>思想解放</strong>：新文化运动倡导民主和科学的精神，反对传统文化中的封建礼教，强调个性解放和思想解放，为中国思想界带来了一场前所未有的解放运动。</li><li><strong>文化更新</strong>：通过提倡白话文的使用、推动文学革命，新文化运动极大地推动了中国文化的现代化进程，促进了中国文学和艺术的创新与发展。</li><li><strong>推动社会进步</strong>：新文化运动中的许多思想家不仅仅局限于文化层面的改革，他们还涉足政治、社会等领域，提出对于中国社会进步有着深远意义的观点和建议。</li><li><strong>培养革命力量</strong>：新文化运动期间，许多后来成为中国共产党和其他革命团体核心成员的革命家们，在这一过程中形成了自己的政治观点，对于后来的中国革命起到了积极的推动作用。</li></ol><h3 id="提出的革命口号">提出的革命口号</h3><p>在新文化运动期间，提出了许多重要的革命口号和主张，其中最著名的包括：</p><ol type="1"><li><strong>“德先生”与“赛先生”</strong>：即“民主”与“科学”。这两个口号是新文化运动的核心，强调民主政治和科学精神是中国社会进步的关键。</li><li><strong>文学革命</strong>：倡导“文以载道”，主张文学应该反映现实生活，服务于社会进步，推崇白话文，反对八股文，促进文学形式和内容的革新。</li><li><strong>批判封建礼教</strong>：对传统的儒家文化和封建礼教进行了深刻的批判，认为这是束缚人们思想的枷锁，阻碍了中国社会的进步。</li></ol><p>新文化运动极大地推动了中国社会的思想解放和文化变革，对后来的五四运动以及中国近现代史产生了深远的影响。</p><h2 id="五四运动">3、五四运动</h2><p>五四运动是中国近代史上一次具有深远影响的政治和文化运动，它不仅是对封建主义和帝国主义的反抗，也是新文化运动思想的延续和发展。五四运动对中国近现代史产生了重大影响，推动了中国社会的进步。</p><h3 id="导火索">导火索</h3><p>五四运动的直接导火索是1919年巴黎和会上的“巴黎和约”签订。一战结束后，按照战胜国和战败国的安排，原本期待能够收回山东省权益的中国，却发现根据“巴黎和约”的规定，德国在山东省的权益不是归还给中国，而是转让给了日本。这一不公正的决定引发了中国民众的极大不满和愤怒，特别是北京的学生群体，他们走上街头进行抗议，要求政府拒绝签署条约，保护国家主权和领土完整，从而引发了五四运动。</p><h3 id="意义">意义</h3><ol type="1"><li><strong>政治意义</strong>：五四运动是中国近代史上第一次由学生引发、影响到全国的群众运动，它标志着中国民族主义和爱国主义情绪的高涨。运动促使国民政府提出更加积极的外交政策，增强了中国人民反抗帝国主义和封建主义的决心。</li><li><strong>文化意义</strong>：五四运动加速了新文化运动的发展，推广了科学与民主的观念，促进了社会思想和文化的现代化。它也促成了中国社会由传统向现代的转型。</li><li><strong>对中国共产党的成立起到促进作用</strong>：五四运动期间，许多青年接触到了马克思列宁主义的思想，为中国共产党的成立培养了思想基础和人才储备。</li></ol><h3 id="提出的革命口号-1">提出的革命口号</h3><p>五四运动期间，提出了一系列富有影响力的革命口号，最核心的包括：</p><ol type="1"><li><strong>“拒绝签订不平等条约”</strong>：主张中国政府应拒绝在巴黎和会上签订割让中国领土和权益的不平等条约。</li><li><strong>“外争国权，内除国贼”</strong>：不仅要对外争取国家的独立和主权，还要清除内部的腐败和卖国贼。</li><li><strong>“科学与民主”</strong>：继承和发展了新文化运动的口号，强调科学和民主是中国社会进步的根本途径。</li><li><strong>“救国必须教育”</strong>：强调教育的重要性，认为只有提升国民素质，中国才能实现真正的独立和自强。</li></ol><p>五四运动不仅是一次政治运动，也是文化和思想的革命。它对于推动中国社会的进步、促进国民思想的觉醒具有不可磨灭的历史功绩。</p><h2 id="第一次全国性罢工高潮">4、第一次全国性罢工高潮</h2><p>中国历史上第一次全国性的罢工高潮发生在1922年，这一年的罢工活动在中国工人运动史上占有重要地位，标志着中国工人阶级开始以独立的政治力量登上历史舞台。</p><p>1922年的罢工高潮最著名的是<strong>香港海员罢工</strong>。这场罢工由香港海员发起，后来迅速蔓延到上海、广州等地，波及到全国多个行业和地区，成为一场规模巨大的全国性罢工运动。这次罢工不仅涉及到工人经济待遇的改善要求，也反映了中国工人对于国家和民族解放的深切关注，体现了工人阶级与全国人民反帝反封建的共同愿望。</p><p>该次罢工高潮具有以下特点：</p><ol type="1"><li><strong>规模巨大</strong>：涉及的行业广泛，参与罢工的工人人数众多，是中国工人运动历史上规模最大的一次。</li><li><strong>政治性强</strong>：这次罢工不仅仅是为了争取经济利益，更表达了对帝国主义压迫和封建势力的反抗，有着明显的政治目的。</li><li><strong>组织性高</strong>：罢工得到了中国共产党和其他革命组织的积极支持和参与，显示了较高的组织性和计划性。</li><li><strong>影响深远</strong>：这次罢工高潮极大地提高了中国工人阶级的阶级意识，推动了中国工人运动的发展，为后来的工人运动积累了宝贵的经验。</li></ol><h2 id="中国共产党">5、中国共产党</h2><h3 id="创立背景">创立背景</h3><p>在20世纪初，中国社会经历了深刻的社会变革和政治动荡。新文化运动和五四运动的爆发，激发了中国人民的民族意识和民主意识，同时，工人阶级的力量在城市工业化的推动下逐渐壮大。受到国际共产主义运动的影响，中国的革命者开始寻求一条新的解救国家和民族的出路。在这样的背景下，中国共产党应运而生。</p><h3 id="成立过程">成立过程</h3><p>中国共产党的成立经历了几个重要的步骤：</p><ul><li><strong>早期的准备工作</strong>：1919年五四运动后，中国各地出现了多个马克思主义研究团体和社会主义组织，如上海的共产党小组、北京的马克思学说研究会等。</li><li><strong>1921年7月</strong>：中国共产党第一次全国代表大会在上海和嘉兴召开。会议由于外部环境的干扰，先是在上海的法租界的一所女子学校开始，后移至嘉兴的南湖一艘船上继续进行。参加大会的代表有来自全国各地的12名代表，代表了当时全国50多名党员。这次会议标志着中国共产党的正式成立。</li><li><strong>会议成果</strong>：大会选举产生了党的最初领导机构——中央局，决定了党的名称为“中国共产党”，并讨论了党的未来发展方向和策略。</li></ul><h3 id="历史意义">历史意义</h3><p>中国共产党的成立，不仅是中国历史上的一个转折点，也是世界共产主义运动的重要事件。它的成立极大地推动了中国社会的进步和中国人民的解放事业，引领了中国革命的方向，为最终实现中国的独立、解放和社会主义建设奠定了基础。</p><h2 id="中国共青团">6、中国共青团</h2><h3 id="成立过程-1">成立过程</h3><p>中国共产主义青年团正式成立于1922年5月，在广州召开的第一次全国劳动青年代表大会上宣布成立。这次大会是在中国共产党的指导和帮助下召开的，标志着共青团作为一个全国性的青年组织正式成立。成立之初，共青团主要任务是团结青年力量，参与国内的民主革命活动，同时进行反帝反封建的斗争。</p><h3 id="发展和作用">发展和作用</h3><p>自成立以来，共青团一直是中国共产党领导的重要青年组织，参与了中国革命、建设和改革开放的各个历史时期，发挥了不可替代的作用：</p><ul><li><strong>革命时期</strong>：共青团组织动员广大青年参与抗日战争和解放战争，是中国共产党的重要力量支持。</li><li><strong>建国后</strong>：共青团积极参与国家建设，动员青年为社会主义现代化建设贡献力量。</li><li><strong>改革开放及现代化建设时期</strong>：共青团更加注重引导青年理解和参与改革开放政策，激励青年投身科技、教育、文化等领域的发展。</li></ul><h2 id="党的一大和二大">7、党的一大和二大</h2><h3 id="党的一大">党的一大</h3><p>中国共产党第一次全国代表大会（简称“党的一大”）于1921年7月23日至31日召开。这次大会首先在上海的法租界的一所女子学校开始，后因遭到法租界巡捕的干扰，转移到浙江嘉兴的南湖一艘船上继续。党的一大标志着中国共产党的正式成立。</p><p>参加党的一大的代表共有12人，代表全国50多名党员。这些代表来自全国各地，包括北京、上海、浙江、湖南、湖北、广州等地。大会的主要内容有：</p><ul><li>确定了党的名称为“中国共产党”。</li><li>通过了党的第一个纲领。</li><li>选举产生了党的第一个中央领导机构。</li></ul><p>党的一大的召开，标志着中国共产党作为一个独立的政党正式成立，开启了中国共产党领导中国人民进行革命和建设的新纪元。</p><h3 id="党的二大">党的二大</h3><p>中国共产党第二次全国代表大会（简称“党的二大”）于1922年7月16日至23日在上海召开。这次大会的参加者有12名代表，代表了全国195名党员。</p><p>党的二大的主要成果和决定包括：</p><ul><li>明确提出了党在中国革命中的基本任务是推翻帝国主义和封建主义的统治。</li><li>确定了党的最终目标是实现社会主义和共产主义。</li><li>通过了《中国共产党第二次全国代表大会宣言》，进一步阐述了党的基本理论和政策。</li><li>加强了党的组织建设，明确了党的民主集中制原则。</li><li>选举产生了新的中央执行委员会。</li></ul><p>党的二大进一步明确了党的基本路线和任务，对加强党的建设，指导后来的革命实践具有重要意义。这次会议加深了党对中国社会特点的认识，明确了党在中国革命中的领导地位和战略方向。</p><h2 id="党的最高纲领和最低纲领">8、党的最高纲领和最低纲领</h2><p>在新民主主义革命阶段，党的最低纲领主要是<strong>推翻帝国主义、封建主义和官僚资本主义的统治，实现国家的独立和人民的解放</strong>；而党的最高纲领则是<strong>在实现社会主义革命，建立社会主义社会的基础上，最终过渡到共产主义社会</strong>。</p><h2 id="国共合作">9、国共合作</h2><h3 id="国共第一次合作大革命时期">国共第一次合作（大革命时期）</h3><p>国共第一次合作发生在1924年至1927年间，这是中国国民党和中国共产党基于对抗外来侵略和推翻封建势力的共同目标而形成的联盟。</p><h4 id="背景-1">背景</h4><ul><li>1921年中国共产党成立后，中国共产党在寻求国内革命力量的同盟中认识到了与国民党合作的必要性。</li><li>国民党内部，在孙中山的领导下，也意识到了团结一切可以团结的力量对抗北洋军阀的重要性。</li><li>1923年，孙中山在广州重新组织国民党，并主张联俄、联共、扶助农工的三大政策。</li></ul><h4 id="主要事件和意义">主要事件和意义</h4><ul><li>1924年1月，国民党在广州召开了第一次全国代表大会，标志着国共第一次合作的正式开始。</li><li>合作期间，共同成立了黄埔军校，培养革命军事力量。</li><li>国共合作极大地推动了国民革命的进程，特别是1926年的北伐战争，取得了巨大的成功，摧毁了许多军阀势力，推进了中国的统一。</li></ul><h4 id="失败的标志1927年的四一二反共政变">失败的标志：1927年的“四一二”反共政变</h4><ul><li>合作的失败标志是1927年国民党内蒋介石领导的反共势力在上海发动的“四一二”政变，大规模镇压共产党人及其支持者。</li><li>随后的南京和武汉政变彻底标志着国共合作的瓦解，开始了长达十年的国内战争。</li></ul><h3 id="国共第二次合作">国共第二次合作</h3><p>国共第二次合作发生在1937年至1945年间，这一时期也被称为抗日民族统一战线。</p><h4 id="背景-2">背景</h4><ul><li>1931年，日本侵占东北，随后的几年中进一步加大了对中国的侵略行动。</li><li>到了1937年，随着卢沟桥事变的爆发，全面的抗日战争开始，中国面临着前所未有的危机。</li></ul><h4 id="主要事件和意义-1">主要事件和意义</h4><ul><li>在这种情况下，国民党和共产党基于共同的民族利益，决定放下内战，共同对抗日本侵略者，形成了第二次国共合作。</li><li>1937年9月，国共两党正式宣布形成抗日民族统一战线。</li><li>在抗日战争期间，国共两党虽然存在诸多矛盾和摩擦，但共同参与了对抗日本侵略者的斗争，为中国的最终胜利做出了贡献。</li></ul><h4 id="失败的标志抗日战争胜利后的内战再起">失败的标志：抗日战争胜利后的内战再起</h4><ul><li>抗日战争胜利后，国共两党的矛盾重新激化。双方在政治理念、国家未来发展方向上的分歧，以及对抗战胜利果实的争夺，使得合作关系迅速恶化。</li><li>1946年国民政府与中国共产党在重庆的和谈失败，是国共第二次合作瓦解的明显标志，随后，国内战争全面爆发。</li></ul><h2 id="人民军队">10、人民军队</h2><h3 id="创立">创立</h3><p>中国人民解放军的前身是1927年8月1日起义的南昌起义军。南昌起义是中国共产党为反抗国民党右翼的反动政策，保卫革命成果所发动的一次武装反抗。虽然起义最终失败，起义军被迫撤离南昌，但这次起义标志着中国共产党独立领导武装斗争的开始，被视为中国人民解放军的诞生日。</p><h3 id="发展">发展</h3><h4 id="红军时期1927-1937">红军时期（1927-1937）</h4><p>起义后，共产党领导的武装力量进入江西、福建等地，建立了若干个革命根据地，并在这些地区创建了工农红军，这是中国人民解放军的雏形。红军在这一时期通过进行农村包围城市的战略，发展壮大了革命力量。</p><h4 id="抗日战争时期1937-1945">抗日战争时期（1937-1945）</h4><p>国共第二次合作期间，为对抗日本侵略，红军改编为国民革命军新编第四军，后更名为八路军（华北）和新四军（华东），成为国民革命军的正式组成部分，参与了艰苦卓绝的抗日战争。</p><h4 id="解放战争时期1946-1949">解放战争时期（1946-1949）</h4><p>抗日战争胜利后，随着国共内战的再次爆发，中国共产党领导的军队被统一命名为中国人民解放军，开展了全面的解放战争。通过一系列的战略战役，如辽沈战役、淮海战役和平津战役等，人民解放军最终在1949年取得了全国胜利。</p><h4 id="新中国成立后">新中国成立后</h4><p>1949年中华人民共和国成立后，人民解放军成为国家的正规军队，不仅肩负着国防任务，还参与了国家的重建工作。在后续的数十年里，人民解放军参与了抗美援朝、中印边境冲突、中越边境冲突等重要的军事行动，同时也进行了一系列的现代化改革，以适应新时期国家安全和发展的需要。</p><h2 id="根据地建设和红军长征">11、根据地建设和红军长征</h2><h3 id="根据地建设">根据地建设</h3><p>1927年后，中国共产党在农村地区建立了第一个革命根据地——井冈山根据地。毛泽东和朱德等人在这里领导和实践了“农村包围城市、武装夺取政权”的革命新路。井冈山根据地的成功经验后来被推广到全国，形成了包括江西苏区、湘鄂西苏区、陕甘边苏区等多个革命根据地。在这些根据地内，共产党建立了苏维埃政权，实行了土地改革，没收地主土地分配给农民，极大地调动了农民群众的革命积极性，为红军的发展壮大提供了坚实的群众基础和物质保障。</p><h3 id="红军长征">红军长征</h3><p>1934年，由于国民党军队的围剿，特别是第五次“围剿”对江西苏区的严重打击，中国共产党领导的红军被迫实行战略转移，开始了伟大的长征。</p><p>长征是中国红军（主力是中国工农红军第一方面军）为躲避国民党军队的围追堵截，从江西省瑞金出发，经过两万五千里的艰苦跋涉，最终到达陕西省延安的历史事件。长征不仅是一次军事行动，更是一次伟大的政治行动和宣传行动，它证明了中国共产党和红军坚持抗击国民党反动派、坚持革命斗争的决心和勇气。</p><p>长征过程中，红军经历了许多著名的战役和艰难险阻，如四渡赤水、翻越大雪山、强渡金沙江、通过草地、会宁会师等。长征的胜利结束标志着红军从绝境中挺进到新的战略基地，为中国革命的最终胜利奠定了基础。1935年10月，红军到达陕北，与已经在那里建立的红军其他部队会师，建立了新的革命根据地。</p><h2 id="局部抗战和全面抗战">12、局部抗战和全面抗战</h2><h3 id="局部抗战">局部抗战</h3><p>局部抗战主要指的是1931年“九一八”事变后到1937年“七七事变”前这一时期，中国在特定区域内针对日本侵略的抵抗。在这个阶段，中国政府采取了较为克制的态度，主要是因为国内各方面条件限制，包括国民政府集中力量对付内部的共产党力量，以及军事、经济资源的不足等。因此，这一时期的抗战主要是在东北三省和北方的一些局部地区进行，最典型的是东北抗日联军的抗战活动。</p><h3 id="全面抗战">全面抗战</h3><p>全面抗战是指从1937年“七七事变”爆发后，中国政府宣布对日本进行全面的国家抗战，这标志着中国抗日战争进入了一个新的阶段。在这一阶段，中国全国上下统一战线，全面动员，全国范围内的军队和人民积极参与到抗日战争中。全面抗战期间，中国发生了许多重要的战役和事件，包括：</p><ul><li>卢沟桥事变，作为全面抗战的开端，日本军队的挑衅导致了北京附近的冲突，迅速演变成全面战争。</li><li>淞沪会战，是全面抗战初期最大规模的战役之一，展现了中国军队顽强的抵抗精神。</li><li>宁汉分裂的结束，国共两党实现第二次合作，形成了抗日民族统一战线。</li><li>抗战期间，还包括了太原战役、武汉会战、长沙会战等一系列重大战役。</li></ul><h2 id="三大战役">13、三大战役</h2><h3 id="辽沈战役">辽沈战役</h3><ul><li><strong>时间</strong>：1948年9月12日至11月2日</li><li><strong>地点</strong>：辽宁省沈阳及周边地区</li><li><strong>结果</strong>：人民解放军取得辽沈战役的胜利，成功解放了东北的重要城市沈阳，彻底摧毁了国民党在东北的主要军力。这是三大战役中的第一场，标志着解放战争进入了战略决战阶段。</li></ul><h3 id="淮海战役">淮海战役</h3><ul><li><strong>时间</strong>：1948年11月6日至1949年1月10日</li><li><strong>地点</strong>：位于江苏、安徽、河南交界的淮河地区</li><li><strong>结果</strong>：人民解放军在淮海战役中取得全面胜利，消灭和俘虏了国民党军55万人以上，巩固了华东解放区，为进攻长江中下游和直接威胁国民党政府所在的南京奠定了基础。</li></ul><h3 id="平津战役">平津战役</h3><ul><li><strong>时间</strong>：1948年11月29日至1949年1月31日</li><li><strong>地点</strong>：北京（当时称北平）和天津（津）及周边地区</li><li><strong>结果</strong>：通过平津战役，人民解放军成功解放了中国的两个重要城市——北京和天津。这场战役进一步削弱了国民党的军事力量，为后续解放全中国创造了有利条件。</li></ul><h2 id="中华人民共和国成立意义">14、中华人民共和国成立意义</h2><h3 id="结束了中国长期的内乱和分裂">结束了中国长期的内乱和分裂</h3><p>中华人民共和国的成立标志着中国多年来的内战和外来侵略得到了终结，国家实现了从未有过的统一。这为中国的稳定和发展提供了基础，结束了自鸦片战争以来，尤其是近代以来外国列强侵略和内部战乱造成的社会动荡和民族屈辱。</p><h3 id="开始了新的社会制度和发展模式">开始了新的社会制度和发展模式</h3><p>新中国的成立宣告了中国社会主义革命的开始和社会主义建设的展开。这标志着中国开始探索一条适合自己国情的发展道路，通过国家的快速工业化和现代化，逐步提高人民的生活水平，实现国家的繁荣和强大。</p><h3 id="加强了国家的主权和独立">加强了国家的主权和独立</h3><p>新中国的成立极大地增强了中国的国际地位，使中国成为世界上重要的国家之一。通过积极参与国际事务，中国为世界和平与发展做出了贡献，同时也为维护自身的主权、安全和发展利益提供了保障。</p><h2 id="抗美援朝的重要意义">15、抗美援朝的重要意义</h2><h3 id="国家主权和安全">国家主权和安全</h3><ul><li><strong>捍卫国家主权和安全</strong>：抗美援朝战争是新中国成立后面临的第一次重大外部挑战。通过参战，中国维护了国家的主权和安全，防止了战争蔓延至中国领土，尤其是在东北边境地区。</li></ul><h3 id="国际地位">国际地位</h3><ul><li><strong>提升国际地位</strong>：中国在抗美援朝战争中展现出强大的国力和军事能力，使新成立的中华人民共和国在国际上赢得了尊重，显著提升了中国在国际社会中的地位和影响力。</li></ul><h3 id="民族自信心和凝聚力">民族自信心和凝聚力</h3><ul><li><strong>增强民族自信心和凝聚力</strong>：这场战争极大地增强了中国人民的民族自豪感和自信心。通过与世界上最强大的国家之一对抗并能够保持不败，极大提升了国民的凝聚力和斗志。</li></ul><h3 id="军事经验和国防建设">军事经验和国防建设</h3><ul><li><strong>积累军事经验，推动国防建设</strong>：抗美援朝战争为中国军队积累了宝贵的实战经验，这对于新中国的国防建设和军事现代化有着重要的促进作用。战争后，中国加快了军事和国防科技的发展。</li></ul><h3 id="政治和外交策略">政治和外交策略</h3><ul><li><strong>影响国际政治格局</strong>：抗美援朝战争改变了冷战时期的国际政治格局，增强了社会主义阵营的凝聚力，同时也促进了中国与其他社会主义国家，特别是与苏联的关系。</li></ul><h3 id="战后和平利用">战后和平利用</h3><ul><li><strong>促进了朝鲜半岛和地区的和平与稳定</strong>：虽然朝鲜战争以停战协议而非和平条约结束，但战争的结束避免了更大范围的冲突，为朝鲜半岛及东北亚地区的和平与稳定作出了贡献。</li></ul><h2 id="新中国成立后的三反运动">16、新中国成立后的“三反运动”</h2><ol type="1"><li><strong>反腐败</strong>：针对一些党政机关和企事业单位中存在的贪污腐败现象，通过查处一批腐败案件来净化政府机关和社会环境。</li><li><strong>反浪费</strong>：针对公共资源和资金的浪费问题，推动各级机关和单位节约资源，提高效率。</li><li><strong>反官僚主义</strong>：针对官僚作风，即工作中的推诿扯皮、效率低下和脱离群众的问题，要求官员们密切联系群众，提高工作效率和服务水平。</li></ol><h2 id="整风运动反右斗争及大跃进的相关历史">17、整风运动、反右斗争及大跃进的相关历史</h2><h3 id="整风运动">整风运动</h3><p>整风运动是1957年中国共产党发起的一次重要的内部整顿运动，旨在解决党内存在的主观主义、宗派主义和官僚主义问题，同时也是为了提高党的领导水平和工作效率。整风运动的核心目的是通过批评和自我批评，促进党员干部的思想进步，纠正工作中的错误。</p><p>整风运动分为三个阶段：开展批评和自我批评、反对宗派主义、整顿学风、党风和文风。这一运动在一定程度上增强了党的凝聚力和战斗力，提高了党的工作效率，但也伴随着一系列的过激行为和错误。</p><h3 id="反右斗争">反右斗争</h3><p>1957年整风运动之后，中国共产党发起了反右斗争。在整风运动中，鼓励人们自由发表意见，揭露问题，但随后政府将一些批评党和政府、提出不同意见的知识分子和党内人士定性为“右派分子”，进行打击和迫害。这场斗争导致大量知识分子、党员和其他人士被错误地打为“右派”，遭受政治迫害，影响了社会的知识氛围和文化发展，损害了党和政府的形象。</p><h3 id="大跃进">大跃进</h3><p>大跃进运动是1958年至1961年间，在毛泽东的倡导下，旨在通过大规模的社会主义建设项目，特别是钢铁和农业生产，迅速提高国家的工业和农业生产能力。这一时期，推行了人民公社化运动，实行了“大炼钢铁”和“大跃进”农业政策。</p><p>大跃进导致了严重的经济混乱和资源浪费，加上自然灾害，造成了严重的粮食短缺，引发了历史上最严重的一次饥荒，导致数百万人饿死。大跃进被广泛认为是一场灾难性的失败，对中国的经济和社会发展造成了长远的影响。</p><h2 id="新中国外交方针的提出">18、新中国外交方针的提出</h2><ol type="1"><li><strong>相互尊重主权和领土完整</strong></li><li><strong>互不侵犯</strong></li><li><strong>互不干涉内政</strong></li><li><strong>平等互利</strong></li><li><strong>和平共处</strong></li></ol><h2 id="春天的故事十一届三中全会">19、“春天的故事”（十一届三中全会）</h2><h3 id="背景-3">背景</h3><p>在十一届三中全会之前，中国经历了长期的政治动荡，特别是“文化大革命”（1966-1976年）造成了巨大的经济和社会损失。1976年，随着毛泽东的逝世和“四人帮”的倒台，中国政治生活开始步入正轨，为改革开放创造了条件。</p><h3 id="内容和决策">内容和决策</h3><p>十一届三中全会的核心议题是如何纠正“文化大革命”期间的错误，以及如何推进国家的经济和社会发展。在这次会议上，邓小平等领导人强调了经济建设的中心地位，提出了实行改革开放的基本方针，确立了社会主义现代化建设的新路线。会议的主要决策包括：</p><ul><li>将党和国家工作的重点转移到经济建设上来，推动四个现代化（即工业、农业、国防和科技现代化）的实现。</li><li>实行开放政策，引进外资和先进技术，推动经济体制的改革，逐步建立社会主义市场经济体制。</li><li>改革农村的人民公社制度，推行家庭联产承包责任制，激发农村生产力。</li><li>强调思想解放，鼓励实事求是的思想路线，促进科学技术和教育事业的发展。</li></ul><h3 id="意义-1">意义</h3><p>十一届三中全会是中国共产党历史上的一个里程碑，它结束了长期以来以阶级斗争为纲的错误方针，将中国引向了改革开放和现代化建设的新时期。这次会议的决策和政策调整，为中国经济的快速发展奠定了基础，也为中国在国际社会中的地位提升开辟了道路。改革开放不仅极大地提高了中国人民的生活水平，也对世界经济产生了重要影响。十一届三中全会因此被认为是新中国历史上转折点之一，开启了中国特色社会主义道路。</p><h2 id="港澳回归">20、港澳回归</h2><h4 id="香港回归">香港回归</h4><p>香港是在1842年鸦片战争后通过《南京条约》被英国强占，1898年，通过《展拓香港界址专条》(即《第二次北京条约》)，英国又以租借方式获得了香港新界地区99年的使用权。随着租借期的即将结束，中国政府与英国政府就香港的前途问题进行了谈判。</p><p>1984年12月19日，中国政府和英国政府签署了《中英联合声明》，明确香港自1997年7月1日起恢复中国行使主权，并实行“一国两制”、港人治港、高度自治的方针。</p><h4 id="澳门回归">澳门回归</h4><p>澳门自16世纪中叶起被葡萄牙占领和管理，直到1987年，中国政府和葡萄牙政府签订了《中葡联合声明》，约定从1999年12月20日起，中国对澳门恢复行使主权。澳门的回归同样采用了“一国两制”的原则进行。</p><h3 id="回归的意义">回归的意义</h3><h4 id="国家主权和领土完整">国家主权和领土完整</h4><p>港澳回归对中国来说具有重大的意义，它不仅实现了国家主权的完整，结束了香港和澳门长期的殖民统治，也是中华民族的一大胜利，体现了中国人民的民族自尊心和自信心。</p><h4 id="一国两制的实践">“一国两制”的实践</h4><p>港澳的回归是“一国两制”原则的成功实践。这一原则既保证了香港和澳门的社会制度和生活方式不变，又确保了国家的主权、安全和发展利益，为解决其他历史遗留问题提供了有益的借鉴和经验。</p><h4 id="促进地区发展和稳定">促进地区发展和稳定</h4><p>港澳回归后，两地与内地的经济文化交流更加紧密，为促进地区的经济发展和社会稳定提供了新的机遇。香港和澳门的繁荣稳定是“一国两制”成功实践的重要体现，对维护区域和世界的和平与发展具有积极作用。</p><h2 id="重要历史人物以及他们的重要著作和理论">21、重要历史人物以及他们的重要著作和理论</h2><h3 id="马克思">马克思</h3><ul><li><strong>著作</strong>：《资本论》、《共产党宣言》（与恩格斯合著）</li><li><strong>理论</strong>：阐述了历史唯物主义和剩余价值理论，提出了共产主义社会的构想。</li></ul><h3 id="列宁">列宁</h3><ul><li><strong>著作</strong>：《国家与革命》、《帝国主义是资本主义的最高阶段》</li><li><strong>理论</strong>：发展了马克思主义，特别是关于帝国主义、无产阶级专政和党的建设的理论。</li></ul><h3 id="孙中山">孙中山</h3><ul><li><strong>著作</strong>：《建国方略》、《民族主义与国家生活》</li><li><strong>理论</strong>：提出了“三民主义”（民族主义、民权主义、民生主义），是中国近代民主革命的理论基础。</li></ul><h3 id="李大钊">李大钊</h3><ul><li><strong>著作</strong>：《我的马克思主义观》</li><li><strong>理论</strong>：中国共产党早期领导人之一，倡导马克思主义与中国实际相结合。</li></ul><h3 id="陈独秀">陈独秀</h3><ul><li><strong>著作</strong>：《新青年》杂志文章集</li><li><strong>理论</strong>：新文化运动的倡导者，强调民主和科学的重要性，中国共产党的主要创始人之一。</li></ul><h3 id="毛泽东">毛泽东</h3><ul><li><strong>著作</strong>：《新民主主义论》、《论持久战》</li><li><strong>理论</strong>：提出了毛泽东思想，包括人民战争、新民主主义革命和社会主义建设的理论和策略。</li></ul><h3 id="周恩来">周恩来</h3><ul><li><strong>著作</strong>：无特定著作，但在外交、国家建设等方面有重要贡献</li><li><strong>理论</strong>：作为中国共产党的重要领导人，对中国的外交政策和国家现代化建设产生了重要影响。</li></ul><h3 id="邓小平">邓小平</h3><ul><li><strong>著作</strong>：《邓小平文选》</li><li><strong>理论</strong>：提出了改革开放政策和“一个国家，两种制度”的概念，推动了中国的经济改革和开放。</li></ul><h3 id="江泽民">江泽民</h3><ul><li><strong>著作</strong>：《江泽民文选》</li><li><strong>理论</strong>：提出了“三个代表”重要思想，强调党代表中国先进社会生产力的发展要求、先进文化的前进方向，代表中国最广大人民的根本利益。</li></ul><h3 id="胡锦涛">胡锦涛</h3><ul><li><strong>著作</strong>：《胡锦涛文选》</li><li><strong>理论</strong>：提出了“科学发展观”，强调均衡、协调、可持续的发展模式，重视社会和谐。</li></ul><h3 id="习近平">习近平</h3><ul><li><strong>著作</strong>：《习近平谈治国理政》</li><li><strong>理论</strong>：提出了习近平新时代中国特色社会主义思想，涵盖了经济、政治、文化、社会和生态文明建设等多个方面，强调了全面深化改革、全面依法治国、全面从严治党、推动构建人类命运共同体等。</li></ul><h1 id="二党章整理">二、党章整理</h1><h2 id="党的组织体系">1、党的组织体系</h2><ul><li><strong>党的全国代表大会</strong>：最高权力机构，通常每五年召开一次。</li><li><strong>中央委员会</strong>：全国代表大会闭会期间的最高权力机构。</li><li><strong>政治局和其常务委员会</strong>：中央委员会闭会期间的领导核心。</li><li><strong>中央纪律检查委员会</strong>：负责党内监督和纪律检查。</li><li><strong>基层组织</strong>：包括党支部、党小组等，是党的工作和战斗力的基础。</li></ul><h2 id="四项基本原则">2、四项基本原则</h2><ul><li>坚持社会主义道路</li><li>坚持人民民主专政</li><li>坚持中国共产党的领导</li><li>坚持马克思列宁主义、毛泽东思想</li></ul><h2 id="入党誓词">3、入党誓词</h2><p>“我志愿加入中国共产党，拥护党的纲领，遵守党的章程，履行党员义务，执行党的决定，严守党的纪律，保守党的秘密，对党忠诚，积极工作，为共产主义事业奋斗，随时为党和人民牺牲一切，永不叛党。”</p><h2 id="预备党员和正式党员权利区别">4、预备党员和正式党员权利区别</h2><p>预备党员有发言权、提议权、表决权，但没有选举权、被选举权和表决重大问题的权利。一年预备期满，经支部大会通过，方可成为正式党员。</p><h2 id="党龄的计算">5、党龄的计算</h2><p>从被批准为预备党员之日算起。</p><h2 id="党员党内违纪处理方式">6、党员党内违纪处理方式</h2><p>根据违纪行为的性质和情节，党内违纪的处理方式包括：警告、严重警告、撤销党内职务、留党察看、开除党籍等。</p><h2 id="群众路线和思想路线">7、群众路线和思想路线</h2><ul><li><strong>群众路线</strong>：“一切为了群众，一切依靠群众”，强调党的工作和政策要反映群众的意愿和利益，党与群众之间要保持密切联系。</li><li><strong>思想路线</strong>：“实事求是，群众路线，独立自主”，强调在一切工作中都要从实际出发，理论联系实际，相信群众、依靠群众，同时保持思想和政治的独立性。</li></ul><h2 id="申请入党的条件">8、申请入党的条件</h2><p>申请入党需要符合以下基本条件：</p><ol type="1"><li><strong>拥护党的纲领</strong>，遵守党的章程，履行党员义务，执行党的决定。</li><li><strong>在党的基层组织中进行了一定时期的活动</strong>，有一名正式党员作为介绍人。</li><li><strong>年满十八岁</strong>。</li><li><strong>有正当职业</strong>。</li><li><strong>愿意参加一个党的支部，经过考察，同意其入党</strong>。</li></ol><h2 id="三重要理论">三、重要理论</h2><h3 id="毛泽东思想">毛泽东思想</h3><ul><li><strong>基本内容</strong>：毛泽东思想是中国共产党在中国革命和建设实践中，结合马克思列宁主义基本原理形成的理论成果，包括新民主主义革命理论、社会主义建设理论、持久战理论、人民战争思想、党的建设新论等。</li><li><strong>意义</strong>：为中国革命和建设指明了方向，确立了中国共产党在中国社会主义事业中的领导地位。</li></ul><h3 id="邓小平理论">邓小平理论</h3><ul><li><strong>基本内容</strong>：邓小平理论是在新的历史条件下对马克思列宁主义、毛泽东思想的继承和发展，明确提出了建设有中国特色社会主义的基本问题，包括改革开放、社会主义市场经济、社会主义初级阶段理论等。</li><li><strong>意义</strong>：邓小平理论标志着中国特色社会主义理论体系的初步形成，为中国改革开放和现代化建设提供了科学指导。</li></ul><h3 id="三个代表重要思想">“三个代表”重要思想</h3><ul><li><strong>内容</strong>：强调中国共产党必须始终代表中国先进社会生产力的发展要求、代表中国先进文化的前进方向、代表中国最广大人民的根本利益。</li><li><strong>意义</strong>：进一步丰富和发展了中国特色社会主义理论体系，加强了党的建设，保证党和国家的长期稳定。</li></ul><h3 id="科学发展观">科学发展观</h3><ul><li><strong>内涵</strong>：以人为本，全面、协调、可持续发展，强调发展的科学性和正确性。</li><li><strong>意义</strong>：为中国特色社会主义发展提供了新的理论指导，促进了社会主义现代化建设。</li></ul><h3 id="构建社会主义和谐社会">构建社会主义和谐社会</h3><ul><li><strong>目的</strong>：创建一个民主法治、公平正义、诚信友爱、充满活力、稳定有序、人与自然和谐共生的社会，以应对社会主要矛盾和问题。</li><li><strong>意义</strong>：是实现全面建设小康社会目标，推动社会主义现代化的重要途径。</li></ul><h3 id="党的群众路线教育实践活动">党的群众路线教育实践活动</h3><ul><li><strong>目的和意义</strong>：深入贯彻党的群众路线，解决党内存在的脱离群众、形式主义、官僚主义等问题，增强党的群众基础和执政能力。</li></ul><h3 id="四个自信">“四个自信”</h3><ul><li>对中国特色社会主义道路自信、理论自信、制度自信、文化自信。</li></ul><h3 id="四个全面">“四个全面”</h3><ul><li>全面建成小康社会、全面深化改革、全面依法治国、全面从严治党。</li></ul><h3 id="中国梦">“中国梦”</h3><ul><li><strong>意义和内涵</strong>：实现中华民族的伟大复兴，使国家富强、民族振兴、人民幸福。</li></ul><h3 id="社会主义核心价值体系">社会主义核心价值体系</h3><ul><li>包括马克思主义指导思想、中国特色社会主义共同理想、以爱国主义为核心的民族精神和以改革创新为核心的时代精神等。</li></ul><h3 id="不忘初心牢记使命主题教育">“不忘初心、牢记使命”主题教育</h3><ul><li>旨在引导党员干部始终保持共产党人的政治本色，不断推进自我革命。</li></ul><h3 id="中国共产党人的精神谱系">中国共产党人的精神谱系</h3><ul><li>指中国共产党人继承和发展的革命精神和优良传统，如实事求是、艰苦奋斗等。</li></ul><h3 id="三个务必和五个必由之路">“三个务必”和五个“必由之路”</h3><ul><li>“三个务必”指务必坚持党的基本理论、基本路线、基本方略；五个“必由之路”是指中国特色社会主义必须坚持的道路、理论体系、制度、文化和党的领导。</li></ul><h3 id="党的中心任务">党的中心任务</h3><ul><li>经济建设是党的中心任务，所有工作都要围绕经济建设的中心进行。</li></ul><h3 id="中国式现代化">中国式现代化</h3><ul><li>一种符合中国国情的现代化道路，强调在保持和发展中国特色的同时，实现国家的工业化、信息化、城镇化、农业现代化。</li></ul><h3 id="全面深化改革总目标">全面深化改革总目标</h3><p>完善和发展中国特色社会主义制度，推进国家治理体系和治理能力现代化</p><h3 id="党的建设思想基本要求">党的建设思想基本要求</h3><p>坚持党的基本路线，坚持解放思想、实事求是、与时俱进，坚持全心全意为人民服务，坚持民主集中制</p><h3 id="党员发展的十六字方针">党员发展的十六字方针</h3><p>控制总量、优化结构、提高质量、发挥作用</p><h3 id="党的基本路线">党的基本路线</h3><p>党在社会主义初级阶段的基本路线：领导和团结全国各族人民，以经济建设为中心，<a href="https://baike.baidu.com/item/坚持四项基本原则/0?fromModule=lemma_inlink">坚持四项基本原则</a>（<strong>即坚持社会主义道路、坚持人民民主专政、坚持共产党的领导、坚持马克思列宁主义毛泽东思想</strong>），坚持<a href="https://baike.baidu.com/item/改革开放/886098?fromModule=lemma_inlink">改革开放</a>，自力更生，艰苦创业，为把我国建设成为富强、民主、文明、和谐、美丽的社会主义现代化强国而奋斗。</p>]]></content>
      
      
      <categories>
          
          <category> 入党复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入党 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/26/hello-world/"/>
      <url>/2024/03/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test01</title>
      <link href="/2024/03/25/test01/"/>
      <url>/2024/03/25/test01/</url>
      
        <content type="html"><![CDATA[<h1 id="这是测试文章哈哈哈哈">这是测试文章，哈哈哈哈</h1><h2 id="这是测试">这是测试</h2><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
